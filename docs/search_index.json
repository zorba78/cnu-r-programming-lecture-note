[["index.html", "통계 프로그래밍 언어 2021년도 1학기 충남대학교 정보통계학과 강의노트 Course Overview", " 통계 프로그래밍 언어 2021년도 1학기 충남대학교 정보통계학과 강의노트 한국한의학연구원, 구본초 2021-06-10 Course Overview 본 문서는 2021년도 1학기 충남대학교 정보통계학과에서 개설한 “통계 프로그래밍 언어” 강의를 위해 개발한 강의 노트임 주 단위로 업데이트 될 예정 https://zorba78.github.io/cnu-r-programming-lecture-note/ 에서 확인 pdf 파일 다운로드가 가능하지만 권장하지는 않음. Google Chrome 또는 Firefox 브라우저 사용 권장 온라인 상태 유지 필수 본 문서는 Yihui Xie가 개발한 bookdown 패키지 (Xie 2016)를 활용하여 생성한 문서임. 충남대학교 정보통계학과 이상인 교수님의 2019년도 2학기 “통계패키지활용” 강의 자료 내용과 구성을 참고하여 작성함. 강의소개 R은 뉴질랜드 오클랜드 대학의 Robert Gentleman 과 Ross Ihaka 가 AT&amp;T 벨 연구소에서 개발한 S 언어를 기반으로 개발한 GNU 환경의 통계 계산 및 프로그래밍 언어이다. 현재 R 소프트웨어는 통계학 뿐 아니라 데이터 과학을 포함한 의학, 생물학 등 다양한 분야에서 활용되고 있으며 특히 통계 소프트웨어 개발과 데이터 분석에 많이 활용되고 있다. 본 강의는 데이터 분석을 위한 R의 기초 문법과 통계학 입문에서 학습한 몇 가지 중요한 통계적 이론에 대한 시뮬레이션 방법을 다룬다. 아울러 R package를 활용한 데이터 헨들링 및 시각화 그리고 Rmarkdown을 활용한 재현가능(reproducible)한 문서 작성법에 대해 학습하고자 한다. 교과 목표 R 기초 문법 습득 R 프로그래밍 능력 향상 R 시뮬레이션을 통한 통계학 기초 이론 확인 R markdown을 이용한 재현가능(reproducible)한 보고서 작성 방법 이해 선수과목 통계학 개론, 통계수학 1/통계수학 2 (필수는 아님) 수업 방법 강의: 40 % 실험/실습: 60% 평가방법 기말고사: 70 % 출석: 10 % 과제: 10 % 퀴즈: 10 % 교재 및 참고문헌 별도의 교재 없이 본 강의 노트로 수업을 진행할 예정이며, 수업의 이해도 향상을 위해 아래 소개할 도서 및 웹 문서 등을 참고할 것을 권장함. 참고문헌 빅데이터 분석 도구 R 프로그래밍 (매트로프 2012) 실리콘밸리 데이터과학자가 알려주는 따라하며 배우는 데이터 과학 (권재명 2017) R을 이용한 데이터 처리&amp;분석 (서민구 2014) R for data science (Wickham and Grolemund 2016) Statistical Computing with R (Rizzo 2019) R programming for data science (Peng 2016) References "],["intro-chap.html", "1 Introduction", " 1 Introduction 1. R프로그램 데이터 분석을 위한 자료 전처리, 통계 및 시각화를 지원하는 컴퓨터 언어 및 환경 1980년 AT&amp;T 벨 연구소의 John Chambers가 개발한 S 언어를 기반으로 1995년 뉴질랜드 Auckland 대학의 통계학과 교수 Robert Gentleman과 Ross Ihaka 가 개발 GNU 기반의 오픈 소스 통계학, 전산학, 생물학, 의학 등 거의 모든 학문분야에서 분석도구로 활용되고 있고, 최근 data science 분야에서 널리 활용 2. R 언어의 특징 무료 소프트웨어 CRAN (Comprehensive R Archive Network)에서 배포 특정 vendor가 아닌 전 세계 연구자들이 개발한 알고리즘 및 최신 함수 활용 가능(packaging system) 범용적으로 사용되는 거의 대부분의 운영체제(Windows, Mac, Linux)에서 작동 가능 방대한 개발 및 사용 생태계 형성 강력한 그래픽 기능 유용한 웹 사이트: R과 관련한 거의 모든 문제는 Googling (구글을 이용한 검색)을 통해 해결 가능(검색주제 + “in R” or “in R software”)하고 많은 해답들이 아래 열거한 웹 페이지에 게시되어 있음. R 프로그래밍에 대한 Q&amp;A: Stack Overflow R 관련 웹 문서 모음: Rpubs R package에 대한 raw source code 제공: Github R을 이용한 통계 분석: Statistical tools for high-throughput data analysis (STHDA) "],["installation.html", "1.1 R 설치하기", " 1.1 R 설치하기 R 다운로드 사이트: https://www.r-project.org 또는 https://cran.r-project.org 웹 브라우저(i.e. Explore, Chrome, Firefox 등)의 주소 입력창에 https://www.r-project.org 좌측 R Logo 하단 Download 아래 CRAN 클릭 클릭 후 연결한 페이지를 스크롤 후 Korea 아래 링크1 클릭 클릭 후 세 가지 운영체제(Linux, Mac OS X, Windowns)에 따른 R 버전 선택 가능2 Downloads R for Windows 링크 클릭하면 다음과 같은 화면으로 이동 다음 하위폴더에 대한 간략 설멍 base: R 실행 프로그램 contrib: R package의 바이너리 파일 Rtools: R package 개발 및 배포를 위한 프로그램 위 화면에서 base 링크 클릭 후 아래 화면에서 Downloads R 3.x.x for Windows 를 클릭 후 설치 파일을 임의의 디렉토리에 저장 및 실행 다운로드한 파일을 실행하면 아래와 같은 대화창이 나타남 한국어 선택 \\(\\rightarrow\\) 환영 화면에서 [다음(N)&gt;] 클릭 GNU 라이센스에 대한 설명 및 동의 여부([다음(N)&gt;]) 클릭 설치 디렉토리 설정 및 구성요소 설지 여부 원하는 디렉토리 설정(예: C:\\R\\R-3.x.x) 기본 프로그램(“Core Files”), 32 또는 64 bit 용 설치 파일, R console 한글 번역 모두 체크 뒤 [다음(N)&gt;] 클릭 R 스타트업 옵션 지정 기본값(“No” check-button)으로도 설치 진행 가능 본 문서에서는 스타트업 옵션 변경으로 진행 화면표시방식(디스플레이 모드) 설정 변경 MDI: 한 윈도우 내에서 script 편집창, 출력, 도움말 창 사용 SDI: 다중 창에서 각각 script 편집창, 출력, 도움말 등을 독립적으로 열기 도움말 형식에서 HTML 도움말 기반 선택 시작메뉴 폴더 선택 “바로가기”를 생성할 시작 메뉴 폴더 지정 후 [다음(N)&gt;] 클릭 후 설치 진행 하단 “시작메뉴 폴더 만들지 않음” 체크박스 표시 시 시작메뉴에 “바로가기” 아이콘이 생성되지 않음(실행에 전혀 지장 없음) 추가 옵션 지정: 바탕화면 아이콘 생성 등 추가적 작업 옵션 체크 후 [다음(N)&gt;] 클릭 \\(\\rightarrow\\) 설치 진행 설치된 R 버전 정보 레지스트리 저장 여부 .Rdata 확장자를 R 실행파일과 자동 연계 설치 완료 후 바탕화면의 R 아이콘을 더블클릭하면 Rgui가 실행 Figure 1.1: Windows에서 R 실행화면(콘솔 창, SDI 모드) 해당 링크들은 접속 시점에 따라 변경될 수 있음↩︎ 본 노트는 Windows 버전 설치만 다룸↩︎ "],["r-check.html", "1.2 R 시작 및 작동 체크", " 1.2 R 시작 및 작동 체크 실습: 설치된 R을 실행 후 보이는 R 콘솔(consle) 창에서 명령어를 실행하고 결과 확인 Figure 1.1 에서 &gt; 기호는 R의 명령 프롬프트(command prompt) 임 \\(\\rightarrow\\) 컴퓨터가 사용자 명령을 기다리고 있다는 기호 현재 R session3 정보(R 설치 버전, locale, 로딩 packages) 출력 # R의 설치 버전 및 현재 설정된 locale(언어, 시간대) 및 로딩된 R package 정보 출력 sessionInfo() R version 4.0.5 (2021-03-31) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 18.04.5 LTS Matrix products: default BLAS: /usr/lib/x86_64-linux-gnu/openblas/libblas.so.3 LAPACK: /usr/lib/x86_64-linux-gnu/libopenblasp-r0.2.20.so locale: [1] LC_CTYPE=ko_KR.UTF-8 LC_NUMERIC=C [3] LC_TIME=ko_KR.UTF-8 LC_COLLATE=ko_KR.UTF-8 [5] LC_MONETARY=ko_KR.UTF-8 LC_MESSAGES=ko_KR.UTF-8 [7] LC_PAPER=ko_KR.UTF-8 LC_NAME=C [9] LC_ADDRESS=C LC_TELEPHONE=C [11] LC_MEASUREMENT=ko_KR.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] stats graphics grDevices utils datasets methods base other attached packages: [1] kableExtra_1.3.4 gtsummary_1.4.0 gt_0.3.0 glue_1.4.2 [5] forcats_0.5.1 stringr_1.4.0 dplyr_1.0.6 purrr_0.3.4 [9] readr_1.4.0 tidyr_1.1.3 tibble_3.1.2 ggplot2_3.3.3 [13] tidyverse_1.3.1 rmarkdown_2.8 knitr_1.33 loaded via a namespace (and not attached): [1] Rcpp_1.0.6 svglite_2.0.0 lubridate_1.7.10 [4] lattice_0.20-41 assertthat_0.2.1 digest_0.6.27 [7] utf8_1.2.1 R6_2.5.0 cellranger_1.1.0 [10] backports_1.2.1 reprex_2.0.0 evaluate_0.14 [13] highr_0.9 httr_1.4.2 pillar_1.6.1 [16] rlang_0.4.11 readxl_1.3.1 rstudioapi_0.13 [19] jquerylib_0.1.4 Matrix_1.3-3 splines_4.0.5 [22] webshot_0.5.2 munsell_0.5.0 broom_0.7.6 [25] compiler_4.0.5 modelr_0.1.8 xfun_0.23 [28] systemfonts_1.0.2 pkgconfig_2.0.3 htmltools_0.5.1.1 [31] tidyselect_1.1.1 bookdown_0.22 viridisLite_0.4.0 [34] fansi_0.4.2 crayon_1.4.1 dbplyr_2.1.1 [37] withr_2.4.2 grid_4.0.5 jsonlite_1.7.2 [40] gtable_0.3.0 lifecycle_1.0.0 DBI_1.1.1 [43] magrittr_2.0.1 scales_1.1.1 cli_2.5.0 [46] stringi_1.6.2 broom.helpers_1.3.0 fs_1.5.0 [49] xml2_1.3.2 bslib_0.2.5 ellipsis_0.3.2 [52] generics_0.1.0 vctrs_0.3.8 tools_4.0.5 [55] hms_1.0.0 survival_3.2-10 yaml_2.2.1 [58] colorspace_2.0-1 rvest_1.0.0 haven_2.4.1 [61] sass_0.4.0 문자열 출력 #문자열 출력 print(&quot;Hello R&quot;) #문자열 [1] &quot;Hello R&quot; # 기호는 주석의 시작을 의미하고 실제로 실행되지 않음 같은 행에서 # 뒤 내용의 코드 역시 실행되지 않음 a 라는 변수에 숫자 9, b라는 변수에 숫자 7를 할당 후 출력 # 수치형 값(scalar)을 변수에 할당(assign) # 여러 명령어를 한줄에 입력할 때에는 세미콜론(;)으로 구분 a = 9; b = 7 a [1] 9 b [1] 7 변수 a와 b의 사칙연산 a+b; a-b; a*b; a/b [1] 16 [1] 2 [1] 63 [1] 1.285714 R 그래픽 맛보기: 정규분포로부터 난수 100개 생성 후 생성된 데이터에 대한 히스토그램 작성 # 난수 생성 시 값은 매번 달라지기 때문에 seed를 주어 일정값이 생성되도록 고정 # &quot;=&quot;과 &quot;&lt;-&quot;는 모두 동일한 기능을 가진 할당 연산자임 #평균이 0 이고 분산이 1인 정규분포에서 난수 100개 생성 set.seed(12345) # random seed 지정 x &lt;- rnorm(100) # 난수 생성 hist(x) # 히스토그램 Figure 1.2: 정규분포 100개의 히스토그램 R 명령어 또는 전체 프로그램 소스 실행 시 매우 빈번히 오류가 나타나는데, 이를 해결할 수 있는 가장 좋은 방법은 앞에서 언급한 Google을 이용한 검색 또는 R 설치 시 자체적으로 내장되어 있는 도움말을 참고하는 것이 가장 효율적임. Table 1.1: R help 관련 명령어 리스트 도움말 보기 명령어 설명 사용법 help 또는 ? 도움말 시스템 호출 help(함수명) help.search 또는 ?? 주어진 문자열을 포함한 문서 검색 help.search(pattern) example topic의 도움말 페이지에 있는 examples section 실행 example(함수명) vignette topic의 pdf 또는 html 레퍼런스 메뉴얼 불러오기 vignette(패키지명 또는 패턴) Vignette 의 활용: 데이터를 기반으로 사용하고자 하는 패키지의 실제 활용 예시를 작성한 문서이기 때문에 초보자들이 R 패키지 활용에 대한 접근성을 높혀줌. vignette() browseVignettes() 현재 실행되고 있는 R의 작업공간↩︎ "],["rconsle-script.html", "1.3 R script 편집기 사용", " 1.3 R script 편집기 사용 실습: R 설치 후 Rgui 에서 제공하는 편집기(R editor)에 명령어를 입력하고 실행 설치된 R을 실행 후 상단 pull-down 메뉴에서 [File] \\(\\rightarrow\\) [새 스크립트]를 선택하면 아래 그림과 같이 편집창(R 인스톨 시 SDI 옵션 기준)이 나타남 편집기 창에 다음 명령어 입력 # R에 내장된 cars 데이터셋 불러오기 cars dataset에 포함된 변수들의 기초통계량 # 출력 2차원 산점도 data(cars) help(cars) # cars 데이터셋에 대한 설명 help 창에 출력 head(cars) # cars 데이터셋 처음 6개 행 데이터 출력 summary(cars) # cars 데이터셋 요약 plot(cars) # 변수가 2개인 경우 산점도 출력 편집창에서 한 줄을 실행시키려면 명령어가 입력된 줄에서 [Ctrl] + [R] 입력 편집창에 입력한 모든 명령어를 실행시키려면 모든 줄을 선택(마우스 또는 [Shift] + \\(\\downarrow\\)) speed dist Min. : 4.0 Min. : 2.00 1st Qu.:12.0 1st Qu.: 26.00 Median :15.0 Median : 36.00 Mean :15.4 Mean : 42.98 3rd Qu.:19.0 3rd Qu.: 56.00 Max. :25.0 Max. :120.00 Figure 1.3: cars 데이터셋의 speed와 dist 간 2차원 산점도: speed는 자동차 속도(mph)이고 dist는 해당 속도에서 브레이크를 밟았을 때 멈출 때 까지 걸린 거리(ft)를 나타냄. R은 명령어를 입력하고 실행결과를 확인하는 대화형(interpreter) 방식 콘솔창에서 \\(\\uparrow\\)/\\(\\downarrow\\)를 누르면 이전/이후 실행 명령 기록 확인 가능 여러 줄 이상 R 명령어라든가 반복적, 장기간 작업을 수행해야 할 경우 R 명령어로 구성된 스크립트 작성 후 일괄 실행하는 것이 일반적 여러 다중 명령 코딩 시 콘솔창에 직접 입력하는 것은 비효율적이므로 스크립트 에디터를 사용 위 예시처럼 R 에디터 사용할 수 있으나 가독성 및 코딩 효율이 떨어짐 과거 많이 사용됐던 R 에디터: WinEdt, Tinn-R, Vim 현재 가장 범용적 R 에디터: Rstudio "],["r-studio.html", "1.4 RStudio", " 1.4 RStudio RStudio: R 통합 분석/개발 환경(integrated development environment, IDE)으로 현재 가장 대중적으로 사용되고 있는 R 사용 환경 명령 곤솔 외 파일 편집, 데이터 객체, 명령 기록(.history), 그래프 등에 쉽게 접근 가능 RStudio 독자적인 개발 환경 제공: Rmarkdown, Rnotebook, Shiny Web Application 등 다양한 R 환경을 제공 버전관리(git, subversion)를 통해 project 관리 가능 무료 및 유료 소프트웨어 제공 1.4.1 RStudio 설치하기 웹 브라우저를 통해 https://rstudio.com 접속 후 상단 DOWNLOAD 링크 클릭 Desktop 또는 Server 버전 중 택일 서버용 설치를 위해서는 Server 클릭 \\(\\rightarrow\\) 소규모 자료 분석용으로는 불필요 여기서는 Desktop 버전 선택 후 다음 링크로 이동 운영체제에 맞는 Rstudio installer 다운로드(여기서는 Windows 버전 다운로드) RStudio installer 다운로드 시 파일이 저장된 폴더에서 보통 RStudio-xx.xx.xxx.exe 형식의 파일명 확인 더블 클릭 후 실행 [다음&gt;] 몇 번 클릭 후 설치 종료 바탕화면 혹은 시작 프로그램에 새로 설치된 RStudio 아이콘 클릭 후 아래와 같은 프로그램 창이 나타나면 설치 성공 1.4.2 RStudio IDE 화면 구성 RStudio는 아래 그림과 같이 4개 창으로 구성4 Figure 1.4: RStudio 화면구성: 우하단 그림은 http://r-statistics.co/Top50-Ggplot2-Visualizations-MasterList-R-Code.html 에서 발췌 1. 콘솔(console) R 명령어 실행공간(RGui, 정확하게는 R 설치 디렉토리에서 “~/R/R.x.x/bin/x64/Rterm.exe” 가 구동되고 있는 공간) R script 또는 콘솔 창에서 작성한 명령어(프로그램) 실행 및 그 결과 출력 경고, 에러/로그 등의 메세지 확인 Figure 1.5: RStudio 콘솔창에서 명령어 실행 후 출력결과 화면 2. 스크립트(script) (Figure 1.6) R 명령어 입력 공간으로 일괄처리(batch processing) 가능 새로운 스크립트 창 열기 아래 그림과 같이 pull-down 메뉴 좌측 상단 아이콘 클릭 후 [R script] 선택 [File] \\(\\rightarrow\\) [New File] \\(\\rightarrow\\) [R Script] 선택 단축 키: [Ctrl] + [Shift] + [N] 일괄 명령어 처리를 위한 RStudio 제공 단축 키 [Ctrl] + [Enter]: 선택한 블럭 내 명령어 실행 [Alt] + [Enter]: 선택 없이 커서가 위치한 라인의 명령어 실행 R 스크립트 이외 R Markdown, R Notebook, Shiny web application 등 새 문서의 목적에 따라 다양한 종류의 소스 파일 생성 가능 저장된 R 스크립트 파일은 파일명.R로 저장됨 파일 실행 방법 실행하고자 하는 파일을 읽은 후([File] \\(\\rightarrow\\) [Open File] + 파일명 선택 또는 파일명.R 더블 클릭) 입력된 모든 라인을 선택한 뒤 [Ctrl] + [Enter] 파일 읽은 후 [Ctrl] + [Shift] + [S] (현재 열려있는 *.R 파일에 대해) 또는 [Ctrl] + [Shift] + [Enter] Figure 1.6: RStudio 스크립트 새로 열기 RStudio는 코딩 및 소스 작성의 효율성을 위해 여러 가지 단축 키를 제공하고 있음. 단축키는 아래 그림과 같이 pull down 메뉴 [Tools] 또는 [Help]에서 [Keyboard shortcut help] 또는 [Alt] + [Shift] + [K] 단축키를 통해 확인할 수 있음. 또는 Rstudio cheatsheet에서 단축키에 대한 정보를 제공하는데 pull down 메뉴 [Help] \\(\\rightarrow\\) [Cheatsheets] \\(\\rightarrow\\) [RStudio IDE Cheat Sheet]을 선택하면 각 아이콘 및 메뉴 기능에 대한 개괄적 설명 확인 가능함. 3. 환경/명령기록(Environment/History) (Figure 1.7) Environment: 현재 R 작업환경에 저장되어 있는 객체의 특성 및 값 등을 요약 제시 좌측 아래 화살표 버튼 클릭: 해당 객체의 상세 정보 확인 우측 사각형 버튼 또는 객체(데이터셋명) 클릭: 객체가 데이터셋(데이터프레임)인 경우 스프레드 시트 형태로 데이터셋 확인 Figure 1.7: RStudio Environment 창 객체 상세 정보 및 스프레드 시트 출력 결과 History: R 콘솔에서 실행된 명령어(스크립트)들의 이력 확인 4. File/Plots/Packages/Help/Viewer File: Windows 파일 탐색기와 유사한 기능 제공 파일 및 폴더 생성, 삭제/파일 및 폴더명 수정, 그리고 작업경로 설정 Plots: 생성한 그래프 출력 작업 중 생성한 그래프 이력이 Plots 창에 저장: \\(\\leftarrow\\) 이전, \\(\\rightarrow\\) 최근 Zoom: 클릭 시 해당 그래프의 팝업창이 생성되고 팝업창의 크기 조정을 통해 그래프의 축소/확대 가능 Export: 선택한 그래프를 이미지 파일(.png, .jpeg, .pdf 등)로 저장할 수 있고, 클립보드로 복사 가능 Packages: 현재 컴퓨터에 설치된 R 패키지 목록 출력 신규 설치 및 업데이트 가능 Help: help(topic) 입력 시 도움말 창이 출력되는 공간 help(lm) 1.4.3 RStudio 환경 설정 Pull-down 메뉴에서 [Tools] \\(\\rightarrow\\) [Global Options...]를 선택 General: RStudio 운용 관련 전반적 설정 세팅 Figure 1.8: R General option 팝업 창 R version: 만약 컴퓨터에 두 개 이상 다른 R 버전이 설치되어 있는 경우 [Change] 클릭 후 설정 변경 가능 Default Working directory: 작업 디렉토리 지정([Browse] 클릭 후 임의 폴더 설정 가능) Restore most recently opened project at startup: RStudio 실행 시 가장 최근에 작업한 프로젝트로 이동 Restore previously open source documents at startup: RStudio 실행 시 현재 프로젝트에서 가장 최근에 작업한 소스코드 문서를 함께 열어줌. Restore .RData into workspace at startup: 작업 디렉토리에 존재하는 .RData 파일을 RStudio 실행 시 불러옴 Save workspace to .RData on exit: R workspace 자동 저장(.RData) 여부 Always save history (even when not saving .RData) : R 실행 명령 history 저장 여부(Always/Never/Ask) Remove duplicate entries in history: history 저장 시 중복 명령 제거 여부 작업폴더(Working Directory)는 현재 R session에서 사용하는 기본 폴더로서 R 소스파일 및 데이터의 저장 및 로딩시 기본이 되는 폴더임. 소스파일이나 데이터를 불러들일 때 작업 폴더에 있는 파일은 경로명을 지정하지 않고 파일명만 사용해도 됨 작업폴더가 아닌 곳에 있는 파일을 불러들일 때는 경로명까지 써 주어야함. R 데이터를 저장할때도 파일명만 쓰면 기본적으로 작업폴더에 저장되며, 다른 폴더에 저장하기 위해서는 경로명까지 써 주어야 함. 처음 컴퓨터에 RStudio를 설치하면 Working directory는 Windows 사용자 폴더(예: user)의 Document 폴더가 기본값으로 설정되어 있음. 기본 작업폴더를 변경하려면 Figure 1.8에서 설정 가능. 현재 R session의 작업 디렉토리 설정 방법 [Session] -&gt; [Set Working Directoy] -&gt; [Choose Directory]에서 설정 R 콘솔에서 다음과 같은 명령어로 작업폴더를 확인 및 변경 가능 getwd() # 작업폴더 확인 (현재 R 작업폴더) [1] &quot;/home/user/R-project/Lecture-note/cnu-r-programming-lecture-note&quot; # 참고: UNIX 환경에서 작성 # 상대경로 setwd(&quot;..&quot;) # 상위 폴더로 이동(getwd() 폴더 기준) getwd() [1] &quot;/home/user/R-project/Lecture-note&quot; # 상대경로 setwd(&quot;../..&quot;) # 차상위 폴더로 이동(getwd() 폴더 기준) getwd() [1] &quot;/home/user&quot; setwd(&quot;/home/user/R-project/Lecture-note/cnu-r-programming-lecture-note/&quot;) # 절대 폴더 명 입력 getwd() [1] &quot;/home/user/R-project/Lecture-note/cnu-r-programming-lecture-note&quot; # 폴더 내 파일 명 출력 dir() [1] &quot;_bookdown_files&quot; [2] &quot;_bookdown.yml&quot; [3] &quot;_output.yml&quot; [4] &quot;_render.R&quot; [5] &quot;01-introduction_files&quot; [6] &quot;01-introduction.Rmd&quot; [7] &quot;02-data-type_files&quot; [8] &quot;02-data-type.Rmd&quot; [9] &quot;03-string-regexp.Rmd&quot; [10] &quot;04-math-distribution-functions_files&quot; [11] &quot;04-math-distribution-functions.Rmd&quot; [12] &quot;05-rmarkdown-more_files&quot; [13] &quot;05-rmarkdown-more.Rmd&quot; [14] &quot;06-file-import-export.Rmd&quot; [15] &quot;07-control-flow.Rmd&quot; [16] &quot;08-algorithms_files&quot; [17] &quot;08-algorithms.Rmd&quot; [18] &quot;11-references.Rmd&quot; [19] &quot;2020&quot; [20] &quot;assignment&quot; [21] &quot;book.bib&quot; [22] &quot;cnu-r-programming-lecture-note.Rproj&quot; [23] &quot;cnu-r-programming.log&quot; [24] &quot;cnu-r-programming.rds&quot; [25] &quot;cnu-r-programming.tex&quot; [26] &quot;code&quot; [27] &quot;css&quot; [28] &quot;data&quot; [29] &quot;dataset&quot; [30] &quot;dataset.zip&quot; [31] &quot;demo&quot; [32] &quot;docs&quot; [33] &quot;examples&quot; [34] &quot;figures&quot; [35] &quot;images&quot; [36] &quot;index.md&quot; [37] &quot;index.Rmd&quot; [38] &quot;init-funs&quot; [39] &quot;krantz.cls&quot; [40] &quot;latex&quot; [41] &quot;output&quot; [42] &quot;packages.bib&quot; [43] &quot;README.md&quot; [44] &quot;render44bc31ffe884.rds&quot; [45] &quot;test&quot; [46] &quot;video&quot; # 상대경로 dir(&quot;..&quot;) [1] &quot;cnu-r-programming-lecture-note&quot; &quot;quiz-repository&quot; [3] &quot;r-programming-2020-01&quot; &quot;stat-package-lecture&quot; [5] &quot;talk-gallery&quot; &quot;test-learnr&quot; [7] &quot;ust-medical-statistics&quot; # 상대경로 setwd(&quot;../ust-medical-statistics//&quot;) # Lecture-note 하위폴더인 stat 으로 이동 getwd(); dir() [1] &quot;/home/user/R-project/Lecture-note/ust-medical-statistics&quot; [1] &quot;_workflowr.yml&quot; &quot;analysis&quot; [3] &quot;code&quot; &quot;data&quot; [5] &quot;docs&quot; &quot;output&quot; [7] &quot;README.md&quot; &quot;render-slide.R&quot; [9] &quot;slides&quot; &quot;ust-medical-statistics.Rproj&quot; # 절대경로 setwd(&quot;/home/user/R-project/Lecture-note/cnu-r-programming-lecture-note/&quot;) getwd(); dir() [1] &quot;/home/user/R-project/Lecture-note/cnu-r-programming-lecture-note&quot; [1] &quot;_bookdown_files&quot; [2] &quot;_bookdown.yml&quot; [3] &quot;_output.yml&quot; [4] &quot;_render.R&quot; [5] &quot;01-introduction_files&quot; [6] &quot;01-introduction.Rmd&quot; [7] &quot;02-data-type_files&quot; [8] &quot;02-data-type.Rmd&quot; [9] &quot;03-string-regexp.Rmd&quot; [10] &quot;04-math-distribution-functions_files&quot; [11] &quot;04-math-distribution-functions.Rmd&quot; [12] &quot;05-rmarkdown-more_files&quot; [13] &quot;05-rmarkdown-more.Rmd&quot; [14] &quot;06-file-import-export.Rmd&quot; [15] &quot;07-control-flow.Rmd&quot; [16] &quot;08-algorithms_files&quot; [17] &quot;08-algorithms.Rmd&quot; [18] &quot;11-references.Rmd&quot; [19] &quot;2020&quot; [20] &quot;assignment&quot; [21] &quot;book.bib&quot; [22] &quot;cnu-r-programming-lecture-note.Rproj&quot; [23] &quot;cnu-r-programming.log&quot; [24] &quot;cnu-r-programming.rds&quot; [25] &quot;cnu-r-programming.tex&quot; [26] &quot;code&quot; [27] &quot;css&quot; [28] &quot;data&quot; [29] &quot;dataset&quot; [30] &quot;dataset.zip&quot; [31] &quot;demo&quot; [32] &quot;docs&quot; [33] &quot;examples&quot; [34] &quot;figures&quot; [35] &quot;images&quot; [36] &quot;index.md&quot; [37] &quot;index.Rmd&quot; [38] &quot;init-funs&quot; [39] &quot;krantz.cls&quot; [40] &quot;latex&quot; [41] &quot;output&quot; [42] &quot;packages.bib&quot; [43] &quot;README.md&quot; [44] &quot;render44bc31ffe884.rds&quot; [45] &quot;test&quot; [46] &quot;video&quot; R에서 디렉토리 또는 폴더 구분자는 / 임. Windows에서 사용하는 구분자는 \\인데, R에서 \\는 특수문자로 간주하기 때문에 Windows 의 폴더명을 그대로 사용 시 에러 메세지를 출력함. 이를 해결하기 위해 Windows 경로명을 그대로 복사한 경우 경로 구분자 \\ 대신 \\\\로 변경 실습: R 에서 폴더 경로 자유롭게 이동해 보기 Code: Editing: 들여쓰기, 자동 줄바꿈 등 코드 편집에 대한 전반적 설정 Insert spaces for tab: [Tab] 키를 눌렀을 때 공백(space) 개수 결정(본 강의노트: Tab width = 4) Auto-detect code indentation: 코드 들여쓰기 자동 감지 Insert matching parens/quotes: 따옴표, 괄호 입력 시 커서를 따옴표/괄호 사이로 자동 이동 Auto-indent code after paste: 코드 복사 시 들여쓰기 일괄 적용 Vertically align arguments in auto-indent: 함수 작성 시 들여쓰기 레벨 유지 여부 Soft-wrap R source file: 스크립트 편집기 너비를 초과하는 경우 R 코드 행을 자동 줄바꿈 Continue comment when inserting new line: 주석 표시를 다음 행에도 자동 적용 여부 Surround selection on text insertino: 스크립트 상 text 선택 후 자동 따옴표 및 괄호 적용 여부 Focus console after executing from source: 스크립트 실행 후 커서 위치를 콘솔로 이동 여부 Code: Display: 스크립트(소스) 에디터 표시 화면 설정 Highlight selected word: 스크립트 내 text 선택 시 동일한 text에 대해 배경강조 효과 여부 Highlight selected line: 선택된 행에 대해 배경 강조효과 여부 Show line numbers: 행 번호 보여주기 여부 Show margin: 소스 에디터 오른 쪽에 지정한 margin column 보여주기 여부 Show whitespace characters: 에디터에 공백 표시 여부 Show indent guides: 현재 들여쓰기 열 표시 여부 Blinking cursor: 커서 깜박임 여부 Show syntax highlighting in console output: 콘솔 입력 라인에 R 구문 강조 표시 적용 여부 Allow scroll past end of document: 문서 마지막 행 이후 스크롤 허용 여부 Allow drag and drop of text: 선택한 복수의 행으로 구성된 text에 대해 마우스 drag 허용 Highlight R function calls: R 내장 및 패키지 제공함수에 대해 강조 여부 Code: Saving: 스크립트(소스) 에디터 저장 설정 Ensure that source file end with newline String trailing horizontal whitespace when saving Restore last cursor position when opening file Default text encoding: 소스 에디터의 기본 설정 인코딩 설정 변경 RStudio의 Windows 버전 기본 text encoding은 CP949 임 Linux나 Mac OS의 경우 한글은 UTF-8로 인코딩이 설정되어 있음. R 언어는 Linux 환경에서 개발되었기 때문에 UTF-8 인코딩과 호환성이 더 좋음 스크립트 파일의 한글이 깨질 때는 [File] -&gt; [Reopen with Encoding...]에서 encoding 방식 변경 Appearance: RStudio 전체 폰트, 폰트 크기, theme 설정 본인의 취향에 맞게 폰트 및 테마(theme) 설정 취향 \\(\\rightarrow\\) 가독성이 제일 좋고 편안한 theme Pane Layout: RStudio 구성 패널들의 위치 및 항목 등을 수정/추가/삭제(4개 페널은 항시 유지) 실습: 개인 취향에 맞게 RStudio 에디터 및 theme을 변경해 보자!! 1.4.4 RStudio 프로젝트 프로젝트 물리적 측면: 최종 산출물(문서)를 생성하기 위한 데이터, 사진, 그림 등을 모아 놓은 폴더 논리적 측면: R session 및 작업의 버전 관리 프로젝트의 필요성 자료의 정합성 보장 다양한 확장자를 갖는 파일들이 한 폴더 내에 뒤섞일 때 곤란해 질 수 있음 실제 분석 및 그래프 생성에 사용한 정확한 프로그램 또는 코드 연결이 어려움 좋은 프로젝트 구성을 위한 방법 원자료(raw data)의 보호: 가급적 자료를 읽기 전용(read only) 형태로 다루기 데이터 정제(data wrangling 또는 data munging)를 위한 스크립트와 정제 자료를 보관하는 읽기 전용 데이터 디렉토리 생성 작성한 스크립트로 생성한 모든 산출물(테이블, 그래프 등)을 “일회용품”처럼 처리 \\(\\rightarrow\\) 스크립트로 재현 가능 한 프로젝트 내 각기 다른 분석마다 다른 하위 디렉토리에 출력결과 저장하는 것이 유용 RStudio 새로운 프로젝트 생성 RStudio의 강력하고 유용한 기능 새로운 프로젝트 생성: RStudio 메뉴에서 [File] \\(\\rightarrow\\) [New Project] 선택하면 아래와 같은 팝업 메뉴 생성 위 그림에서 New Directory를 선택하면 아래와 같은 팝업 창이 나타나면 아래와 같은 프로젝트 유형이 나타남. 여기서는 New Project 선택 다음 팝업창에서 새로운 프로젝트의 폴더명을 지정 후 Create Project 클릭 아래 [Create projects as subdirectories of]에서 생성하고자 하는 프로젝트의 상위 디렉토리 설정 \\(\\rightarrow\\) 보통 RStudio의 기본 작업폴더로 설정 현재 R session 종료 후 새로운 프로젝트로 session 화면이 열리면 프로젝트 생성 완료 실습: 프로젝트 생성 위에서 설정한 작업폴더 내에 학번-r-programming 프로젝트 생성 생성한 프로젝트 폴더 내에 docs, figures, script 폴더 생성 RStudio Cloud 사용 R의 구동 환경은 Windows 보다는 Linux 운영 환경에 최적화됨 온라인에서 리눅스 환경의 R Studio 사용 가능 각 창의 위치는 세팅 구성에 따라 달라질 수 있음. 창 구성 방법은 RStudio 환경 옵션 설정에서 설명함.↩︎ "],["r-package.html", "1.5 R 패키지", " 1.5 R 패키지 R 패키지(package): 특수 목적을 위한 로직으로 구성된 코드들의 집합으로 R에서 구동되는 분석툴을 통칭 CRAN을 통해 배포: 3자가 이용하기 쉬움 \\(\\rightarrow\\) R 시스템 환경에서 패키지는 가장 중요한 역할 CRAN available package by name 또는 available package by date에서 현재 등재된 패키지 리스트 확인 가능 R console에서 available.packages() 함수를 통해서도 확인 가능 현재 CRAN 기준(2020-03-17) 배포된 패키지의 개수는 16045 개임 목적: RStudio 환경에서 패키지를 설치하고 불러오기 1.5.1 R 패키지 경로 확인 및 변경 패키지 설치 시 일반적으로 R 환경에서 기본값으로 지정한 라이브러리 폴더에 저장 패키지 설치 전 R 패키지 설치 경로(path) 지정 .libPaths() 함수를 통해 현재 설정된 패키지 저장 경로 확인 .libPaths() [1] &quot;/home/user/R/x86_64-pc-linux-gnu-library/4.0&quot; [2] &quot;/opt/R/4.0.5/lib/R/library&quot; 일반적으로 첫 번째 경로를 디폴트 라이브러리 폴더로 사용 사용자 지정 라이브러리 경로를 설정 하려면 아래와 같은 절차로 진행 실습: c:/r-library 폴더를 패키지 경로로 지정 C:\\에서 [새로 만들기(W)] -&gt; [폴더(F)] 선택 후 생성 폴더 이름을 r-library로 변경 윈도우즈 [제어판] -&gt; [시스템 및 보안] -&gt; [시스템] -&gt; [고급 시스템 설정] 클릭 [환경변수(N)...] 선택 후 시스템 변수에서 [새로 만들기(W)...] 클릭 아래 그림과 같이 변수 이름(N)에 R_LIBS, 변수 값(V)에 해당 디렉토리 경로 C:\\r-library 입력 후 확인 버튼 클릭 현재 RStudio 종료 후 재실행한 다음 콘솔창에 .libPaths() 입력 후 라이브러리 경로 확인 1.5.2 R 패키지 설치하기 RStudio 메뉴 [Tools] \\(\\rightarrow\\) [Install packages] 클릭 후 생성된 팝업 창에서 설치하고자 하는 패키지 입력 후 설치 RStudio Packages 창에서 [Install] 버튼 누르면 위와 동일한 팝업창이 나타남(위와 동일) R 콘솔 또는 스크립트 창에서 install.packages(package_name) 함수를 사용해서 패키지 설치 실습: install.packages() 함수를 이용해 tidyverse 패키지 설치 install.packages(&quot;tidyverse&quot;) 위 명령어를 실행하면 tidyverse 패키지 뿐 아니라 연관된 패키지들이 동시에 설치됨 1.5.3 R 패키지 불러오기 library() vs. require() library(): 불러오고자 하는 패키지가 시스템에 존재하지 않는 경우 에러 메세지 출력(에러 이후 명령어들이 실행되지 않음) require(): 패키지가 시스템에 존재하지 않는 경우 경고 메세지 출력(경고 이후 명령어 정상적으로 실행) 다중 패키지 동시에 불러오기 RStudio Packages 창에서 설치하고자 하는 패키지 선택 버튼 클릭하면 R workspace로 해당 패키지 로드 가능 스크립트 이용 실습: tidyverse 패키지 불러오기 require(tidyverse) 실무에서 R의 활용능력은 패키지 활용 여부에 달려 있음. 즉, 목적에 맞는 업무를 수행하기 위해 가장 적합한 패키지를 찾고 활용하느냐에 따라 R 활용능력의 차이를 보임. 앞서 언급한 바와 같이 CRAN에 등록된 패키지는 16000 개가 넘지만, 이 중 많이 활용되고 있는 패키지의 수는 약 200 ~ 300 개 내외이고, 실제 데이터 분석 시 10 ~ 20개 정도의 패키지가 사용됨. 앞 예제에서 설치하고 불러온 tidyverse 패키지는 Hadley Wickham (Wickham et al. 2019)이 개발한 데이터 전처리 및 시각화 패키지 번들임. 해당 패키지에 대한 자세한 내용은 2학기 “통계패키지활용” 수업에 다룰 예정임 References "],["r-basic.html", "1.6 R 기초 문법", " 1.6 R 기초 문법 본 절에서 다루는 R 문법은 R 입문 시 객체(object)의 명명 규칙과 R 콘솔 창에서 가장 빈번하게 사용되는 기초적인 명령어만 다룰 예정임. 자세한 내용은 2-3주 차에 다룰 예정. R은 객체지향언어(object-oriented language) 객체(object): 숫자, 데이터셋, 단어, 테이블, 분석결과를 저장하고 있는 R 내부의 모든 변수를 통칭함 “객체지향”의 의미는 R의 모든 명령어는 객체를 대상으로 이루어진다는 것을 의미 알아두면 유용한(콘솔창에서 매우 많이 사용되는) 명령어 및 단축키 ls(): 현재 R 작업공간에 저장된 모든 객체 리스트 출력 rm(object_name): object_name에 해당하는 객체 삭제 rm(list = ls()): R 작업공간에 저장된 모든 객체들을 일괄 삭제 단축키 [Ctrl] + [L]: R 콘솔 창 일괄 청소 단축키 [Ctrl] + [Shift] + [F10]: R session 초기화 예시 print(&quot;Hello R World!!&quot;) [1] &quot;Hello R World!!&quot; x &lt;- 7 y &lt;- 1:30 #1에서 30까지 정수 입력 ls() #현재 작업공간 내 객체명 출력 [1] &quot;도움말 보기 명령어&quot; &quot;사용법&quot; &quot;설명&quot; [4] &quot;a&quot; &quot;b&quot; &quot;cars&quot; [7] &quot;def.chunk.hook&quot; &quot;fig_cap&quot; &quot;hook_output&quot; [10] &quot;tab&quot; &quot;x&quot; &quot;y&quot; rm(x) # 객체 x 삭제 ls() [1] &quot;도움말 보기 명령어&quot; &quot;사용법&quot; &quot;설명&quot; [4] &quot;a&quot; &quot;b&quot; &quot;cars&quot; [7] &quot;def.chunk.hook&quot; &quot;fig_cap&quot; &quot;hook_output&quot; [10] &quot;tab&quot; &quot;y&quot; rm(a,b) # 객체 a,b 동시 삭제 ls() [1] &quot;도움말 보기 명령어&quot; &quot;사용법&quot; &quot;설명&quot; [4] &quot;cars&quot; &quot;def.chunk.hook&quot; &quot;fig_cap&quot; [7] &quot;hook_output&quot; &quot;tab&quot; &quot;y&quot; # rm(list = ls()) # 모든 객체 삭제 R 객체 입력 방법 및 변수 설정 규칙 객체를 할당하는 두 가지 방법:=, &lt;- 두 할당 지시자의 차이점 =: 명령의 최상 수준에서만 사용 가능 &lt;-: 어디서든 사용 가능 함수 호출과 동시에 변수에 값을 할당할 목적으로는 &lt;-만 사용 가능 # mean(): 입력 벡터의 평균 계산 mean(y &lt;- 1:5) [1] 3 y [1] 1 2 3 4 5 mean(x = 1:5) [1] 3 x Error in eval(expr, envir, enclos): 객체 &#39;x&#39;를 찾을 수 없습니다 객체 또는 변수의 명명 규칙 알파벳, 한글, 숫자, _, .의 조합으로 구성 가능(-은 사용 불가) 변수명의 알파벳, 한글, .로 시작 가능 .로 시작한 경우 뒤에 숫자 올 수 없음(숫자로 인지) 대소문자 구분 # 1:10은 1부터 10까지 정수 생성 # &#39;c()&#39;는 벡터 생성 함수 x &lt;- c(1:10) # 1:10으로 구성된 행렬 생성 X &lt;- matrix(c(1:10), nrow = 2, ncol = 5, byrow = T) x [1] 1 2 3 4 5 6 7 8 9 10 X [,1] [,2] [,3] [,4] [,5] [1,] 1 2 3 4 5 [2,] 6 7 8 9 10 # 논리형 객체 .x &lt;- TRUE .x [1] TRUE # 알파벳 + 숫자 # seq(): 수열을 만드는 함수 # 1 에서부터(from) 10 까지(to) 공차가 2(by)인 수열 a1 &lt;- seq(from = 1, to = 10, by = 2) # 한글 변수명 가수 &lt;- c(&quot;Damian Rice&quot;, &quot;Beatles&quot;, &quot;최백호&quot;, &quot;Queen&quot;, &quot;Carlos Gardel&quot;, &quot;BTS&quot;, &quot;조용필&quot;) 가수 [1] &quot;Damian Rice&quot; &quot;Beatles&quot; &quot;최백호&quot; &quot;Queen&quot; [5] &quot;Carlos Gardel&quot; &quot;BTS&quot; &quot;조용필&quot; 잘못된 객체 또는 변수 명명 예시 3x &lt;- 7 Error: &lt;text&gt;:1:2: 예상하지 못한 기호(symbol)입니다. 1: 3x ^ _x &lt;- c(&quot;M&quot;, &quot;M&quot;, &quot;F&quot;) Error: &lt;text&gt;:1:1: 예상하지 못한 입력입니다. 1: _ ^ .3 &lt;- 10 Error in 0.3 &lt;- 10: 대입에 유효하지 않은 (do_set) 좌변입니다 "],["r-markdown-get-start.html", "1.7 R Markdown (맛보기)", " 1.7 R Markdown (맛보기) R 기초 문법 절과 마찬가지로 R Markdown을 이용해 최소한의 문서(html 문서)를 작성하고 생성하는 방법에 대해 기술함. R Markdown에 대한 보다 상세한 내용은 9주차에 다룰 예정임. R Markdown은 R 코드와 분석 결과(표, 그림 등)을 포함한 문서 또는 컨텐츠를 제작하는 도구로 일반적으로 아래 열거한 형태로 활용함 문서 또는 논문(pdf, html, docx) 프리젠테이션(pdf, html, pptx) 웹 또는 블로그 재현가능(reproducible)한 분석 및 연구5 가능 신뢰성 있는 문서 작성 Copy &amp; paste를 하지 않고 효율적 작업 가능 R Markdown 문서를 통해 최종 결과물(pdf, html, docx)이 도출되는 process 현재 공식적인 프로세스는 knitr + rmarkdown + pandoc + RStudio + github Figure 1.9: R Markdown의 최종 결과물 산출과정(http://applied-r.com/project-reporting-template/) R Markdown 문서 시작하기 R Markdown 문서 생성: [File] -&gt; [New File] -&gt; [R Markdown..]을 선택 RStudio를 처음 설치하고 위와 같이 진행할 경우 아래와 같은 패키지 설치 여부를 묻는 팝업 창이 나타남. 패키지 설치 여부에 [Yes]를 클릭하면 R Markdown 문서 생성을 위해 필요한 패키지들이 자동으로 설치 설치 완료 후 R Markdown으로 생성할 최종 문서 유형 선택 질의 창이 나타남. 아래 창에서 제목(Title)과 저자(Author) 이름 입력 후 [OK] 버튼 클릭(Document, html 문서 선택) 아래 그림과 같이 새로운 문서 창이 생성되고 test.Rmd 파일로 저장6 문서 상단에 Knit 아이콘을 클릭 후 Knit to HTML 클릭 또는 문서 아무 곳에 커서를 위치하고 단축키 [Ctrl] + [Shift] + [K] 입력 knitr + R Markdown + pandoc \\(\\rightarrow\\) html 파일 생성 결과 Figure 1.10: test.html 문서 화면(저장 폴더 내 test.html을 크롬 브라우저로 실행) 1.7.0.1 R Markdown 문서 구성 R Markdown 문서는 아래 그림과 같이 YAML, Markdown 텍스트, Code Chunk 세 부분으로 구성됨. 1. YAML (YAML Ain’t Markup Language) R Markdown 문서의 metadata로 문서의 맨 처음에 항상 포함되어야 함. R Markdown 문서의 최종 출력 형태, 제목, 저자, 날짜 등의 정보 등을 포함 YAML 언어에 대한 사용 예시는 Xie (2016) 의 Appendix B.2 참고 최소 형태의 YAML 예시 --- title: &quot;Hello R Markdown&quot; author: &quot;Zorba&quot; date: &quot;2020-03-17&quot; output: html_document --- 2. Markdown 텍스트 Markdown 문법은 15주 차 강의에서 배울 예정임 R Markdown 레퍼런스 가이드 참조 그림 삽입: ![](path/filename) 그립 삽입 구문 ![](figures/son.jpg) 3. Code Chunk 실제 R code가 실행되는 부분임 Code chunk 실행 시 다양한 옵션들이 있으나 이 부분 역시 15주 차 강의에서 간략히 다룰 예정임 Code chunk는 ```{r}로 시작되며 r은 code 언어 이름을 나타냄. Code chunk는 ``` 로 종료 R Markdown 문서 작성 시 단축키 [Ctrl] + [Alt] + [I]를 입력하면 Chunk 입력창이 자동 생성됨 Chunk option에 대한 상세 내용은 https://yihui.org/knitr/options/ 또는 R Markdown 레퍼런스 가이드 참조 Code chunk 예시 Xie의 R Markdown: The Definitive Guide에서 발췌 ```{r} fit = lm(dist ~ speed, data = cars) b = coef(fit) plot(cars) abline(fit) ``` fit = lm(dist ~ speed, data = cars) b = coef(fit) plot(cars) abline(fit) Code chunk에서 외부 그림 파일 불러오기(Xie, Allaire, and Grolemund (2018) 에서 예시 발췌) knitr::include_graphics(rep(&#39;figures/knit-logo.png&#39;, 3)) Homework 1: R Markdown 문서에 아래 내용을 포함한 문서를 html 파일 형식으로 출력 후 제출 간략한 자기소개 및 “통계 프로그래밍 언어” 수업에 대한 본인만의 목표 기술 본인이 setting 한 RStudio 구성 캡쳐 화면을 그림 파일로 저장하고 R Markdown 문서에 삽입(화면 캡쳐 시 생성 프로젝트 내 폴더 내용 반드시 포함) 현재 R 작업폴더(처음 R 시작 시 디폴트로 설정된 폴더) 및 작업폴더 내에 있는 파일명 출력 현재 R 작업폴더에서 차상위 폴더의 파일명 출력 패키지 ggplot2 패키지 설치 후 cars 데이터셋의 2차원 산점도(hint: help(geom_point) 또는 googling 활용)를 문서에 포함 References "],["data-type.html", "2 R 객체(R object)", " 2 R 객체(R object) 학습목표(2 주차): R에서 사용 가능한 데이터 타입에 대해 알아보고, 고유 데이터 타입으로 구성한 객체(스칼라, 백터, 리스트)와 이와 연관된 함수들을 익힌다. 학습 필요성 R언어는 타 프로그래밍 언어와 유사한 데이터 타입(정수형, 실수형, 문자형 등)을 제공 R 언어가 다른 언어와 차이점 \\(\\rightarrow\\) 데이터 분석에 특화된 벡터(vector), 행렬(matrix), 데이터프레임(data frame), 리스트(list)와 같은 객체7 제공 R 패키지에서 제공되는 함수 사용 방법은 R의 객체에 따라 달라질 수 있음 R 언어를 원활히 다룰 수 있으려면 R에서 데이터 객체의 형태, 자료 할당 및 그 연산 방법에 대한 이해가 필수적으로 선행되어야 함 R의 데이터 타입 수치형(numeric): 숫자(정수, 소수) 문자열(string): \"충남대학교\", \"R강의\" 논리형(logical): TRUE/FALSE 결측값(NA): 자료에서 발생한 결측 표현 공백(NULL): 지정하지 않은 값 요인(factor): 범주형 자료 표현(수치 + 문자 결합 형태로 이해하면 편함) 기타: 숫자아님(NaN), 무한대(Inf) 등 R 객체의 종류 스칼라(상수형, scalar 또는 atomic) 벡터(vector): R의 기본연산 단위 리스트(list) 행렬(matrix) 배열(array) 데이터프레임(data frame) Figure 2.1: R 데이터 타입 구조 다이어그램: R, Python 분석과 프로그래밍 (by R Friend)에서 발췌 후 수정 R에서 사용자가 데이터 입력을 위해 생성 또는 읽어온 객체(object)는 종종 변수(variable)라는 말과 혼용. 본 문서에서는 최상위 데이터 저장장소를 객체라고 명명하며 데이터프레임과 같이 여러 종류의 데이터타입으로 이루어진 객체의 1차원 속성을 변수라고 칭함↩︎ "],["프로그래밍.html", "2.1 프로그래밍", " 2.1 프로그래밍 2.1.1 Prerequisites 예약어(researved words): R에서 의미(sementic)를 미리 정해 놓은 단어 Table 2.1: R 예약어 종류 및 설명 R 예약어 설명 if, else, while, function, in, next, break 조건, 함수, 반복문에 사용 TRUE/FALSE 논리 상수(logical constants) NULL 정의되지 않은 값 혹은 값이 없음 표현 Inf 무한(infinity) NaN 숫자가 아님(not a number) NA 결측값(not available) NA_integer_, NA_real_, NA_complex_, NA_character_ 결측값을 처리하는 상수 … 함수가 다른 함수에 인자를 전달하도록 지원 변수(variable): 사용자가 프로그램 처리를 위해 지정한 단어 적당한 값을 저장하고 나중에 필요시 해당 값을 호출해 사용하기 위한 목적으로 사용되는 표식(label) 예약어를 변수명으로 사용할 수 없음 통계프로그래밍언어 강의노트: R 기초문법 참고 고수준 언어(high-level language): 사람이 읽고 쓰기 쉬운 형태의 명령어를 컴퓨터가 읽고 처리할 수 있도록 고안된 프로그래밍 언어 컴퓨터가 이해할 수 있는 언어 \\(\\rightarrow\\) 중앙처리장치(central processing unit, CPU)가 이해하는 언어 \\(\\rightarrow\\) 기계어(machine language) 기계어는 0과 1로 구성된 이진수(binary number)임(예: 0100101001001001001110110101101010110) 고수준 언어의 종류: C, C++, JAVA, 베이직, Perl, Python, R, … 번역기(translator): 사람이 이해할 수 있는 표현(언어)를 기계(컴퓨터)가 이해할 수 있는 언어(기계어)로 변환 인터프리터(interpreter) 컴파일러(compiler) **인터프리터*: 코드(스크립트) 한 줄을 즉석에서 읽고, 파싱(프로그램을 검사하고 구문론적 구조를 분석)하고, 해석 R, Python, MATLAB 등은 인터프리터를 번역기로 사용 인터엑티브 모드 \\(\\rightarrow\\) R 프롬프트(&gt;) 뒤에 한 줄의 명령어를 작성하면 측석해서 처리 후 다음 입력에 대해 준비(prompt)함. 안녕하세요!! 통계패키지활용 수업에서 R을 배우고 있습니다. 처음이라 실수가 많습니다. 앞으로 잘 부탁해요!! Error: &lt;text&gt;:1:6: 예기치 않은 &#39;!&#39;입니다 1: 안녕하세요! ^ print(&quot;안녕하세요!!&quot;) print(&quot;통계패키지활용 수업을 위해 R을 배우고 있습니다.&quot;) print(&quot;처음이라 실수가 많습니다.&quot;) print(&quot;앞으로 잘 부탁해요!!&quot;) [1] &quot;안녕하세요!!&quot; [1] &quot;통계패키지활용 수업을 위해 R을 배우고 있습니다.&quot; [1] &quot;처음이라 실수가 많습니다.&quot; [1] &quot;앞으로 잘 부탁해요!!&quot; 컴파일러: 완전한 프로그램을 하나의 파일에 담고 파일 안에 저장되어 있는 소스코드를 기계어로 번역 후 다음 실행할 수 있도록 변환한 기계어를 파일에 담음. 보통은 .exe, .dll 파일 형태로 저장됨 2.1.2 프로그램 프로그램(program): 특정 작업(목적)을 수행할 수 있도록 작성한 일련의 R 문장(명령어)의 집합 일련의 문장(명령어)들은 텍스트 편집기를 통해 작성하며, 스크립트(script)로 명칭되는 파일로 저장 \\(\\rightarrow\\) R 스크립트 .R 확장자를 가짐 # Hello.R print(&quot;안녕 R!!&quot;) #한국어 print(&quot;Hi R!!&quot;) # 영어 print(&quot;こんにちはR!!&quot;) # 일본어 print(&quot;Γεια R!!&quot;) #그리스어 source(&quot;examples/hello.R&quot;, encoding = &quot;UTF-8&quot;) [1] &quot;안녕 R!!&quot; [1] &quot;Hi R!!&quot; [1] &quot;こんにちはR!!&quot; [1] &quot;Γεια R!!&quot; 예시: 텍스트 파일에서 가장 자주 나오는 단어 찾기 프로그램 https://statkclee.github.io/r4inf/r-intro.html#r-intro-what-is-a-program 참고 require(tidyverse) require(stringr) require(ggpubr) require(ggthemes) text_dat &lt;- readLines(&quot;data/text-example-01.txt&quot;) # 공백 또는 구둣점 문자를 기준으로 텍스트 나누기 # 공백 또는 구둣점 문자 기준으로 텍스트 토큰화 split_wd &lt;- str_split(text_dat, pattern = &quot;\\\\b|[[:punct:]]&quot;) split_wd &lt;- do.call(c, split_wd) id &lt;- grepl(&quot;[a-zA-Z]+&quot;, split_wd) #알파벳을 포함한 단어 인덱스 split_wd &lt;- split_wd[id] unique_wd &lt;- unique(split_wd) # 중복을 제외한 총 사용 단어 res_v &lt;- vector(&quot;integer&quot;, length(unique_wd)) # 저장 벡터 생성 for (i in seq_along(unique_wd)) { for (j in seq_along(split_wd)) { if (unique_wd[i] == split_wd[j]) { res_v[i] &lt;- res_v[i] + 1 } } } bind_cols(&quot;word&quot; = unique_wd, &quot;freq&quot; = res_v) %&gt;% arrange(desc(freq)) 프로그램 작성을 위한 개념적 요소 입력(input): 외부로부터 가져온 데이터, 값 등 출력(output): 입력에 대한 반응(결과 출력, 파일 저장, 음악 재생, …) 순차실행(sequential execution): 스크립트 또는 코드 작성 순서에 따라 한줄씩 실행 조건실행(conditional execution): 특정 조건에 따라 문장(명령)을 실행하거나 건너뜀 번복실행(iterative execution): 특정 명령을 반복적으로 실행 재사용(resuse): 스크립트의 집합(다수 줄로 구성된 코드 또는 스크립트)에 이름을 부여하고 저장 \\(\\rightarrow\\) 사용자 지정 함수(function) 프로그램 오류의 종류 구문오류(syntax error): R 언어가 이해할 수 없는 문장 또는 문법으로 실행했을 때 나타나는 오류 \\(\\rightarrow\\) 가장 고치기 쉽고 즉각적으로 알려줌 논리 또는 run-time 오류(logic or run-time error): 구문은 완벽하지만 실행 순서 또는 논리적으로 연관방식에 문제가 있어서 명령어를 수행할 수 없는 경우 의미론적 오류(sementic error): 프로그램은 구문적으로 오류가 없고 실행되지만 올바른 결과를 출력하지 않는 경우 \\(\\rightarrow\\) 제일 고치기 어려움 가장 간단한 프로그래밍은 순차적으로 명령을 실행하되 입력 시 흐름을 잠시 중단하고 대기하는 방법 \\(\\rightarrow\\) 프롬프트 상 명령어 한 줄씩 입력 # 아주 간단한 프로그래밍 예제 # readline() 함수 이용해 R한테 인사 받기 name &lt;- readline(&quot;What&#39;s your name?: &quot;) cat(&quot;Hello, &quot;, name, &quot;!\\n&quot;, sep = &quot;&quot;) # readline() 함수를 이용해 알바비 계산 x &lt;- as.numeric(readline(prompt = &quot;하루 아르바이트 시간을 입력하시오: &quot;)) y &lt;- as.numeric(readline(prompt = &quot;시급을 입력하시오 (단위=원): &quot;)) z &lt;- as.numeric(readline(prompt = &quot;한달 동안 총 몇 일 동안 일을 하셨나요? &quot;)) cat(&quot;월 급여는 &quot;, x * y * z, &quot; 원 입니다.\\n&quot;, sep = &quot;&quot;) "],["scalar.html", "2.2 스칼라(scalar)", " 2.2 스칼라(scalar) 단일 차원의 값(하나의 값): \\(1 \\times 1\\) 백터로 표현 \\(\\rightarrow\\) R 데이터 객체의 기본은 벡터!! 데이터 객체의 유형은 크게 숫자형, 문자열, 논리형이 있음 스칼라를 입력시 R의 벡터 지정 함수인 c()(벡터 부분에서 상세 내용 학습)를 꼭 사용해서 입력할 필요가 없다. 단, 연속되지 않은 두 개 이상 스칼라면 벡터이므로 꼭 c()를 써야 한다. 2.2.1 선언 일반적으로 컴파일이 필요한 언어(예: C 언어)의 경우 변수 또는 객체를 사용 전에 선언이 필요 int x; x = 1; 위 코드에서 int x; 없이 x = 1을 입력 후 컴파일 하면 에러가 나타나지만 R 언어에서는 변수를 선언할 필요가 전혀 없음 z 가 어떤 데이터 타입인지 언급할 필요가 전혀 없음 \\(\\rightarrow\\) Python, Perl, Matlab 등과 같은 스크립트 언어의 특징. 아래 코드 참조 z &lt;- 3 z [1] 3 2.2.2 숫자형 정수형(integer)과 실수형(double)로 구분됨 정수형 구분시 숫자 뒤 L을 표시 # 정수형 구분자 사용 예시 # typeof(): R 객체의 데이터 타입 반환하는 함수 typeof(10L) [1] &quot;integer&quot; typeof(10) [1] &quot;double&quot; 수치연산(+, -, *, ^, **, /, %%, %/%) 가능: R은 함수형 언어이기 때문에 앞에 기술한 연산자도 하나의 함수로 인식함. 수치 연산자(operator) 및 기본 수학 함수 Table 2.2: R언어의 기본 수치 연산자 수치형 연산자 설명 +, -, *, / 사칙연산 n %% m n을 m 으로 나눈 나머지 n %/% m n을 m 으로 나눈 몫 n ^ m 또는 n ** m n 의 m 승 숫자형 스칼라 연산 적용 예시 # 숫자형 스칼라 a &lt;- 3 b &lt;- 10 a; b [1] 3 [1] 10 # 덧셈 c &lt;- a + b c [1] 13 # 덧셈을 함수로 입력 # &quot;+&quot;(a, b)로 입력한 결과 c &lt;- &quot;+&quot;(a, b) # 뺄셈 d &lt;- b - a d [1] 7 # 곱셈 m &lt;- a * b m [1] 30 # 나누기 dd &lt;- b/a dd [1] 3.333333 # 멱승 b^a [1] 1000 # 나누기의 나머지(remainder) 반환 r &lt;- b %% a r [1] 1 # 나누기의 몫(quotient) 반환 q &lt;- b %/% a q [1] 3 # 연산 우선 순위 nn &lt;- (3 + 5)*3 - 4**2/4 nn [1] 20 2.2.3 문자형 수치형이 아닌 문자 형식의 단일 원소 C와 같은 언어에서 볼수 있는 한개 문자에 대한 데이터 타입 존재하지 않음 수치연산 불가능 따옴표(\" 또는 ')로 문자를 묶어서 문자열 표시 문자열을 다루는 자세한 설명은 5주차에서 자세히 설명할 예정임 h1 &lt;- c(&quot;Hello CNU!!&quot;) h2 &lt;- c(&quot;R is not too difficult.&quot;) typeof(h1); typeof(h2) [1] &quot;character&quot; [1] &quot;character&quot; h1 [1] &quot;Hello CNU!!&quot; h2 [1] &quot;R is not too difficult.&quot; # 문자열의 문자 수 반환 nchar(h1); nchar(h2) [1] 11 [1] 23 # 문자열 연산 error 예시 h1 - h2 Error in h1 - h2: 이항연산자에 수치가 아닌 인수입니다 2.2.4 논리형 스칼라 참(TRUE, T) 또는 거짓(FALSE, F)를 나타내는 값 TRUE/FALSE: 예약어(reserved word) T/F: TRUE와 FALSE로 초기화된 전역 변수 T에 FALSE 또는 어떤 값도 할당 가능 \\(\\rightarrow\\) 가급적 TRUE/FALSE를 명시하는 것이 편함 논리형 연산자(logical operator) Table 2.3: R언어의 논리형 연산자 논리형 연산자 설명 &amp; AND (vectorized) &amp;&amp; AND (atomic) | OR (vectorized) || OR (atomic) ! NOT 비교 연산자를 적용할 경우 논리값을 반환 Table 2.4: R언어의 비교 연산자 비교 연산자 설명 &gt; 크다(greater-than) &lt; 작다(less-than) == 같다(equal) &gt;= 크거나 같다(greater than equal) &lt;= 작거나 같다(less than equal) != 같지 않다(not equal) Note: 기술한 비교 연산자는 수치형 및 논리형 데이터 타입 모두에 적용 가능 하지만, 문자형은 비교 연산은 ==, != 만 가능함 참고 논리형 스칼라도 숫자형 연산 가능 \\(\\rightarrow\\) 컴퓨터는 TRUE/FALSE를 1과 0 숫자로 인식 수치 연산자는 스칼라 뿐 아니라 아래에서 다룰 벡터, 행렬, 리스트, 데이터프레임 객체의 연산에 사용 가능 &amp;/|와 &amp;&amp;/||는 동일하게 AND/OR를 의미하지만 연산 결과가 다름. &amp;의 연산 대상이 벡터인 경우 백터 구성 값 각각에 대해 &amp; 연산을 실행 하지만 &amp;&amp;는 하나의 값(스칼라)에만 논리 연산이 적용(아래 예시 참고) 논리형 스칼라의 논리 및 비교 연산 예시 typeof(TRUE) # TRUE의 데이터 타입 [1] &quot;logical&quot; TRUE &amp; TRUE # TRUE 반환 [1] TRUE TRUE &amp; FALSE # FALSE 반환 [1] FALSE # 아래 연산은 모두 TRUE 반환 TRUE | TRUE [1] TRUE TRUE | FALSE [1] TRUE # TRUE와 FALSE의 반대 !TRUE [1] FALSE !FALSE [1] TRUE # 전역변수 T에 FALSE 값 할당 T &lt;- FALSE T [1] FALSE T &lt;- TRUE # 원상복귀 # TRUE/FALSE에 값을 할당할 수 없음 TRUE &lt;- 1 Error in TRUE &lt;- 1: 대입에 유효하지 않은 (do_set) 좌변입니다 TRUE &lt;- FALSE Error in TRUE &lt;- FALSE: 대입에 유효하지 않은 (do_set) 좌변입니다 # &amp;(|)와 &amp;&amp;(||)의 차이 l.01 &lt;- c(TRUE, TRUE, FALSE, TRUE) # 논리형 값으로 구성된 벡터 l.02 &lt;- c(FALSE, TRUE, TRUE, TRUE) l.01 &amp; l.02 # l.01과 l.02 각 원소 별 &amp; 연산 [1] FALSE TRUE FALSE TRUE l.01 &amp;&amp; l.02 # l.01과 l.02의 첫 번째 원소에 대해 &amp; 연산 [1] FALSE # 비교 연산자 x &lt;- 9 y &lt;- 4 # x &gt; y 의 반환값 데이터 타입 typeof(x &gt; y) [1] &quot;logical&quot; # 논리형 값 반환 x &gt; y [1] TRUE x &lt; y [1] FALSE x == y [1] FALSE x != y [1] TRUE 2.2.5 결측값(missing value) 결측치 지정 상수: NA \\(\\rightarrow\\) R과 다른 언어의 가장 큰 차이점 중 하나 예를 들어 4명의 통계학과 학생 중 3명의 통계학 개론 중간고사 점수가 각각 80, 90, 75점이고 4번 째 학생의 점수가 없는 경우 NA로 결측값 표현 is.na() 함수를 이용해 해당 값이 결측을 포함하고 있는지 확인 one &lt;- 80; two &lt;- 90; three &lt;- 75; four &lt;- NA four [1] NA # &#39;is.na()&#39; 결측 NA가 포함되어 있으면 TRUE is.na(four) [1] TRUE is.na(object_name): 객체를 구성하고 있는 원소 중 NA를 포함하고 있는지 확인 \\(\\rightarrow\\) NA를 포함하면 TRUE, 아니면 FALSE 반환 참고: 자료에 NA가 포함된 경우 연산 결과는 모두 NA가 반환 NA + 1 [1] NA NA &amp; TRUE [1] NA NA &lt;= 3 [1] NA 2.2.6 NULL 값 NULL: 초기화 되지 않은 변수 또는 객체를 지칭함 is.null() 함수를 통해 객체가 NULL인지 판단 x &lt;- NULL # NULL 지정 is.null(x) # NULL 객체인지 판단 [1] TRUE x &lt;- 1 is.null(x) [1] FALSE NA와 NULL의 차이점: 자료의 공백을 의미한다는 점에서 유사한 측면이 있으나 아래 내용처럼 큰 차이가 있음 NULL: 값을 지정하지 않은 객체를 표현하는데 사용. 즉 아직 변수 또는 객체의 상태가 아직 미정인 상태를 나타냄 NA: 데이터 값이 결측임을 지정해주는 논리형 상수 # NA와 NULL은 다름 x &lt;- NA is.null(NA) [1] FALSE is.na(NULL) logical(0) 2.2.7 무한대/무한소/숫자아님 Inf: 무한대(\\(+\\infty\\), \\(1/0\\)) -Inf: 무한소(\\(-\\infty\\), \\(-1/0\\)) NaN: 숫자아님(Not a Number, \\(0/0\\)) is.finite(), is.infinite(), is.nan() 함수를 통해 객체가 Inf 또는 NaN을 포함하는지 확인 x &lt;- Inf is.finite(x) [1] FALSE is.infinite(x) [1] TRUE x &lt;- 0/0 is.nan(x) [1] TRUE is.infinite(x) [1] FALSE 지금까지 요인형(factor)을 제외하고 R 언어에서 객체가 가질 수 있는 데이터 유형에 대해 알아봄. 요인형은 4주 차에 예정된 “R 자료형: 팩터, 테이블, 데이터 프레임”에서 상세하게 배울 예정임. "],["vector.html", "2.3 벡터(vector)", " 2.3 벡터(vector) 2.3.1 벡터의 특징 타 프로그래밍 언어의 배열(array)의 개념으로 동일한 유형의 데이터 원소가 하나 이상(\\(n \\times 1\\), \\(n \\geq 1\\)) 으로 구성된 자료 형태 R 언어의 가장 기본적인 데이터 형태로 R에서 행해지는 모든 연산의 기본(vectorization) \\(\\rightarrow\\) 벡터 연산 시 반복구문(예: for loop)이 필요 없음. 2.2 절에서 기술한 스칼라(scalar)는 사실 \\(1 \\times 1\\) 벡터임 수학적으로 벡터는 아래와 같이 나타낼 수 있음 \\[\\mathrm{\\mathbf x} = [x_1, x_2, x_3, \\ldots, x_n]^T \\] 벡터는 앞의 예시에서 본 바와 같이 c() 함수를 사용해 생성 # 숫자형 벡터 x &lt;- c(2, 0, 2, 0, 0, 3, 2, 4) x [1] 2 0 2 0 0 3 2 4 # 문자형 벡터 y &lt;- c(&quot;Boncho Ku&quot;, &quot;R programming&quot;, &quot;Male&quot;, &quot;sophomore&quot;, &quot;2020-03-24&quot;) y [1] &quot;Boncho Ku&quot; &quot;R programming&quot; &quot;Male&quot; &quot;sophomore&quot; [5] &quot;2020-03-24&quot; 두 개 이상의 벡터는 c() 함수를 통해 결합 가능 함수 내 , 구분자를 통해 결합 # 두 벡터의 결합 (1) x &lt;- 1:5 y &lt;- 10:6 z &lt;- c(x, y) x [1] 1 2 3 4 5 y [1] 10 9 8 7 6 z [1] 1 2 3 4 5 10 9 8 7 6 x &lt;- 5:10 x1 &lt;- x[1:3] # x 벡터에서 1에서 4번째 원소 추출 x2 &lt;- c(x1, 15, x[4]) x2 [1] 5 6 7 15 8 서로 다른 자료형으로 벡터를 구성한 경우 표현력이 높은 자료형으로 변환한 값 반환 예: 문자열 + 숫자로 구성된 벡터 \\(\\rightarrow\\) 문자형 벡터 변환규칙: NULL &lt; raw &lt; logical &lt; integer &lt; double &lt; complex &lt; character &lt; list &lt; expression # 숫자형 벡터와 문자열 벡터 혼용 k &lt;- c(1, 2, &quot;3&quot;, &quot;4&quot;) k [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; is.numeric(k) # 벡터가 숫자형인지 판단하는 함수 [1] FALSE is.character(k) # 벡터가 문자열인지 판단하는 함수 [1] TRUE # 숫자형 벡터와 문자열 벡터 결합 x &lt;- 1:3 y &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;) z &lt;- c(x, y) z [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;a&quot; &quot;b&quot; &quot;c&quot; is.numeric(z) [1] FALSE is.character(z) [1] TRUE # 숫자형 벡터와 논리형 벡터 결합 x &lt;- 9:4 y &lt;- c(TRUE, TRUE, FALSE) z &lt;- c(x, y) z # TRUE/FALSE 가 1과 0으로 변환 [1] 9 8 7 6 5 4 1 1 0 is.numeric(z) [1] TRUE is.logical(z) [1] FALSE 두 벡터는 중첩이 불가능 \\(\\rightarrow\\) 동일한 벡터 2개를 결합 시 단일 차원 벡터 생성 x &lt;- y &lt;- 1:3 # x와 y 동시에 [1, 2, 3] 할당 x [1] 1 2 3 y [1] 1 2 3 z &lt;- c(x, y) z [1] 1 2 3 1 2 3 벡터 각 원소에 이름 부여 가능 names() 함수를 이용해 원소 이름 지정 사용 프로토타입: names(x) &lt;- 문자열 벡터, 단 x와 이름에 입력할 문자열 벡터의 길이는 같아야 함. c() 함수에서 직접 이름 지정 \\(\\rightarrow\\) c(atom_name1 = value, atom_name2 = value, ...) x &lt;- c(&quot;Boncho Ku&quot;, &quot;R programming&quot;, &quot;Male&quot;, &quot;sophomore&quot;, &quot;2020-03-24&quot;) # 벡터 원소 이름 지정 names(x) &lt;- c(&quot;name&quot;, &quot;course&quot;, &quot;gender&quot;, &quot;grade&quot;, &quot;date&quot;) x name course gender grade date &quot;Boncho Ku&quot; &quot;R programming&quot; &quot;Male&quot; &quot;sophomore&quot; &quot;2020-03-24&quot; y &lt;- c(a = 10, b = 6, c = 9) names(y) [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; 벡터의 길이(차원) 확인 length() 또는 NROW() 사용 x &lt;- 1:50 # 객체의 길이 반환 # length(): 벡터, 행렬인 경우 원소의 개수, 데이터프레임인 경우 열의 개수 반환 length(x) [1] 50 # NROW(): 벡터인 경우 원소의 개수, 행렬, 데이터 프레임인 경우 행의 개수 반환 NROW(x) [1] 50 2.3.2 벡터의 연산 원소 단위 사칙연산 및 비교연산 수행 \\(\\rightarrow\\) 벡터화 연산(vectorized operation) 예를 들어 \\(\\mathrm{\\mathbf x} = [1, 2, 3]^T\\) 이고, \\(\\mathrm{\\mathbf y} = [2, 3, 4]^T\\) 라고 할 때 \\(\\mathrm{\\mathbf x} + \\mathrm{\\mathbf y}\\)의 연산은 아래와 같음 \\[\\begin{bmatrix} 1 \\\\ 2\\\\ 3 \\end{bmatrix} + \\begin{bmatrix} 2 \\\\ 3\\\\ 4 \\end{bmatrix} = \\begin{bmatrix} 3 \\\\ 5 \\\\ 7 \\end{bmatrix} \\] * 연산 시 행렬 대수학에서 벡터의 곱(product)과 다름을 주의 \\[\\begin{bmatrix} 1 \\\\ 2\\\\ 3 \\end{bmatrix} * \\begin{bmatrix} 2 \\\\ 3\\\\ 4 \\end{bmatrix} = \\begin{bmatrix} 2 \\\\ 6 \\\\ 12 \\end{bmatrix} \\] x &lt;- 1:3; y &lt;- 2:4 length(x); length(y) [1] 3 [1] 3 x; y [1] 1 2 3 [1] 2 3 4 # 사칙연산(+, -, *, /) # 백터 vs. 백터 x + y [1] 3 5 7 x - y [1] -1 -1 -1 x * y [1] 2 6 12 x / y [1] 0.5000000 0.6666667 0.7500000 # 그외 연산 # 나머지(remainder) y %% x [1] 0 1 1 # 몫(quotient) y %/% x [1] 2 1 1 # 멱승(exponent) y ^ x [1] 2 9 64 차원이 서로 맞지 않는 경우 작은 차원(짧은 쪽)의 백터를 재사용함 \\[\\begin{bmatrix} 1 \\\\ 2\\\\ 3 \\end{bmatrix} + [5] = \\begin{bmatrix} 1 \\\\ 2\\\\ 3 \\end{bmatrix} + \\begin{bmatrix} 5 \\\\ 5\\\\ 5 \\end{bmatrix} = \\begin{bmatrix} 6 \\\\ 7 \\\\ 8 \\end{bmatrix} \\] # 벡터(n by 1) vs. 스칼라(1 by 1) x * 5 # 5을 x의 길이 만큼 재사용(반복) 후 곱 연산 수행 [1] 5 10 15 x &lt;- c(2, 1, 3, 5, 4); y &lt;- c(2, 3, 4) x [1] 2 1 3 5 4 y [1] 2 3 4 length(x); length(y) [1] 5 [1] 3 # x의 길이가 5이고 y의 길이가 3이기 때문에 5를 맞추기 위헤 # y의 원소 중 1-2 번째 원소를 재사용 x + y Warning in x + y: 두 객체의 길이가 서로 배수관계에 있지 않습니다 [1] 4 4 7 7 7 x / y Warning in x/y: 두 객체의 길이가 서로 배수관계에 있지 않습니다 [1] 1.0000000 0.3333333 0.7500000 2.5000000 1.3333333 연산 순서는 일반적인 사칙연산의 순서를 준용 단 1단위 수열을 생성하는 : 연산자가 사칙연산을 우선함 # 연산 우선 순위 1:5 * 3 [1] 3 6 9 12 15 1:(5 * 3) [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 논리형 값으로 구성된 벡터의 기본 연산 시 수치형으로 변환된 연산 결과를 반환 # 논리형 벡터 b1 &lt;- c(TRUE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, FALSE) b2 &lt;- c(FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, FALSE, TRUE) is.numeric(b1); is.numeric(b2) [1] FALSE [1] FALSE is.logical(b1); is.logical(b2) [1] TRUE [1] TRUE # 논리형 벡터 연산 b3 &lt;- b1 + b2 is.numeric(b3) [1] TRUE b3 [1] 1 2 1 2 2 2 0 1 b1 - b2 [1] 1 0 -1 0 0 0 0 -1 b1 * b2 [1] 0 1 0 1 1 1 0 0 b1/b2 [1] Inf 1 0 1 1 1 NaN 0 두 벡터 간 비교 연산은 사칙연산과 마찬가지로 각 원소단위 연산을 수행하고 논리형 벡터 반환 재사용 규칙은 그대로 적용됨 # 두 벡터의 비교 연산 x &lt;- c(2, 4, 3, 10, 5, 9) y &lt;- c(3, 4, 6, 2, 10, 7) x == y [1] FALSE TRUE FALSE FALSE FALSE FALSE x != y [1] TRUE FALSE TRUE TRUE TRUE TRUE x &gt; y [1] FALSE FALSE FALSE TRUE FALSE TRUE x &lt; y [1] TRUE FALSE TRUE FALSE TRUE FALSE x &gt;= y [1] FALSE TRUE FALSE TRUE FALSE TRUE x &lt;= y [1] TRUE TRUE TRUE FALSE TRUE FALSE # 비교 연산 시 두 벡터의 길이가 다른 경우 x &lt;- 1:5; y &lt;- 2:4 x == y Warning in x == y: 두 객체의 길이가 서로 배수관계에 있지 않습니다 [1] FALSE FALSE FALSE FALSE FALSE x != y Warning in x != y: 두 객체의 길이가 서로 배수관계에 있지 않습니다 [1] TRUE TRUE TRUE TRUE TRUE x &gt; y Warning in x &gt; y: 두 객체의 길이가 서로 배수관계에 있지 않습니다 [1] FALSE FALSE FALSE TRUE TRUE x &lt; y Warning in x &lt; y: 두 객체의 길이가 서로 배수관계에 있지 않습니다 [1] TRUE TRUE TRUE FALSE FALSE x &gt;= y Warning in x &gt;= y: 두 객체의 길이가 서로 배수관계에 있지 않습니다 [1] FALSE FALSE FALSE TRUE TRUE x &lt;= y Warning in x &lt;= y: 두 객체의 길이가 서로 배수관계에 있지 않습니다 [1] TRUE TRUE TRUE FALSE FALSE 문자열 벡터의 연산은 == 또는 != 만 가능(사칙연산 불가능) # 문자열 벡터 연산 (==, !=) c1 &lt;- letters[1:5] # a-z로 구성된 벡터에서 1-2, 6-8 번째 원소 추출 c2 &lt;- letters[c(1:2, 6:8)] c1 [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; c2 [1] &quot;a&quot; &quot;b&quot; &quot;f&quot; &quot;g&quot; &quot;h&quot; c1 == c2 [1] TRUE TRUE FALSE FALSE FALSE c1 != c2 [1] FALSE FALSE TRUE TRUE TRUE NA를 포함한 두 벡터 연산 시 동일 위치에 NA가 존재하면 어떤 연산이든 NA 값을 반환 # 결측을 포함한 벡터 x &lt;- c(1:10, c(NA, NA)) y &lt;- c(NA, NA, 1:10) x [1] 1 2 3 4 5 6 7 8 9 10 NA NA y [1] NA NA 1 2 3 4 5 6 7 8 9 10 is.na(x); is.na(y) [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE TRUE TRUE [1] TRUE TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE # 결측을 포함한 벡터의 연산 x + y [1] NA NA 4 6 8 10 12 14 16 18 NA NA x / y [1] NA NA 3.000000 2.000000 1.666667 1.500000 1.400000 1.333333 [9] 1.285714 1.250000 NA NA x &lt; y [1] NA NA FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE NA NA x &gt; y [1] NA NA TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE NA NA NULL이 벡터에 포함되더라도 벡터의 길이에는 변동이 없음 # NULL을 포함한 벡터 x &lt;- c(1, 2, 3, NULL, NULL, NULL) # 길이가 6? length(x) [1] 3 x [1] 1 2 3 2.3.3 벡터의 색인(indexing) 벡터의 특정 위치에 있는 원소를 추출 색인(indexing)을 통해 벡터의 원소에 접근 가능 타 언어는 대체로 첫 번째 색인이 0에서 시작하지만, R은 1부터 시작 x[i]: 벡터 x의 i번 째 요소 x[start:end]: x의 start부터 end까지 값 반환 x &lt;- c(1.2, 3.1, 4.2, 2.8, 3.3) x[3] # x 원소 중 3 번째 원소 추출 [1] 4.2 # x 원소 중 2-3번째 원소 추출 x[2:3] [1] 3.1 4.2 x[-i]: 벡터 x에서 i번 째 요소를 제외한 나머지 값 반환 # x의 3 번째 원소 제거 x[-3] [1] 1.2 3.1 2.8 3.3 # 맨 마지막 원소(5 번째) 제거 # 아래 script는 동일한 결과 출력 x[1:(length(x) - 1)] [1] 1.2 3.1 4.2 2.8 x[-length(x)] [1] 1.2 3.1 4.2 2.8 x[idx_vec]: idx_vec가 인덱싱 벡터라고 할 때 idx_vec에 지정된 요소를 얻어옴. 일반적으로 idx_vec는 백터의 행 순서 번호 또는 각 벡터 원소의 이름에 대응하는 문자열 벡터를 인덱싱 벡터로 사용할 수 있음. # 벡터를 이용한 인덱싱 # x 원소 중 1, 5번째 원소 추출 x[c(1, 5)] # c(1,5)는 벡터 [1] 1.2 3.3 v &lt;- c(1, 4) x[v] [1] 1.2 2.8 # 인덱스 번호 중복 가능 x[c(1, 2, 2, 4)] [1] 1.2 3.1 3.1 2.8 # 원소 이름으로 인덱싱 # 원소 이름 지정 names(x) &lt;- paste0(&quot;x&quot;, 1:length(x)) # 문자열 &quot;x&quot;와 숫자 1:5(벡터 길이)를 결합한 문자열 반환 x[&quot;x3&quot;] x3 4.2 x[c(&quot;x2&quot;, &quot;x4&quot;)] x2 x4 3.1 2.8 필터링(filtering): 특정한 조건을 만족하는 원소 추출 비교 연산자를 이용한 조건 생성 \\(\\rightarrow\\) 논리값을 이용한 원소 추출 z &lt;- c(5, 2, -3, 8) # z의 원소 중 z의 제곱이 8보다 큰 원소 추출 w &lt;- z[z^2 &gt; 8] w [1] 5 -3 8 작동 원리 z^2 &gt; 8은 벡터 z의 모든 원소 제곱값이 8 보다 큰 케이스를 논리형 값으로 반환 z^2 [1] 25 4 9 64 idx &lt;- z^2 &gt; 8 idx [1] TRUE FALSE TRUE TRUE z[idx] [1] 5 -3 8 특정 조건을 만족하는 벡터의 위치에 임의의 값을 치환할 수 있음 # 위 벡터 z 의 원소 중 z^2 &gt; 8 인 원소의 값을 0으로 치환 z[idx] &lt;- 0 2.3.4 벡터 관련 함수 c() 함수 외에 R은 벡터 생성을 위해 몇 가지 유용한 함수를 제공함 seq 계열 함수 보다 자세한 사용 설명은 help(seq) 참고 seq(): 등차 수열 생성하는 함수로 from에서 end 까지 숫자 내에서 공차(간격)가 by 인 수열 생성 # seq(): 수열 생성 함수 seq( from, # 시작값 to, # 끝값 by # 공차(증가치) ) # 기타 인수 # length.out = n # - 생성하고자 하는 벡터의 길이가 n인 수열 생성 # along.with = 1:n # - index가 1에서 n 까지 길이를 갖는 수열 생성 사용 예시 x &lt;- seq(from = 2, to = 30, by = 2) x [1] 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 # 간격이 꼭 정수가 아니어도 사용 가능 x &lt;- seq(from = 0, to = 3, by = 0.2) # by 대신 length.out 으로 생성된 수열의 길이 조정 x &lt;- seq(from = -3, to = 3, length.out = 10) x [1] -3.0000000 -2.3333333 -1.6666667 -1.0000000 -0.3333333 0.3333333 [7] 1.0000000 1.6666667 2.3333333 3.0000000 # from, to 인수 없이 length.out=10 인 경우 seq(length.out = 10) [1] 1 2 3 4 5 6 7 8 9 10 # by 대신 along.width seq(along.with=1:10) [1] 1 2 3 4 5 6 7 8 9 10 seq(1, 5, along.with=1:10) [1] 1.000000 1.444444 1.888889 2.333333 2.777778 3.222222 3.666667 4.111111 [9] 4.555556 5.000000 # 벡터 x에 seq() 함수 적용 시 1:length(x) 값 반환 seq(x) [1] 1 2 3 4 5 6 7 8 9 10 seq_along(): 주어진 객체의 길이 만큼 1부터 1 간격의 수열 생성 seq() 함수와 매우 유사하나, 무조건 1부터 시작해서 인수로 seq()의 along.with 값을 이용한 함수 seq() 함수보다 조금 빠름 사용 예시 # 1부터 x 벡터의 길이 까지 1 단위 수열 값 반환 seq_along(x) [1] 1 2 3 4 5 6 7 8 9 10 seq_len(): 인수로 받은 값 만큼 1부터 해당 값 까지 1 간격의 수열 생성 seq() 함수의 인수 중 length.out 값을 이용한 함수 사용 예시 # 1부터 n 까지 1 단위 수열 값 반환 seq_len(10) [1] 1 2 3 4 5 6 7 8 9 10 rep 계열 함수 help(rep)을 통해 상세 내용 참고 rep(): 주어진 벡터의 원소를 반복 # rep(): 벡터 또는 벡터의 개별 원소를 반복한 값 반환 rep( x, # 반복할 값이 저장된 벡터 times, # 전체 벡터의 반복 횟수 each # 개별 원소의 반복 횟수 ) 사용 예시 x &lt;- rep(4, 5) # 4를 5번 반복 x [1] 4 4 4 4 4 # x &lt;- c(1:3) 전체를 3번 반복한 벡터 반환 x &lt;- c(1:3) xr1 &lt;- rep(x, times = 3) xr1 [1] 1 2 3 1 2 3 1 2 3 # 벡터 x 의 각 원소를 4번씩 반복한 벡터 반환 xr2 &lt;- rep(x, each = 4) xr2 [1] 1 1 1 1 2 2 2 2 3 3 3 3 # 벡터 x 의 각 원소를 3번 반복하고 해당 벡터를 2회 반복 xr3 &lt;- rep(x, each = 3, times = 2) xr3 [1] 1 1 1 2 2 2 3 3 3 1 1 1 2 2 2 3 3 3 # 문자형 벡터의 반복 # 아래 sex 벡터의 각 원소를 2 번 반복하고 해당 벡터를 4회 반복 sex &lt;- c(&quot;Male&quot;, &quot;Female&quot;) sexr &lt;- rep(sex, each = 2, times = 4) sexr [1] &quot;Male&quot; &quot;Male&quot; &quot;Female&quot; &quot;Female&quot; &quot;Male&quot; &quot;Male&quot; &quot;Female&quot; &quot;Female&quot; [9] &quot;Male&quot; &quot;Male&quot; &quot;Female&quot; &quot;Female&quot; &quot;Male&quot; &quot;Male&quot; &quot;Female&quot; &quot;Female&quot; rep.int() &amp; rep_len(): rep() 함수의 simple 버전으로 속도(performance)가 요구되는 프로그래밍 시 사용 사용 예시 # 1:5 벡터를 3 번 반복 rep.int(1:5, 3) [1] 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 # 불완전한 사이클로 벡터 반복 rep_len(1:5, length.out = 7) [1] 1 2 3 4 5 1 2 Filtering 관련 함수 help(subset) 참고 subset(): 기존 필터링 방식과 비교할 때 NA를 처리하는 방식에서 차이를 보임 벡터 뿐 아니라 앞으로 배울 행렬 및 데이터프레임 객체에도 적용 가능 x &lt;- c(6, 1:3, NA, NA, 12) x [1] 6 1 2 3 NA NA 12 # 일반적 필터링 적용 x[x &gt; 5] [1] 6 NA NA 12 # subset() 함수 적용 subset(x, x &gt; 5) [1] 6 12 which(): 한 벡터에서 특정 조건에 맞는 위치(인덱스)를 반환 # which(): 논리형 벡터를 인수로 받고 해당 논리형 벡터가 참인 index 반환 which( logical_vec # 논리형 벡터 ) 사용 예시 x &lt;- c(3, 8, 3, 1, 7) # x의 원소값이 3인 index 반환 which(x == 3) [1] 1 3 # x의 원소가 4보다 큰 원소의 index 반환 which(x &gt; 4) [1] 2 5 # 9월(Sep)과 12월(Dec)와 같은 원소 index # month.abb: R 내장 벡터로 월 약어(Jan ~ Dec)를 저장한 문자열 벡터 which(month.abb == c(&quot;Sep&quot;, &quot;Dec&quot;)) [1] 9 12 # 조건을 만족하는 원소가 존재하지 않는다면? x &lt;- which(x &gt; 9) x integer(0) length(x) # 길이가 0인 벡터 반환 is.null(x) == TRUE ?? [1] 0 is.null(x) [1] FALSE # 특정 조건 만족 여부를 확인 # any(condition) -&gt; 하나라도 condition을 만족하는 원소가 존재하는지 판단 # TRUE 또는 FALSE 값 반환 any(x &gt; 9) [1] FALSE 집합 관련 함수 벡터는 숫자, 문자열의 묶음, 즉 원소들의 집합(set)으로 볼 수 있기 때문에 집합 연산이 가능 두 집합을 \\(X\\)와 \\(Y\\)로 정의 했을 때 아래와 같은 집합 연산 가능 setequal(X, Y): X와 Y가 동일한지 판단 (\\(X = Y\\)) \\(\\rightarrow\\) 논리값 TRUE 또는 FALSE 반환 x &lt;- y &lt;- c(1, 9, 7, 3, 6) setequal(x, y) [1] TRUE union(X, Y): X와 Y의 합집합 (\\(X \\cup Y\\)) y &lt;- c(1, 9, 8, 2, 0, 3) union(x, y) [1] 1 9 7 3 6 8 2 0 intersect(X, Y): X와 Y의 교집합 (\\(X \\cap Y\\)) intersect(x, y) [1] 1 9 3 setdiff(X, Y): X와 Y의 차집합 (\\(X - Y\\)) setdiff(x, y) [1] 7 6 setdiff(y, x) [1] 8 2 0 X %in% Y: X(기준)가 집합 Y의 원소인지 논리값 반환 x &lt;- c(&quot;apple&quot;, &quot;banana&quot;, &quot;strawberry&quot;, &quot;mango&quot;, &quot;peach&quot;, &quot;orange&quot;) y &lt;- c(&quot;strawberry&quot;, &quot;orange&quot;, &quot;mango&quot;) x %in% y [1] FALSE FALSE TRUE TRUE FALSE TRUE y %in% x [1] TRUE TRUE TRUE 두 벡터의 동일성 테스트 두 벡터가 동일한지 테스트 하기 위해 x == y 연산의 반환 값은 위의 예제에서 확인한 것 처럼 각 원소에 대한 논리값을 반환(아래 예제 확인) x &lt;- 1:3 y &lt;- c(1, 3, 4) x == y [1] TRUE FALSE FALSE 단지 두 벡터가 동일한지 아닌지를 확인하기 위해서는 하나의 논리값만 필요한 경우 all() 사용 all(x == y) [1] FALSE 보다 나은 방법으로 identical() 함수 적용 # 두 객체의 동일성 여부 테스트 identical(x, y) [1] FALSE identical() 함수는 벡터가 갖는 데이터 타입의 동일성 까지 체크함 x &lt;- 1:5; y &lt;- c(1, 2, 3, 4, 5) x [1] 1 2 3 4 5 y [1] 1 2 3 4 5 # all() 함수로 동일성 확인 all(x == y) [1] TRUE # identical 함수로 동일성 확인 identical(x, y) [1] FALSE # x, y 데이터 타입 확인 typeof(x) [1] &quot;integer&quot; typeof(y) [1] &quot;double&quot; "],["list.html", "2.4 리스트(list)", " 2.4 리스트(list) 리스트(list): (key, value) 형태로 데이터를 저장한 배열(벡터) 서로 다른 데이터 타입을 가진 객체를 원소로 가질 수 있는 벡터 예: 한 리스트 안에는 상이한 데이터 타입(숫자형, 문자형, 논리형 등)을 갖는 원소(객체)들을 포함할 수 있음 리스트 예시: 통계프로그래밍언어 중간고사 성적 테이블 중간고사 성적 테이블은 이름, 학번, 출석률, 점수, 등급으로 이루어졌다고 가정하면 “김상자”의 성적 리스트는 다음과 같이 나타낼 수 있음 LIST(이름 = \"김상자\", 학번 = \"202015115\", 점수 = 95, 등급 = \"A-\") 위 record에서 보듯이 문자형과 숫자형이 LIST 안에 같이 표현되고 있음 위 record를 벡터 생성함수 c()로 생성한 경우 # 벡터로 위 record를 입력한 경우 vec &lt;- c(`이름` = &quot;김상자&quot;, `학번` = &quot;202015115&quot;, `점수` = 95, `등급` = &quot;A-&quot;) vec 이름 학번 점수 등급 &quot;김상자&quot; &quot;202015115&quot; &quot;95&quot; &quot;A-&quot; typeof(vec) [1] &quot;character&quot; 객체 명칭 규칙을 벗어나는 이름을 객제명으로 사용하고 싶다면 다음과 같이 홀따옴표 `object_name` 표시를 통해 사용 가능함 &gt; #공백이 있는 이름을 객체 명칭으로 사용 &gt; `golf score` &lt;- c(75, 82, 92) &gt; `golf score` [1] 75 82 92 &gt; `3x` &lt;- c(3, 6, 9, 12) &gt; `3x` [1] 3 6 9 12 2.4.1 리스트 생성 list() 함수를 사용해 list 객체 생성 # list 함수 사용 prototype list(name_1 = object_1, ..., name_m = object_m) # name_1, ..., name_m: 리스트 원소 이름 # object_1, ..., object_m: 리스트 원소에 대응한 객체 중간고사 성적 테이블 예시 # lst 객체 생성 lst &lt;- list(`이름` = &quot;김상자&quot;, `학번` = &quot;202015115&quot;, `점수` = 95, `등급` = &quot;A-&quot;) lst $이름 [1] &quot;김상자&quot; $학번 [1] &quot;202015115&quot; $점수 [1] 95 $등급 [1] &quot;A-&quot; # lst 내 객체의 데이터 타입 확인 # lapply(): lst 객체에 동일한 함수 적용 (추후 학습) lapply(lst, typeof) $이름 [1] &quot;character&quot; $학번 [1] &quot;character&quot; $점수 [1] &quot;double&quot; $등급 [1] &quot;character&quot; 리스트 원소에 이름이 부여된 경우 names()를 통해 확인 가능 names(lst) [1] &quot;이름&quot; &quot;학번&quot; &quot;점수&quot; &quot;등급&quot; 이름(name_1, .., name_n) 없이도 리스트 생성 가능하나, 가급적 이름을 부여 하는 것이 더 명확 list(&quot;김상자&quot;, &quot;202015115&quot;, 95, &quot;A-&quot;) [[1]] [1] &quot;김상자&quot; [[2]] [1] &quot;202015115&quot; [[3]] [1] 95 [[4]] [1] &quot;A-&quot; 리스트는 벡터이므로 vector() 함수를 통해 생성 가능 # 길이가 1이고 객체가 NULL인 리스트 생성 z &lt;- vector(mode = &quot;list&quot;, length=1) z [[1]] NULL 리스트의 값이 어떤 객체든 관계 없음 x &lt;- list(name = c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;), salary = c(500, 450, 600), union = T) x $name [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; $salary [1] 500 450 600 $union [1] TRUE 2.4.2 리스트 색인 리스트에 포함된 객체에 접근는 기본적으로 벡터의 색인 방법과 동일하게 색인 번호 또는 키(이름)을 통해 접근 가능 리스트에 포함된 모든 객체의 원소값을 쉽게 확인하는 함수는 unlist()임 lval &lt;- unlist(x) typeof(lval) [1] &quot;character&quot; Table 2.5: 리스트 데이터 접근 방법 색인방법 동작 x$name 리스트 x 에서 객체명(name)에 해당하는 객체에 접근 x[[i]] 또는 x[[name]] 리스트 x 에서 i 번째 또는 name에 해당하는 객체 반환 x[i] 또는 x[name] 리스트 x 에서 i 번째 또는 name에 해당하는 부분 리스트 반환 x$name을 통해 리스트 내 객체 접근 lst$`학번` [1] &quot;202015115&quot; x[[i]] 또는 x[[name]] 을 통해 리스트 내 객체 접근 lst[[2]] [1] &quot;202015115&quot; z &lt;- lst[[&quot;학번&quot;]] z [1] &quot;202015115&quot; typeof(z) [1] &quot;character&quot; x[i] 또는 x[name] 을 통해 리스트 내 부분 리스트 추출 lst[2] $학번 [1] &quot;202015115&quot; j &lt;- lst[&quot;학번&quot;] j $학번 [1] &quot;202015115&quot; typeof(j) [1] &quot;list&quot; 리스트 또한 벡터로 볼 수 있기 때문에 여러 개의 부분 리스트 추출 가능 # 리스트 lst 에서 1 ~ 3 번째 까지 부분 리스트 추출 lst[1:3] $이름 [1] &quot;김상자&quot; $학번 [1] &quot;202015115&quot; $점수 [1] 95 리스트를 구성하는 객체 내 색인 x $name [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; $salary [1] 500 450 600 $union [1] TRUE # salary에서 2-3번째 원소 추출 x$salary[2:3] [1] 450 600 x[[2]][2:3] [1] 450 600 x[[&quot;salary&quot;]][2:3] [1] 450 600 # 부분 리스트도 길이가 1인 리스트이므로, # 부분 리스트 내 객제 접근 시 리스트 접근이 선행 # x의 2번째 부분 리스트에서 첫 번째 객체의 2-3번째 원소 추출 x[2][[1]][2:3] [1] 450 600 리스트의 길이 반환: 벡터와 마찬가지로 length() 함수 적용 가능 length(lst); length(x) [1] 4 [1] 3 2.4.3 리스트에 원소 추가/제거 주어진 리스트 x에 새로운 원소를 x$new_obj &lt;- value 명령어 형태로 추가 이미 존재하고 있는 리스트 원소 제거는 x$exist_obj &lt;- NULL 형태로 제거 # 리스트 lst 에 5회 차 퀴즈 점수 추가 lst$quiz &lt;- c(10, 8, 9, 9, 8) # 리스트 lst이 원소 quiz 제거 lst$quiz &lt;- NULL lst $이름 [1] &quot;김상자&quot; $학번 [1] &quot;202015115&quot; $점수 [1] 95 $등급 [1] &quot;A-&quot; # 벡터 색인을 이용해 원소 추가 가능 lst[[5]] &lt;- c(10, 8, 9, 9, 8) lst $이름 [1] &quot;김상자&quot; $학번 [1] &quot;202015115&quot; $점수 [1] 95 $등급 [1] &quot;A-&quot; [[5]] [1] 10 8 9 9 8 # 부분 리스트 괄호에서도 색인 통해 추가/삭제 가능 lst[5] &lt;- NULL lst $이름 [1] &quot;김상자&quot; $학번 [1] &quot;202015115&quot; $점수 [1] 95 $등급 [1] &quot;A-&quot; # 여러 개의 리스트 동시 추가/삭제 가능 lst[5:9] &lt;- c(10, 8, 9, 9, 8) lst $이름 [1] &quot;김상자&quot; $학번 [1] &quot;202015115&quot; $점수 [1] 95 $등급 [1] &quot;A-&quot; [[5]] [1] 10 [[6]] [1] 8 [[7]] [1] 9 [[8]] [1] 9 [[9]] [1] 8 lst[5:9] &lt;- NULL lst $이름 [1] &quot;김상자&quot; $학번 [1] &quot;202015115&quot; $점수 [1] 95 $등급 [1] &quot;A-&quot; 2.4.4 리스트의 결합 두 개 이상의 리스트를 결합 시 c() 사용 # 리스트 lst와 x 결합 c(lst, x) $이름 [1] &quot;김상자&quot; $학번 [1] &quot;202015115&quot; $점수 [1] 95 $등급 [1] &quot;A-&quot; $name [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; $salary [1] 500 450 600 $union [1] TRUE 리스트 내에 리스트를 가질 수 있다. 이를 재귀 리스트(recursive list)라고 한다. 예를 들어 위 예제에서 각 학생의 성적 데이터가 리스트로 구성되어 있다면, 전체 성적 데이터베이스는 리스트로 구성된 리스트임. 아래 예제 처럼 간단한 재귀 리스트 구현이 가능 kim &lt;- list(id = &quot;20153345&quot;, sex = &quot;Male&quot;, score = 85, grade = &quot;B+&quot;) lee &lt;- list(id = &quot;20153348&quot;, sex = &quot;Female&quot;, score = 75, grade = &quot;B0&quot;) gr &lt;- list(kim=kim, lee=lee) gr $kim $kim$id [1] &quot;20153345&quot; $kim$sex [1] &quot;Male&quot; $kim$score [1] 85 $kim$grade [1] &quot;B+&quot; $lee $lee$id [1] &quot;20153348&quot; $lee$sex [1] &quot;Female&quot; $lee$score [1] 75 $lee$grade [1] &quot;B0&quot; "],["matrix.html", "2.5 행렬(matrix)", " 2.5 행렬(matrix) 학습목표(3 주차): 행렬, 배열, 요인형과 테이블에 대해 살펴보고, 이들 객체에 대한 연산과 연관된 함수에 대해 익힌다. 행렬의 정의 동일한 데이터 타입의 원소로 구성된 2차원 데이터 구조 \\(n \\times 1\\) 차원 벡터 \\(p\\)개로 묶여진 데이터 덩어리 \\(\\rightarrow\\) \\(n \\times p\\) 행렬로 명칭함 행렬의 형태 \\[\\begin{bmatrix} x_{11} &amp; x_{12} &amp; \\cdots &amp; x_{1p} \\\\ x_{21} &amp; x_{22} &amp; \\cdots &amp; x_{2p} \\\\ \\vdots &amp; \\vdots &amp; \\cdots &amp; \\vdots \\\\ x_{n1} &amp; x_{n2} &amp; \\cdots &amp; x_{np} \\end{bmatrix} \\] R에서 행렬은 동일한 유형의 데이터 타입으로 구성 가능 \\(\\rightarrow\\) 첫 번째 행은 숫자형, 두 번째 행은 문자열로 입력해도 행렬을 만들 수 있지만, 표현력이 더 높은 문자형 행렬 반환 행렬의 내부 저장공간은 “열 우선 배열” 행렬 생성을 위한 R 함수는 matrix() 함수이고 사용 형태는 아래와 같음 # matrix(): 행렬 생성 함수 # 상세 내용은 help(matrix)를 통해 확인 matrix(data, # 행렬을 생성할 데이터 벡터 nrow, # 행의 개수 (정수) ncol, # 열의 개수 (정수) byrow, # TRUE: 행 우선, FALSE: 열 우선 # default = FALSE dimnames # 행렬읠 각 차원에 부여할 이름 (리스트) ) 행렬 생성 예시 # byrow = FALSE x &lt;- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), nrow = 3, ncol = 3) x [,1] [,2] [,3] [1,] 1 4 7 [2,] 2 5 8 [3,] 3 6 9 # byrow = TRUE x &lt;- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), nrow = 3, ncol = 3, byrow = T) x [,1] [,2] [,3] [1,] 1 2 3 [2,] 4 5 6 [3,] 7 8 9 행의 개수(nrow)나 열의 개수(ncol)로 나머지를 추정 가능하다면 둘 중 어떤 인수도 생략 가능 x &lt;- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), ncol = 3) x [,1] [,2] [,3] [1,] 1 4 7 [2,] 2 5 8 [3,] 3 6 9 x &lt;- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), nrow = 3) x [,1] [,2] [,3] [1,] 1 4 7 [2,] 2 5 8 [3,] 3 6 9 nrow \\(\\times\\) ncol 이 입력한 데이터(벡터)의 길이보다 작거나 큰 경우 # length(x) &lt; nrow * ncol 인 경우 # nrow * ncol에 해당하는 길이 만큼 # x의 원소를 사용해 행렬 생성 x &lt;- c(1, 2, 3, 4, 5, 6, 7, 8, 9) y &lt;- matrix(x, nrow = 3, ncol = 4) Warning in matrix(x, nrow = 3, ncol = 4): 데이터의 길이[9]가 열의 개수[4]의 배수 가 되지 않습니다 y [,1] [,2] [,3] [,4] [1,] 1 4 7 1 [2,] 2 5 8 2 [3,] 3 6 9 3 # length(x) &gt; nrow * ncol 인 경우 # x의 첫 번쨰 원소부터 초과하는 만큼 # x 원소의 값을 재사용 z &lt;- matrix(x, nrow = 2, ncol = 3) Warning in matrix(x, nrow = 2, ncol = 3): 데이터의 길이[9]가 행의 개수[2]의 배수 가 되지 않습니다 z [,1] [,2] [,3] [1,] 1 3 5 [2,] 2 4 6 행렬 구성 시 길이에 대한 약수가 아닌 값을 nrow 또는 ncol의 인수로 받은 경우 # x (length=9)로 행렬 생성 시 nrow=4 를 # 인수로 입력한 경우 h &lt;- matrix(x, nrow = 4) Warning in matrix(x, nrow = 4): 데이터의 길이[9]가 행의 개수[4]의 배수가 되지 않 습니다 h [,1] [,2] [,3] [1,] 1 5 9 [2,] 2 6 1 [3,] 3 7 2 [4,] 4 8 3 # x (length=9)로 행렬 생성 시 ncol=2 만 # 인수로 입력한 경우 h &lt;- matrix(x, nrow = 2) Warning in matrix(x, nrow = 2): 데이터의 길이[9]가 행의 개수[2]의 배수가 되지 않 습니다 h [,1] [,2] [,3] [,4] [,5] [1,] 1 3 5 7 9 [2,] 2 4 6 8 1 2.5.1 행렬의 연산 선형대수(linear algebra)에서 배우는 행렬-스칼라, 행렬-행렬 간 연산 가능 행렬-스칼라 연산 합 연산: 스칼라가 자동적으로 행렬의 차원에 맞춰서 재사용 \\[\\begin{bmatrix} 1 &amp; 2 &amp; 3 \\\\ 4 &amp; 5 &amp; 6 \\\\ 7 &amp; 8 &amp; 9 \\end{bmatrix} + 4 = \\begin{bmatrix} 1 &amp; 2 &amp; 3 \\\\ 4 &amp; 5 &amp; 6 \\\\ 7 &amp; 8 &amp; 9 \\end{bmatrix} + \\begin{bmatrix} 4 &amp; 4 &amp; 4 \\\\ 4 &amp; 4 &amp; 4 \\\\ 4 &amp; 4 &amp; 4 \\end{bmatrix} = \\begin{bmatrix} 5 &amp; 6 &amp; 7 \\\\ 8 &amp; 9 &amp; 10 \\\\ 11 &amp; 12 &amp; 13 \\end{bmatrix} \\] x &lt;-matrix(1:9, 3, 3, byrow = T) x + 4 [,1] [,2] [,3] [1,] 5 6 7 [2,] 8 9 10 [3,] 11 12 13 곱 연산 \\[\\begin{bmatrix} 1 &amp; 2 &amp; 3 \\\\ 4 &amp; 5 &amp; 6 \\\\ 7 &amp; 8 &amp; 9 \\end{bmatrix} \\times 4 = \\begin{bmatrix} 4 &amp; 8 &amp; 12 \\\\ 16 &amp; 20 &amp; 24 \\\\ 28 &amp; 32 &amp; 36 \\end{bmatrix} \\] x*4 [,1] [,2] [,3] [1,] 4 8 12 [2,] 16 20 24 [3,] 28 32 36 행렬-행렬 연산 행렬 간 연산에서 스칼라 연산(일반 연산)과 다른 점은 차원이 개입 행렬 간 합(차) 두 행렬의 동일 차원 간 합 연산 수행(+ 또는 - 연산자 사용) \\[\\begin{bmatrix} 1 &amp; 2 &amp; 3 \\\\ 4 &amp; 5 &amp; 6 \\\\ 7 &amp; 8 &amp; 9 \\end{bmatrix} + \\begin{bmatrix} 1 &amp; -1 &amp; ~~~2 \\\\ 3 &amp; ~~~2 &amp; ~~~4 \\\\ -6 &amp; ~~~3 &amp; -7 \\end{bmatrix} = \\begin{bmatrix} 2 &amp; 1 &amp; 5 \\\\ 7 &amp; 7 &amp; 10 \\\\ 1 &amp; 11 &amp; 2 \\end{bmatrix} \\] x &lt;- matrix(1:9, 3, 3, byrow = T) y &lt;- matrix(c(1, 3, -6, -1, 2, 3, 2, 4, -7), ncol = 3) x + y [,1] [,2] [,3] [1,] 2 1 5 [2,] 7 7 10 [3,] 1 11 2 행렬 곱/나누기(elementwise product/division) 연산자 * 또는 / 사용 \\[\\begin{bmatrix} 1 &amp; 2 &amp; 3 \\\\ 4 &amp; 5 &amp; 6 \\\\ 7 &amp; 8 &amp; 9 \\end{bmatrix} * \\begin{bmatrix} ~~~1 &amp; -1 &amp; ~~~2 \\\\ ~~~3 &amp; ~~~2 &amp; ~~~4 \\\\ -6 &amp; ~~~3 &amp; -7 \\end{bmatrix} = \\begin{bmatrix} ~~~~~ 1 &amp; -2 &amp; ~~~~6 \\\\ ~~~ 12 &amp; ~10 &amp; ~~~24 \\\\ -42 &amp; ~24 &amp; -63 \\end{bmatrix} \\] x * y [,1] [,2] [,3] [1,] 1 -2 6 [2,] 12 10 24 [3,] -42 24 -63 행렬-행렬 합(차) 또는 곱(나누기) 연산 시 행렬의 열단위 원소가 재사용되지 않음 동일 차원 간 연산만 가능!! z &lt;- y[, 1:2] # y 행렬에서 1-2 번째 열 추출 z # 3 by 2 행렬 [,1] [,2] [1,] 1 -1 [2,] 3 2 [3,] -6 3 x + z Error in x + z: 배열의 크기가 올바르지 않습니다 x * z Error in x * z: 배열의 크기가 올바르지 않습니다 x / z Error in x/z: 배열의 크기가 올바르지 않습니다 행렬 간 곱(matrix product) 두 행렬 \\(\\mathrm{\\mathbf X}_{n\\times m}\\), \\(\\mathrm{\\mathbf Y}_{m\\times k}\\) 이 주어졌을 때 두 행렬의 곱(matrix product) \\(\\mathrm{\\mathbf Z} = \\mathrm{\\mathbf {X\\cdot Y}}\\)는 \\(n \\times k\\) 행렬이고 \\(\\mathrm{\\mathbf Z}\\) 원소 \\(z_{ij}\\) (\\(i={1,\\ldots,n}\\), \\(j={1,\\ldots,k}\\)) 아래와 같이 정의됨 \\[ z_{ij} = \\sum_{r=1}^{m}x_{ir}y_{rj},~~~~\\forall~\\{i, j\\} \\] - R에서 위와 같은 연산은 %*%를 사용 예시: 행렬 \\(\\mathrm{\\mathbf X}_{2\\times 4}\\), \\(\\mathrm{\\mathbf Y}_{4\\times 3}\\) 이 아래와 같이 주어졌을 때 두 행렬의 곱 \\(\\mathrm{\\mathbf Z}_{2\\times 3} = \\mathrm{\\mathbf{X}}_{2\\times 4}\\mathrm{\\mathbf{Y}}_{4 \\times 3}\\)는 아래와 같음 \\[ \\mathrm{\\mathbf X}= \\begin{bmatrix} 1 &amp;~~~ 1 &amp; -1 &amp; 1 \\\\ 1 &amp; -1 &amp;~~~ 1 &amp; 1 \\end{bmatrix}, ~~~~~ \\mathrm{\\mathbf{Y}}= \\begin{bmatrix} 1 &amp; -2 &amp; -1 \\\\ 1 &amp;~~~1 &amp;~~~2 \\\\ 1 &amp;~~~3 &amp;~~~1 \\\\ 1 &amp;~~~2 &amp;~~~2 \\end{bmatrix} \\] \\[ \\mathrm{\\mathbf{Z}} = \\mathrm{\\mathbf{X}}\\mathrm{\\mathbf{Y}} = \\begin{bmatrix} 1 &amp;~~~ 1 &amp; -1 &amp; 1 \\\\ 1 &amp; -1 &amp;~~~ 1 &amp; 1 \\\\ \\end{bmatrix} \\cdot \\begin{bmatrix} 1 &amp; -2 &amp; -1 \\\\ 1 &amp;~~~1 &amp;~~~2 \\\\ 1 &amp;~~~3 &amp;~~~1 \\\\ 1 &amp;~~~2 &amp;~~~2 \\end{bmatrix} = \\begin{bmatrix} 2 &amp; -2 &amp; 2 \\\\ 2 &amp;~~~2 &amp; 0 \\end{bmatrix} \\] X &lt;- matrix(c(1,1,1,-1,-1,1,1,1), nrow = 2, ncol = 4) Y &lt;- matrix(c(1,1,1,1, -2, 1, 3, 2, -1, 2, 1, 2), nrow = 4, ncol = 3) Z &lt;- X %*% Y Z [,1] [,2] [,3] [1,] 2 -2 2 [2,] 2 2 0 행렬-벡터 연산 행렬 \\(\\mathrm{\\mathbf{X}}\\)의 행 길이와 벡터 \\(\\mathrm{\\mathbf y}\\)의 길이가 같은 경우 \\(\\rightarrow\\) \\(\\mathrm{\\mathbf y}\\)를 열 단위로 재사용 \\[\\mathrm{\\mathbf{X}} = \\begin{bmatrix} 1 &amp; 2 &amp; 4\\\\ 1 &amp; 3 &amp; 2\\\\ 1 &amp; 2 &amp; 1 \\end{bmatrix}, ~~~~~ \\mathrm{\\mathbf y} = [20, 18, 23]^T \\] \\[\\mathrm{\\mathbf{X}} + \\mathrm{\\mathbf{y}} = \\begin{bmatrix} 1 &amp; 2 &amp; 4\\\\ 1 &amp; 3 &amp; 2\\\\ 1 &amp; 2 &amp; 1 \\end{bmatrix} + \\begin{bmatrix} 20 &amp; 20 &amp; 20\\\\ 18 &amp; 18 &amp; 18\\\\ 23 &amp; 23 &amp; 23 \\end{bmatrix} = \\begin{bmatrix} 21 &amp; 22 &amp; 24\\\\ 19 &amp; 21 &amp; 20\\\\ 24 &amp; 25 &amp; 24 \\end{bmatrix} \\] #행렬-벡터 합 연산 # X = 3 by 3 행렬; y = 3 by 1 벡터 x &lt;- c(1, 1, 1, 2, 3, 2, 4, 2, 1) X &lt;- matrix(x, nrow = 3) y &lt;- c(20, 18, 23)# 재사용 X + y [,1] [,2] [,3] [1,] 21 22 24 [2,] 19 21 20 [3,] 24 25 24 행렬 \\(\\mathrm{\\mathbf{X}}\\)의 길이와 벡터 \\(\\mathrm{\\mathbf y}\\)의 길이가 같은 경우 \\(\\rightarrow\\) 벡터 \\(\\mathrm{\\mathbf y}\\)를 자동으로 원소를 행렬(열단위)로 변환 \\[\\mathrm{\\mathbf{X}} = \\begin{bmatrix} 1 &amp; 2 &amp; 3\\\\ 4 &amp; 5 &amp; 6\\\\ 7 &amp; 8 &amp; 9 \\end{bmatrix}, ~~~~~ \\mathrm{\\mathbf y} = [1, 2, \\ldots, 9]^T \\] \\[\\mathrm{\\mathbf{X}} + \\mathrm{\\mathbf{y}} = \\begin{bmatrix} 1 &amp; 4 &amp; 7\\\\ 2 &amp; 5 &amp; 8\\\\ 3 &amp; 6 &amp; 9 \\end{bmatrix} + \\begin{bmatrix} 1 &amp; 4 &amp; 7\\\\ 2 &amp; 5 &amp; 8\\\\ 3 &amp; 6 &amp; 9 \\end{bmatrix} = \\begin{bmatrix} 2 &amp; 8 &amp; 14\\\\ 4 &amp; 10 &amp; 16\\\\ 6 &amp; 12 &amp; 18 \\end{bmatrix} \\] #행렬-벡터 합 연산 # 행렬 X의 길이와 벡터 y의 길이가 같은 경우 x &lt;- c(1:9); X &lt;- matrix(x, nrow = 3) length(X); y &lt;- x [1] 9 X + y [,1] [,2] [,3] [1,] 2 8 14 [2,] 4 10 16 [3,] 6 12 18 # 길이가 다른 경우 # 1) 행렬 길이보다 큰 경우 y &lt;- c(1:10) X + y Warning in X + y: 두 객체의 길이가 서로 배수관계에 있지 않습니다 Error in eval(expr, envir, enclos): dims [product 9]가 객체 [10]의 길이와 일치하지 않습니다 # 1) 행렬 길이의 약수가 아닌 경우 # y 재사용 y &lt;- c(1:4) X + y Warning in X + y: 두 객체의 길이가 서로 배수관계에 있지 않습니다 [,1] [,2] [,3] [1,] 2 8 10 [2,] 4 6 12 [3,] 6 8 10 행렬-벡터 %*% 적용 시 벡터는 \\(n \\times 1\\) 행렬로 간주하고 행렬 곱 연산 수행(단 \\(\\mathrm{\\mathbf X}\\)와 벡터 \\(\\mathrm{\\mathbf y}\\)의 길이는 같아야 함). \\[\\mathrm{\\mathbf{X}}_{4\\times 3} = \\begin{bmatrix} 1 &amp; 2 &amp; 1 \\\\ 1 &amp; 1 &amp; 1 \\\\ 1 &amp; 3 &amp; 3 \\\\ 1 &amp; 4 &amp; 4 \\end{bmatrix}, ~~~~~ \\mathrm{\\mathbf y}_{3\\times 1} = [7, 6, 8]^T \\] \\[\\mathrm{\\mathbf{X}}\\mathrm{\\mathbf{y}} = \\begin{bmatrix} 1 &amp; 2 &amp; 1 \\\\ 1 &amp; 1 &amp; 1 \\\\ 1 &amp; 3 &amp; 3 \\\\ 1 &amp; 4 &amp; 4 \\end{bmatrix} \\cdot \\begin{bmatrix} 7 \\\\ 6 \\\\ 8 \\end{bmatrix} = \\begin{bmatrix} 27 \\\\ 21 \\\\ 49 \\\\ 63 \\end{bmatrix} \\] x &lt;- c(1, 1, 1, 1, 2, 1, 3, 4, 1, 1, 3, 4) y &lt;- c(7, 6, 8) X &lt;- matrix(x, nrow = 4, ncol = 3) X %*% y [,1] [1,] 27 [2,] 21 [3,] 49 [4,] 63 행렬의 전치(transpose) 전치 행렬(transpose matrix)는 임의의 행렬의 행과 열을 서로 맞바꾼 행렬임 행렬 \\(\\mathrm{\\mathbf X}\\)의 전치 행렬은 \\(\\mathrm{\\mathbf X}^T\\) 또는 \\(\\mathrm{\\mathbf X}&#39;\\) 으로 나타냄 행렬 \\(\\mathrm{\\mathbf X}\\)가 다음과 같이 주어졌을 때 전치 행렬 결과 \\[\\mathrm{\\mathbf{X}} = \\begin{bmatrix} 1 &amp; 2 &amp; 3\\\\ 4 &amp; 5 &amp; 6 \\end{bmatrix} ~~~~~ \\mathrm{\\mathbf{X}}^T = \\begin{bmatrix} 1 &amp; 4 \\\\ 2 &amp; 5 \\\\ 3 &amp; 6 \\end{bmatrix} \\] R에서 행렬을 전치시키는 함수는 t() 임 # t(object_name): 전치행렬 반환 x &lt;- 1:6 X &lt;- matrix(x, nrow = 2, ncol = 3, byrow = T) t(X) [,1] [,2] [1,] 1 4 [2,] 2 5 [3,] 3 6 # 전치행렬과 행렬 간 곱 x &lt;- c(1, 1, 1, 1, 1, 22.3, 23.2, 21.5, 25.3, 28.0) X &lt;- matrix(x, nrow = 5) t(X) %*% X [,1] [,2] [1,] 5.0 120.30 [2,] 120.3 2921.87 벡터-벡터 곱 연산(%*% 사용) \\[ \\mathrm{\\mathbf x} = [1, 2, 3, 4]^T \\] \\[\\mathrm{\\mathbf x}\\mathrm{\\mathbf x}^T = \\begin{bmatrix} 1 \\\\ 2 \\\\ 3 \\\\ 4 \\end{bmatrix} \\cdot \\begin{bmatrix} 1 &amp; 2 &amp; 3 &amp; 4 \\end{bmatrix} = \\begin{bmatrix} 1 &amp; 2 &amp; 3 &amp; 4 \\\\ 2 &amp; 4 &amp; 6 &amp; 8 \\\\ 3 &amp; 6 &amp; 9 &amp; 12 \\\\ 4 &amp; 8 &amp; 12 &amp; 16 \\end{bmatrix} \\] \\[\\mathrm{\\mathbf x}^T\\mathrm{\\mathbf x} = \\begin{bmatrix} 1 &amp; 2 &amp; 3 &amp; 4 \\end{bmatrix} \\cdot \\begin{bmatrix} 1 \\\\ 2 \\\\ 3 \\\\ 4 \\end{bmatrix} = 1 + 4 + 9 + 16 = 30 \\] x &lt;- 1:4 x %*% t(x) # 행렬 반환 [,1] [,2] [,3] [,4] [1,] 1 2 3 4 [2,] 2 4 6 8 [3,] 3 6 9 12 [4,] 4 8 12 16 t(x) %*% x # 스칼라 반환 x %*% x와 동일 결과 출력 [,1] [1,] 30 참고: 전치행렬의 성질(통계수학 II 강의내용 참고) \\((\\mathrm{\\mathbf{X}}^T)^T = \\mathrm{\\mathbf{X}}\\) \\((\\mathrm{\\mathbf{X} + \\mathbf{Y}})^T = \\mathrm{\\mathbf{X}}^T + \\mathrm{\\mathbf{Y}}^T\\) \\((\\mathrm{\\mathbf{X}\\mathbf{Y}})^T = \\mathrm{\\mathbf{Y}}^T\\mathrm{\\mathbf{X}}^T\\) \\((c\\mathrm{\\mathbf{X}})^T = c\\mathrm{\\mathbf{X}}^T\\), \\(c\\)는 임의의 상수 역행렬(inverse matrix) 행렬의 나눗셈 형태 행렬 \\(\\mathrm{\\mathbf{X}}\\) 가 \\(n \\times n\\) 정방행렬(square matrix)일 때, 아래를 만족하는 행렬 \\(\\mathrm{\\mathbf{Y}}_{n \\times n}\\)가 존재하면 \\(\\mathrm{\\mathbf{Y}}\\)를 \\(\\mathrm{\\mathbf{X}}\\)의 역행렬(inverse matrix)라고 하고 \\(\\mathrm{\\mathbf{X}}^{-1}\\)로 나타냄. \\[ \\mathrm{\\mathbf{X}\\mathbf{X}^{-1}} = \\mathrm{\\mathbf{X}^{-1}\\mathbf{X}} = \\mathrm{\\mathbf{I}}_{n\\times n} \\] 여기서 \\(\\mathrm{\\mathbf{I}}_{n\\times n}\\)은 대각 원소가 1이고 나머지 원소는 0인 항등 행렬임 \\(2 \\times 2\\) 행렬의 역행렬은 아래와 같이 구함(\\(3\\times 3\\) 이상 역행렬 구하는 방법은 통계수학 II 강의 참고) \\[\\mathrm{\\mathbf{X}} = \\begin{bmatrix} a &amp; b \\\\ c &amp; d \\end{bmatrix}, ~~~~ \\mathrm{\\mathbf{X}}^{-1} = \\frac{1}{ad - bc} \\begin{bmatrix} ~~~d &amp; -b \\\\ -c &amp;~~~a \\end{bmatrix} \\] R에서 정방 행렬의 역행렬은 solve() 함수를 사용해 구함 # 2 by 2 행렬의 역행렬 x &lt;- c(1, 2, 3, 4) X &lt;- matrix(x, 2) solve(X) [,1] [,2] [1,] -2 1.5 [2,] 1 -0.5 # 항등 행렬이 나오는지 확인 X %*% solve(X) [,1] [,2] [1,] 1 0 [2,] 0 1 참고: 역행렬의 성질(통계수학 II 강의내용 참고) \\((\\mathrm{\\mathbf{X}}^{-1})^{-1} = \\mathrm{\\mathbf{X}}\\) \\((\\mathrm{\\mathbf{X}}^T)^{-1} = (\\mathrm{\\mathbf{X}}^{-1})^T\\) \\((\\mathrm{\\mathbf{XY}})^{-1} = \\mathrm{\\mathbf{Y}}^{-1}\\mathrm{\\mathbf{X}}^{-1}\\) 행렬식(determinant) 행렬의 성질을 대표할 수 있는 하나의 값으로 \\(n \\times n\\) 정방행렬(square matrix)에서 정의 역행렬을 구할 때 임의의 행렬이 0, 즉 위 \\(2\\times 2\\) 행렬에서 \\(ad - bc\\)의 값이 0이라면 역행렬이 존재할 수 없는데 여기서 \\(ad - bc\\)가 \\(2\\times 2\\) 행렬의 정방행렬임 임의의 정방행렬 \\(\\mathrm{\\mathbf X}\\)의 행렬식은 \\(|\\mathrm{\\mathbf X}|\\) 또는 \\(\\det(\\mathrm{\\mathbf{X}})\\)로 표시함 \\(2\\times 2\\) 행렬의 행렬식은 넓이, \\(3\\times 3\\) 이상인 정방 행렬에서는 부피의 개념으로 이해할 수 있음 정방행렬 \\(\\mathrm{\\mathbf X}_{n\\times n}=\\{x_{ij}\\}\\)가 주어졌을 때, \\(i\\) 번째 행과 \\(j\\) 번째 열을 제외한 나머지 \\((n-1)\\times (n-1)\\) 정방행렬의 행렬식을 \\(|\\mathrm{\\mathbf{X}}_{ij}|\\) 라고 하면 이를 \\(x_{ij}\\)의 소행렬식(minor)이라 부르고 \\(x_{ij}\\)의 여인수(co-factor) \\(\\mathrm{\\mathbf{C}}_{ij}\\) 는 아래와 같이 정의됨 \\[ c_{ij} = (-1)^{i+j}|\\mathrm{\\mathbf{X}}_{ij}| \\] 이때 \\(\\mathrm{\\mathbf X}_{n\\times n}\\) 행렬식은 임의의 \\(i\\) 또는 \\(j\\)에 대해 아래의 식을 통해 구할 수 있음 \\[ \\det(\\mathrm{\\mathbf{X}}) = \\sum_{i=1}^{n}x_{ij}c_{ij} = \\sum_{j=1}^n x_{ij}c_{ij} \\] 행렬식 계산 예시 \\[\\mathrm{\\mathbf{X}} = \\begin{bmatrix} 1 &amp;~~~5 &amp;~~~0\\\\ 2 &amp;~~~4 &amp; -1\\\\ 0 &amp; -2 &amp;~~~0 \\end{bmatrix} \\] \\[\\begin{aligned} \\det(\\mathrm{\\mathbf{X}}) &amp;= x_{11}\\det(\\mathrm{\\mathbf{X}}_{11}) - x_{12}\\det(\\mathrm{\\mathbf{X}}_{12}) + x_{13}\\det(\\mathrm{\\mathbf{X}}_{13}) \\\\ &amp; \\\\ &amp; = 1 \\begin{vmatrix} ~~~4 &amp; -1 \\\\ - 2&amp;~~~0 \\end{vmatrix} -5 \\begin{vmatrix} 2 &amp; -1 \\\\ 0 &amp;~~~0 \\end{vmatrix} + 0 \\begin{vmatrix} 2 &amp;~~~4 \\\\ 0 &amp; -2 \\end{vmatrix} = -2 \\end{aligned} \\] R에서 임의 행렬의 행렬식은 det() 함수를 이용해 구함 X &lt;- matrix(c(1, 2, 0, 5, 4, -2, 0, -1, 0), ncol = 3) det(X) [1] -2 참고: 행렬식의 성질(통계수학 II 강의내용 참고) 행렬 \\(\\mathrm{\\mathbf{X}}\\), \\(\\mathrm{\\mathbf{Y}}\\)가 정방행렬이면 \\(\\det(\\mathrm{\\mathbf{XY}}) = \\det(\\mathrm{\\mathbf{X}})\\det(\\mathrm{\\mathbf{Y}})\\) \\(\\det(\\mathrm{\\mathbf{X}}) = \\det(\\mathrm{\\mathbf{X}}^T)\\) \\(\\det(c\\mathrm{\\mathbf{X}}) = c^n \\det(\\mathrm{\\mathbf{X}})\\) 여기서 \\(c\\)는 임의의 상수 \\(\\det(\\mathrm{\\mathbf{X}}^{-1}) = \\det(\\mathrm{\\mathbf{X}})^{-1}\\) 그외 정칙(non-singluar), 비정칙(non-singular), 양정치(positive definite) 행렬 모두 행렬식으로 정의할 수 있고 자세한 내용은 통계수학 II를 통해 학습. 추가적으로 여인수 \\(c_{ij}\\) 를 이용한 역행렬 공식은 아래와 같음 \\[\\mathrm{\\mathbf{X}}^{-1} = \\frac{1}{\\det(\\mathrm{\\mathbf{X}})} \\begin{bmatrix} c_{11} &amp; c_{12} &amp; \\cdots &amp; c_{1n} \\\\ c_{21} &amp; c_{22} &amp; \\cdots &amp; c_{2n} \\\\ \\vdots &amp; \\vdots &amp; \\cdots &amp; \\vdots \\\\ c_{n1} &amp; c_{n2} &amp; \\cdots &amp; c_{nn} \\end{bmatrix} \\] 예습: \\(3\\times 3\\) 정방행렬 \\(\\mathrm{\\mathbf{X}}\\)가 아래와 같이 주어졌을 때, \\(\\mathrm{\\mathbf{X}}\\)의 행렬식과 역행렬 \\(\\mathrm{\\mathbf{X}}^{-1}\\)을 직접 계산해 보고, R에서 각각을 구하는 함수를 사용하여 계산 결과가 맞는지 확인 \\[\\mathrm{\\mathbf{X}} = \\begin{bmatrix} 6 &amp; 1 &amp; 4 \\\\ 2 &amp; 5 &amp; 3 \\\\ 1 &amp; 1 &amp; 2 \\end{bmatrix} \\] 2.5.2 행렬의 색인 R의 행렬 객체 내 데이터 접근은 벡터와 유사하게 행과 열에 대응하는 색인 또는 이름으로 접근 가능 행렬의 행과 열은 꺽쇠 `[]’ 안에서 ,(콤마)로 구분 X[idx_row, idx_col]: 행렬 X의 idx_row 행, idx_col행에 저장된 값 반환(색인번호는 1부터 시작) idx_row, idx_col을 지정하지 않으면 전체 행 또는 열을 선택 x &lt;- 1:12 X &lt;- matrix(x, ncol = 4) X [,1] [,2] [,3] [,4] [1,] 1 4 7 10 [2,] 2 5 8 11 [3,] 3 6 9 12 # 1행만 선택 X[1, ] [1] 1 4 7 10 # 3열만 선택 X[, 3] [1] 7 8 9 # 1:3행만 선택 X[1:3, ] [,1] [,2] [,3] [,4] [1,] 1 4 7 10 [2,] 2 5 8 11 [3,] 3 6 9 12 # 1-2행, 3-4열 선택 X[1:2, 3:4] [,1] [,2] [1,] 7 10 [2,] 8 11 행렬의 각 행과 열에 이름 부여 가능 \\(\\rightarrow\\) matrix() 함수 인수 중 dimnames 에 속성 부여와 동일 dimnames() 함수를 통해 각 행과 열의 이름 확인 및 부여 가능 dimnames(object)[[i]], i = 1, 2 를 통해 행(i = 1)과 열(i = 2) 이름 변경 및 부여 가능 위와 유사한 기능을 하는 함수 rownames(): 헹 이름 반환 및 부여 colnames(): 열 이름 반환 및 부여 # matrix 함수 내에서 행렬 이름 동시 부여 X &lt;- matrix(1:9, ncol = 3, dimnames = list(c(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;), # 행 이름 c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;)))# 열 이름 X A B C 1 1 4 7 2 2 5 8 3 3 6 9 # dimnames()를 이용한 이름 확인 dimnames(X) # 행렬에 대한 리스트 반환 [[1]] [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; [[2]] [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; # dimnames() 함수로 행 이름 변경 dimnames(X)[[1]] &lt;- c(&quot;r1&quot;, &quot;r2&quot;, &quot;r3&quot;) # dimnames() 함수로 열 이름 변경 dimnames(X)[[2]] &lt;- c(&quot;c1&quot;, &quot;c2&quot;, &quot;c3&quot;) dimnames(X) [[1]] [1] &quot;r1&quot; &quot;r2&quot; &quot;r3&quot; [[2]] [1] &quot;c1&quot; &quot;c2&quot; &quot;c3&quot; X c1 c2 c3 r1 1 4 7 r2 2 5 8 r3 3 6 9 # rownames()를 통해 행 이름 확인 rownames(X) [1] &quot;r1&quot; &quot;r2&quot; &quot;r3&quot; # colnames()를 통해 열 이름 확인 colnames(X) [1] &quot;c1&quot; &quot;c2&quot; &quot;c3&quot; # rownames()를 이용해 행 이름 변경 rownames(X) &lt;- c(&quot;apple&quot;, &quot;strawberry&quot;, &quot;orange&quot;) rownames(X) [1] &quot;apple&quot; &quot;strawberry&quot; &quot;orange&quot; # colnames()를 이용해 행 이름 변경 colnames(X) &lt;- c(&quot;costco&quot;, &quot;emart&quot;, &quot;homeplus&quot;) colnames(X) [1] &quot;costco&quot; &quot;emart&quot; &quot;homeplus&quot; X costco emart homeplus apple 1 4 7 strawberry 2 5 8 orange 3 6 9 행과 열에 대한 이름이 존재한다면 벡터와 마찬가지로 이름으로 색인 가능 X[c(&quot;apple&quot;, &quot;orange&quot;), c(&quot;emart&quot;)] apple orange 4 6 # 2번째 열에 해당(emart)를 제외한 나머지 열 반환 X[, colnames(X)[-2]] costco homeplus apple 1 7 strawberry 2 8 orange 3 9 색인한 행렬 원소에 다른 값 할당 y &lt;- c(1:12); Y &lt;- matrix(y, ncol = 3) Y [,1] [,2] [,3] [1,] 1 5 9 [2,] 2 6 10 [3,] 3 7 11 [4,] 4 8 12 # 2, 4 행과 2-3열에 다른 값 할당 Y[c(2, 4), 2:3] &lt;- matrix(c(1, 2, 1, 4), ncol = 2) # 행렬 값 할당 다른 예시 X &lt;- matrix(nrow = 4, ncol = 3) # NA 값으로 구성된 4 by 3 행렬 X [,1] [,2] [,3] [1,] NA NA NA [2,] NA NA NA [3,] NA NA NA [4,] NA NA NA y &lt;- c(1, 0, 0, 1); Y &lt;- matrix(y, ncol = 2) X[3:4, 2:3] &lt;- Y X [,1] [,2] [,3] [1,] NA NA NA [2,] NA NA NA [3,] NA 1 0 [4,] NA 0 1 행렬 필터링 \\(\\rightarrow\\) 색인 대신 조건 사용(벡터와 동일) X = matrix(c(1,2,4,3,2,3,5,6), nrow = 4, ncol = 2) # X의 1열이 3보다 작거나 같은 행 필터링 X[X[,1] &lt;= 3, ] [,1] [,2] [1,] 1 2 [2,] 2 3 [3,] 3 6 # 논리값을 활용한 필터링 idx &lt;- X[, 1] &lt;= 3; idx [1] TRUE TRUE FALSE TRUE X[idx, ] [,1] [,2] [1,] 1 2 [2,] 2 3 [3,] 3 6 2.5.3 행과 열 추가 및 제거 행렬 재할당(re-assignment)를 통해 열이나 행을 직접 추가하거나 삭제 가능 cbind() (열 붙이기, column bind), rbind() (행 붙이기, row bind) 함수 사용 j &lt;- rep(1, 4) Z &lt;- matrix(c(1:4, 1, 1, 0, 0, 1, 0, 1, 0), nrow = 4, ncol = 3) Z [,1] [,2] [,3] [1,] 1 1 1 [2,] 2 1 0 [3,] 3 0 1 [4,] 4 0 0 cbind(j, Z) # 열 기준으로 붙이기 j [1,] 1 1 1 1 [2,] 1 2 1 0 [3,] 1 3 0 1 [4,] 1 4 0 0 # 길이가 다른 경우 재사용 cbind(1, Z) [,1] [,2] [,3] [,4] [1,] 1 1 1 1 [2,] 1 2 1 0 [3,] 1 3 0 1 [4,] 1 4 0 0 # Z 행렬 앞에 j 열 붙혀서 새로운 Z 생성 Z &lt;- cbind(j, Z) # 행 기준으로 붙이기 Z &lt;- rbind(Z, 2) 행 또는 열의 제거는 벡터에서와 마찬가지로 색인 앞에 - 사용 # 첫 번째 행 제거 Z[-1, ] j [1,] 1 2 1 0 [2,] 1 3 0 1 [3,] 1 4 0 0 [4,] 2 2 2 2 # 1, 5행 , 3열 제거 Z[-c(1, 5), -3] j [1,] 1 2 0 [2,] 1 3 1 [3,] 1 4 0 cbind() 또는 rbind() 함수는 다음 주에 배울 데이터 프레임에도 적용 가능하다. 2.5.4 행렬 관련 함수 diag(): 대각행렬 생성 또는 대각원소(diagonal elements) 추출 대각행렬: 주 대각선을 제외한 모든 원소가 0인 \\(n\\times n\\) 정방행렬로 다음과 같이 정의 \\[ \\mathrm{\\mathbf{D}} = \\{d_{ij}\\},~~~~i, j \\in \\{1, 2, \\ldots, n\\},~~~~\\forall~ i \\neq j \\rightarrow d_{ij} = 0 \\] D &lt;- diag(c(1:5), 5) D [,1] [,2] [,3] [,4] [,5] [1,] 1 0 0 0 0 [2,] 0 2 0 0 0 [3,] 0 0 3 0 0 [4,] 0 0 0 4 0 [5,] 0 0 0 0 5 # 3차원 항등 행렬(모든 대각원소가 1인 행렬) I3 &lt;- diag(1, 3) #대각원소 추출 diag(D) [1] 1 2 3 4 5 # 대각원소 재할당 diag(D) &lt;- rep(1, 5) 객체는 속성(attribute)을 갖고 그 속성에 따라 데이터의 구조가 정해짐. 즉 속성은 데이터에 대한 메타 데이터임. 객체의 속성은 대표적으로 이름(names), 차원(dimension), 클래스(class)로 정의되고 객제에 대한 자세한 정보를 파악하기 위해 제공되는 몇 가지 함수들에 대해 알아봄. R은 앞서 언급한 바와 같이 객체지향언어(object oriented program, OOP)이고 세 가지 유형의 객체지향 시스템(S3, S4, S5)이 존재함. R의 핵심적인 함수 및 패키지는 S3 객체 시스템을 사용하고 있기 때문에 알아둘 필요가 있으나 본 강의의 범위를 벗어나기 때문에 이번 학기에는 다루지 않을 것임. dim(object_name): 행렬 또는 데이터 프레임의 행과 열의 개수(차원)를 반환 # dim(): 객체의 차원(dimension)을 반환 Z j [1,] 1 1 1 1 [2,] 1 2 1 0 [3,] 1 3 0 1 [4,] 1 4 0 0 [5,] 2 2 2 2 dim(Z) [1] 5 4 nrow() 또는 NROW(): 행렬의 행 길이 반환 ncol() 또는 NCOL(): 행렬의 행 길이 반환 nrow(Z); ncol(Z) [1] 5 [1] 4 nrow()/ncol()과 NROW()/NCOL()의 차이점 nrow()/ncol()은 행렬 또는 데이터 프레임에 적용되며 벡터가 인수로 사용될 때 NULL 값을 반환하는데 비해 NROW()/NCOL()은 벡터의 길이도 반환 가능 attributes(): 객체가 갖는 속성을 반환함 x &lt;- 1:9; X &lt;- matrix(x, ncol = 3) # 객체의 속성 확인 attributes(x) NULL attributes(X) $dim [1] 3 3 class(): 객체의 클래스 명칭 반환 및 클래스 부여 # 객체의 class 확인 class(x); class(X) [1] &quot;integer&quot; [1] &quot;matrix&quot; &quot;array&quot; # 객체의 class 부여 class(x) &lt;- &quot;this is a vector&quot; str(): 객체가 갖고 있는 데이터의 구조 확인 # 객체의 구조 파악 str(x); str(X) &#39;this is a vector&#39; int [1:9] 1 2 3 4 5 6 7 8 9 int [1:3, 1:3] 1 2 3 4 5 6 7 8 9 # x와 X에 이름(name) 속성을 추가한 경우 names(x) &lt;- paste0(&quot;x&quot;, 1:9) dimnames(X) &lt;- list(paste0(&quot;r&quot;, 1:3), paste0(&quot;c&quot;, 1:3)) attributes(x); attributes(X) $class [1] &quot;this is a vector&quot; $names [1] &quot;x1&quot; &quot;x2&quot; &quot;x3&quot; &quot;x4&quot; &quot;x5&quot; &quot;x6&quot; &quot;x7&quot; &quot;x8&quot; &quot;x9&quot; $dim [1] 3 3 $dimnames $dimnames[[1]] [1] &quot;r1&quot; &quot;r2&quot; &quot;r3&quot; $dimnames[[2]] [1] &quot;c1&quot; &quot;c2&quot; &quot;c3&quot; class(x); class(X) [1] &quot;this is a vector&quot; [1] &quot;matrix&quot; &quot;array&quot; str(x); str(X) &#39;this is a vector&#39; Named int [1:9] 1 2 3 4 5 6 7 8 9 - attr(*, &quot;names&quot;)= chr [1:9] &quot;x1&quot; &quot;x2&quot; &quot;x3&quot; &quot;x4&quot; ... int [1:3, 1:3] 1 2 3 4 5 6 7 8 9 - attr(*, &quot;dimnames&quot;)=List of 2 ..$ : chr [1:3] &quot;r1&quot; &quot;r2&quot; &quot;r3&quot; ..$ : chr [1:3] &quot;c1&quot; &quot;c2&quot; &quot;c3&quot; attr(object, \"attribute_name\"): 객체가 갖고 있는 속성을 지정해서 확인 # 객체 속성 요소 확인 attr(x, &quot;names&quot;) [1] &quot;x1&quot; &quot;x2&quot; &quot;x3&quot; &quot;x4&quot; &quot;x5&quot; &quot;x6&quot; &quot;x7&quot; &quot;x8&quot; &quot;x9&quot; attr(X, &quot;dimnames&quot;) [[1]] [1] &quot;r1&quot; &quot;r2&quot; &quot;r3&quot; [[2]] [1] &quot;c1&quot; &quot;c2&quot; &quot;c3&quot; 2.5.5 벡터와 행렬의 차이점 행렬은 개념적으로 \\(n \\times 1\\) 벡터가 2 개 이상 묶어져서 행과 열의 속성을 갖지만 기본적으로는 벡터 z &lt;- 1:8 U &lt;- matrix(z, 4, 2) length(z) # 입력 벡터 원소의 길이가 8 [1] 8 R에서 U가 행렬임을 나타내기 위해 추가적인 속성(attribute)를 부여 class(z) # 벡터 [1] &quot;integer&quot; attributes(z) NULL class(U) # 행렬 [1] &quot;matrix&quot; &quot;array&quot; attributes(U) $dim [1] 4 2 2.5.6 의도치 않은 차원축소 피하기 다음 행렬에서 한 행을 추출 Z &lt;- matrix(c(1:8), 4, 2) z &lt;- Z[2, ] attributes(Z) # 행과 열의 차원 수를 표시 $dim [1] 4 2 # 객체 z의 속성및 형태는? attributes(z) # 차원이 존재하지 않음 NULL 차원축소를 방지하는 방법 \\(\\rightarrow\\) r을 벡터가 아닌 \\(1 \\times 2\\) 행렬로 인식 z &lt;- Z[2, , drop = FALSE] attributes(z) $dim [1] 1 2 as.matrix()를 이용한 직접 변환 z &lt;- as.matrix(Z[2, ]) class(z) [1] &quot;matrix&quot; &quot;array&quot; z # 행렬이 변환됨을 유의 [,1] [1,] 2 [2,] 6 "],["array.html", "2.6 배열(array)", " 2.6 배열(array) 통계학의 관점에서 R의 행렬의 행은 조사 대상이 되는 사람, 동물 등 관측 대상에 해당하고, 열은 대상의 특성을 표현하는 변수(예: 몸무게, 키, 혈압 등)에 해당 \\(\\rightarrow\\) 2차원 구조 위와 같은 데이터를 년 단위로 수집한다면? \\(\\rightarrow\\) 한 대상자에 해당하는 변수들은 시간에 따라 변함 \\(\\rightarrow\\) 시간 차원이 하나 더 존재! R에서 이러한 형태의 데이터 구조를 배열(array)이라고 지칭함 2.6.1 배열의 생성 및 색인 동일한 유형의 데이터가 2차원 이상으로 구성된 데이터 구조 동일한 차원(\\(n\\times p\\))의 배열(행렬)이 \\(k\\) 개 방에 저장된 데이터 구조 배열 생성 함수 # array() 함수 인수 구조 array(data, # 저장할 데이터 벡터 또는 행렬 dim, # 배열의 차원 지정 dimnames # 배열 차원 명칭 ) 통계학과 3명의 학생에 대한 중간고사 기준 한 번의 퀴즈와 중간고사 점수, 그리고 기말고사 기준 한 번의 퀴즈와 기말고사 점수 데이터 가정 x &lt;- c(75, 84, 93, 65, 78, 92) y &lt;- c(82, 78, 85, 88, 75, 88) first_term &lt;- matrix(x, nrow = 3, ncol = 2) second_term &lt;- matrix(y, nrow = 3, ncol = 2) first_term [,1] [,2] [1,] 75 65 [2,] 84 78 [3,] 93 92 second_term [,1] [,2] [1,] 82 88 [2,] 78 75 [3,] 85 88 # 위 두 데이터를 2층 짜리 배열로 구성 Z &lt;- array(data = c(first_term, second_term), dim = c(3, 2, 2)) Z , , 1 [,1] [,2] [1,] 75 65 [2,] 84 78 [3,] 93 92 , , 2 [,1] [,2] [1,] 82 88 [2,] 78 75 [3,] 85 88 # Z의 속성 attributes(Z) $dim [1] 3 2 2 # Z의 클래스 class(Z) [1] &quot;array&quot; # Z의 구조 str(Z) num [1:3, 1:2, 1:2] 75 84 93 65 78 92 82 78 85 88 ... 배열 내 데이터 접근은 색인을 통해 가능(벡터 행렬과 동일) # 첫 번째 층만 추출 Z[, , 1] [,1] [,2] [1,] 75 65 [2,] 84 78 [3,] 93 92 # 두 번째 층에서 2-3행 만 추출 Z[2:3, , 2] [,1] [,2] [1,] 78 75 [2,] 85 88 2.6.2 배열의 확장 예제 데이터 사이언스 스쿨 참고 배열 구조를 갖는 가장 대표적인 데이터 중 하나가 이미지(사진) 이미지 데이터는 픽셀(pixel) 이라는 세분화된 작은 이미지를 직사각형 형태로 모은 형태 전체 이미지는 세로픽셀수 \\(\\times\\) 가로픽셀수 로 표현됨 \\(\\rightarrow\\) 행렬 픽셀의 색을 숫자로 표현하는 방식을 색공간(color space)라고 명칭 대표적 색공간은 흑백스케일(grey scale), RGB (Red-Green-Blue), HSV(Hue-Saturation-Value) 방식 RGB 색공간을 사용한 경우 각 색공간별로 동일한 크기의 행렬이 3개 층으로 저장된 상태 \\(\\rightarrow\\) 배열 RGB는 0 ~ 255 까지 값을 갖고 빨강색 (255, 0, 0), 녹색 (0, 255, 0), 파란색은 (0, 0, 255)임 Figure 2.2: https://www.geeksforgeeks.org/matlab-rgb-image-representation/ 에서 발췌 목표 R에서 웹 url로 이미지를 불러오기 불러온 이미지를 R에서 plotting 해보기 이미지 데이터를 직접 수정 해보기 이미지 입출력 패키지 installation install.packages(&quot;jpeg&quot;) # jpeg 파일 입출력 관련 package install.packages(&quot;cowplot&quot;) # ggplot add-on package 관련 패키지 불러오기 require(tidyverse) require(jpeg) require(cowplot) 이미지 불러오기 myurl &lt;- &quot;https://img.livescore.co.kr/data/editor/1906/ba517de8162d92f4ea0e9de0ec98ba02.jpg&quot; z &lt;- tempfile() download.file(myurl,z,mode=&quot;wb&quot;) pic &lt;- readJPEG(z) 이미지 그래프 출력창에서 확인 이미지 임의 부분 편집하기 pic[300:460, 440:520, 1] &lt;- 0.5 pic[300:460, 440:520, 2] &lt;- 0.5 pic[300:460, 440:520, 3] &lt;- 0.5 ggdraw() + draw_image(pic) RGB값을 무작위로 샘플링 후 매개변수로 노이즈 가중치 조절해 보기 pic &lt;- readJPEG(z) yr &lt;- pic[300:460, 440:520, 1] yg &lt;- pic[300:460, 440:520, 2] yb &lt;- pic[300:460, 440:520, 3] n &lt;- nrow(yr); p &lt;- ncol(yr) t &lt;- 0.2 wr &lt;- t * yr + (1 - t)*matrix(runif(length(yr)), nrow = n, ncol = p) wg &lt;- t * yg + (1 - t)*matrix(runif(length(yg)), nrow = n, ncol = p) wb &lt;- t * yb + (1 - t)*matrix(runif(length(yb)), nrow = n, ncol = p) pic[300:460, 440:520, 1] &lt;- wr pic[300:460, 440:520, 2] &lt;- wg pic[300:460, 440:520, 3] &lt;- wb ggdraw() + draw_image(pic) "],["factor-table.html", "2.7 요인(factor)과 테이블(table)", " 2.7 요인(factor)과 테이블(table) 요인(factor) 데이터 타입은 통계학에서 범주형 변수(categorical variable)을 표현하기 위한 R의 데이터 타입으로 범주형 자료는 크게 명목형(nominal)과 순서형(ordinal) 으로 구분 테이블(table) 객체는 factor 객체에 대한 빈도를 나타내기 위해 사용 범주형 자료 데이터가 사전에 정해진 특정 유형으로만 분류되는 경우: 성별, 인종, 혈액형 등 범주형 자료는 명목형과 순서형으로 구분 가능 순서형 자료 예: 성적, 교육수준, 선호도, 중증도 등 2.7.1 요인(factor) 범주형 자료를 표현하기 위한 R의 객체 클래스 Factor는 정수형 벡터를 기반으로 levels (수준) 이라는 속성이 추가된 객체임 숫자 또는 문자로 표현 되었다 하더라도 범주형으로 이해 Factor는 level에 해당하는 값만 가질 수 있는 벡터로 간주 Factor 생성 함수 # factor 정의 함수 factor(data, # factor로 표현하고자 하는 값. 주로 문자형 levels, # 요인의 수준, 미리 정한 값 labels, # 수준에 대한 레이블링 ordered # 순서형 자료 표시 여부 # TRUE/FALSE, default = FALSE ) 수치형을 factor로 만들어도 처음 입력 값은 문자형으로 변하고 level 값으로 치환 대신 (1, 2, 3)이 중심값이 됨 \\(\\rightarrow\\) 정수형 벡터임 score &lt;- rep(c(4:6), each = 4) fscore &lt;- factor(score) typeof(fscore) # factor의 기본 데이터 타입 [1] &quot;integer&quot; attributes(fscore) # factor의 속성 $levels [1] &quot;4&quot; &quot;5&quot; &quot;6&quot; $class [1] &quot;factor&quot; # factor의 구조 str(fscore) Factor w/ 3 levels &quot;4&quot;,&quot;5&quot;,&quot;6&quot;: 1 1 1 1 2 2 2 2 3 3 ... # levels(): factor의 수준(levels) 반환 함수 levels(fscore) [1] &quot;4&quot; &quot;5&quot; &quot;6&quot; # nlevels(): level의 개수 반환 nlevels(fscore) [1] 3 Factor를 벡터 결합 함수 c()로 결합 c(fscore, factor(4)) # 강제로 정수형 벡터로 변환 [1] 1 1 1 1 2 2 2 2 3 3 3 3 1 Factor의 범주 수준(level) 및 범주명(label) 지정 x &lt;- rep(c(1:2), each = 4) # factor의 범주 수준 지정 sex &lt;- factor(x, levels = 1:2) sex [1] 1 1 1 1 2 2 2 2 Levels: 1 2 # factor의 범주 수준 및 범주 명칭 지정 sex &lt;- factor(x, levels = 1:2, labels = c(&quot;male&quot;, &quot;female&quot;)) sex # level의 값이 명칭으로 변경 [1] male male male male female female female female Levels: male female str(sex) Factor w/ 2 levels &quot;male&quot;,&quot;female&quot;: 1 1 1 1 2 2 2 2 # 값은 존재하지 않으나 수준을 미리 정해 놓은 경우 severity &lt;- factor(1:2, levels = c(1, 2, 3), labels = c(&quot;Mild&quot;, &quot;Moderate&quot;, &quot;Severe&quot;)) severity[2] &lt;- &quot;Severe&quot; # 존재하지 않는 수준 할당 severity[1] &lt;- &quot;Good&quot; Warning in `[&lt;-.factor`(`*tmp*`, 1, value = &quot;Good&quot;): 요인의 수준(factor level)이 올바르지 않아 NA가 생성되었습니다. severity [1] &lt;NA&gt; Severe Levels: Mild Moderate Severe 순서형 factor 생성 severity &lt;- factor(rep(1:3, times = 3), levels = 1:3, labels = c(&quot;Mild&quot;, &quot;Moderate&quot;, &quot;Severe&quot;), ordered = T) severity [1] Mild Moderate Severe Mild Moderate Severe Mild Moderate [9] Severe Levels: Mild &lt; Moderate &lt; Severe is.ordered(severity) # 순서형 범주 체크 [1] TRUE 요인형 객체에 적용되는 일반적인 함수 tapply() 함수 특정 요인 수준의 고유한 조합으로 각 그룹에 속한 값에 특정 함수를 적용한 결과를 반환 일반적인 함수 사용 형태는 아래와 같음 # tapply() 함수 사용 인수 tapply( x, # 벡터, INDEX, # 벡터를 그룹화할 색인(factor) FUN, # 각 그룹마다 적용할 함수 ) 예시: 2020년 4월 15일 총선의 연령별 지지율 # 문자열을 INDEX의 인수로 받은 경우 x &lt;- c(48, 43, 27, 52, 38, 67, 23, 58, 72, 85) # 유권자 연령 f &lt;- rep(c(&quot;더불어민주당&quot;, &quot;미래통합당&quot;), each = 5) t &lt;- tapply(x, f, mean) # f의 요인 수준 별 x (연령) 평균 계산 t 더불어민주당 미래통합당 41.6 61.0 # x, f 순서를 랜덤하게 섞은 다음 결과 set.seed(12345) # 난수 생성 결과 고정 idx &lt;- order(runif(10)) x &lt;- x[idx] f &lt;- f[idx] tapply(x, f, mean) 더불어민주당 미래통합당 41.6 61.0 Factor가 2개 이상인 경우 두 factor 객체의 수준의 조합(AND 조건)에 따른 그룹을 만든 후 그룹별 함수 적용 s &lt;- rep(c(&quot;M&quot;,&quot;F&quot;), each = 6) income &lt;- c(35, 42, 68, 29, 85, 55, 30, 40, 63, 27, 83, 52) * 100 # 단위: 만원 age &lt;- c(32, 36, 44, 25, 55, 41, 28, 33, 46, 23, 54, 44) set.seed(12345) # 난수 생성 결과 고정 idx &lt;- order(runif(12)) s &lt;- s[idx]; income &lt;- income[idx]; age &lt;- age[idx] # age &lt;= 40 -&gt; 1, 40 &lt; age &lt;= 50 -&gt; 2, # age &gt;= 50 -&gt; 3 할당: ifelse() 함수 사용 age &lt;- ifelse(age &lt;= 40, 1, ifelse(age &lt;= 50, 2, 3)) tapply(income, list(sex = s, age = age), mean) age sex 1 2 3 F 3233.333 5750 8300 M 3533.333 6150 8500 R에서 가장 많이 활용되는 함수 계열 중 하나로 *apply()를 들 수 있다. 벡터, 행렬 등과 같은 R 객체에 for loop 대신 반복적으로 동일한 함수를 적용할 때 활용된다. *apply() 계열 함수에 대해서는 데이터 프레임 에서 더 상세하게 배울 것임 split() 함수 tapply()는 주어진 요인의 수준에 따라 특정 함수를 적용하지만, split()은 데이터를 요인의 수준(그룹) 별로 데이터를 나누어 리스트 형태로 반환 # split() 함수 사용 인수 split( x, # 분리할 데이터(벡터) f, # 데이터를 분리할 기준이 되는 factor 지정 ) split() 함수 사용 예시 # 성별의 수준 남녀 별 소득 수준 분리 split(income, s) $F [1] 8300 5200 3000 4000 6300 2700 $M [1] 5500 8500 3500 6800 4200 2900 # 두 개 요인 조합으로 income 벡터 분리 split(income, list(s, age)) $F.1 [1] 3000 4000 2700 $M.1 [1] 3500 4200 2900 $F.2 [1] 5200 6300 $M.2 [1] 5500 6800 $F.3 [1] 8300 $M.3 [1] 8500 # 요인의 각 수준에 대한 인덱스를 반환하고자 하는 경우 abalone &lt;- read.csv(&quot;http://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data&quot;, header = FALSE) # 전복 데이터셋 # V1: 전복의 종류 # F=암컷; M=수컷, I=새끼 g &lt;- abalone[, 1] # 전복종류만 추출 set.seed(20200410) idx &lt;- sample(1:length(g), size = 10) g &lt;- g[idx] split(1:length(g), g) $F [1] 1 6 8 $I [1] 2 3 5 7 $M [1] 4 9 10 2.7.2 테이블(table) 범주형 변수의 빈도 또는 분할표(교차표)를 표현하기 위한 객체(클래스) 범주 별 통계량(평균, 표준편차, 중위수, …) 요약 tapply() 함수를 이용한 테이블 만들기 길이가 12인 임의의 벡터 u를 수준의 개수가 각각 3, 2인 factor의 조합으로 부분벡터로 분리 후 length() 적용 \\(\\rightarrow\\) tapply() 함수 사용 u &lt;- runif(12) f1 &lt;- factor(c(4, 4, 3, 5, 5, 4, 3, 3, 4, 5, 5, 3)) f2 &lt;- factor(c(&quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;b&quot;, &quot;a&quot;, &quot;b&quot;, &quot;b&quot;, &quot;a&quot;, &quot;a&quot;, &quot;b&quot;, &quot;b&quot;)) tapply(u, list(f1, f2), length) a b 3 1 3 4 4 NA 5 2 2 u의 값과 상관 없이 두 factor 형 변수 f1과 f2의 조합에 따른 개수 반환 \\(\\rightarrow\\) 분할표(contingency table) 위 예시에서 f1이 “4” 이고 f2가 “b” 인 경우는 없기 때문에 0 값이 있어야 하나, tapply() 함수 적용 시 결측값 NA를 반환 table(): 하나 이상의 factor의 수준 또는 수준의 조합으로 분할표 생성 Factor가 3개 이상인 경우 배열로 다차원 분할표 표현 # table() 적용 예시 t1 &lt;- table(f1, f2) t1 f2 f1 a b 3 1 3 4 4 0 5 2 2 typeof(t1); attributes(t1); str(t1) [1] &quot;integer&quot; $dim [1] 3 2 $dimnames $dimnames$f1 [1] &quot;3&quot; &quot;4&quot; &quot;5&quot; $dimnames$f2 [1] &quot;a&quot; &quot;b&quot; $class [1] &quot;table&quot; &#39;table&#39; int [1:3, 1:2] 1 4 2 3 0 2 - attr(*, &quot;dimnames&quot;)=List of 2 ..$ f1: chr [1:3] &quot;3&quot; &quot;4&quot; &quot;5&quot; ..$ f2: chr [1:2] &quot;a&quot; &quot;b&quot; # factor가 한개인 경우 table(f1) f1 3 4 5 4 4 4 # factor가 3개인 경우 year = c(&quot;1&quot;,&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;3&quot;,&quot;4&quot;) gender = c(&quot;M&quot;,&quot;M&quot;,&quot;F&quot;,&quot;M&quot;,&quot;F&quot;,&quot;F&quot;) grade = c(&quot;A&quot;,&quot;C&quot;,&quot;B&quot;,&quot;B&quot;,&quot;A&quot;,&quot;C&quot;) table(gender, grade, year) , , year = 1 grade gender A B C F 0 0 0 M 1 0 1 , , year = 2 grade gender A B C F 0 1 0 M 0 0 0 , , year = 3 grade gender A B C F 1 0 0 M 0 1 0 , , year = 4 grade gender A B C F 0 0 1 M 0 0 0 테이블 관련 함수 tabulate() 함수 정수로 이루어진 벡터에 각 정수 값이 발생한 횟수를 카운팅한 결과를 반환 \\(\\rightarrow\\) table() 함수의 핵심 함수 # tabulate() 함수 사용 인수(argument) tabulate( bin, # 정수형(수치형) 벡터 또는 factor nbins, # 사용할 수준(bin)의 개수 ) tabulate() 함수 예시 x &lt;- c(2, 2, 2, 1, 3, 4, 5, 5, 10, 8, 8) tabulate(x) [1] 1 3 1 1 2 0 0 2 0 1 tabulate(x, nbins = 3) [1] 1 3 1 addmargins() 함수 테이블 객체(분할표)를 인수로 받아 각 요인의 수준 및 수준 조합 별 합계 값을 테이블과 동시 반환 # addmargins() 함수 사용 인수 addmargins( T # 테이블 또는 배열 객체 ) addmargins() 예시 t1 &lt;- table(f1, f2) addmargins(t1) f2 f1 a b Sum 3 1 3 4 4 4 0 4 5 2 2 4 Sum 7 5 12 # 3차원 이상 테이블 t2 &lt;- table(gender, grade, year) is.table(t2); is.array(t2) [1] TRUE [1] TRUE addmargins(t2) , , year = 1 grade gender A B C Sum F 0 0 0 0 M 1 0 1 2 Sum 1 0 1 2 , , year = 2 grade gender A B C Sum F 0 1 0 1 M 0 0 0 0 Sum 0 1 0 1 , , year = 3 grade gender A B C Sum F 1 0 0 1 M 0 1 0 1 Sum 1 1 0 2 , , year = 4 grade gender A B C Sum F 0 0 1 1 M 0 0 0 0 Sum 0 0 1 1 , , year = Sum grade gender A B C Sum F 1 1 1 3 M 1 1 1 3 Sum 2 2 2 6 ftable() 함수 “평평한(flat)” 교차표 생성 다차원 교차표 작성 시 행변수와 열변수 교환을 통해 재사용 가능 ftable( x, # factor, table 또는 ftable 클래스를 갖는 객체 row.vars, # 행 변수 지정 색인(정수, 문자) col.vars # 열 변수 지정 색인(정수, 문자) ) ftable() 함수 사용 예시 t3 &lt;- ftable(t2) t3; attributes(t3); str(t3) year 1 2 3 4 gender grade F A 0 0 1 0 B 0 1 0 0 C 0 0 0 1 M A 1 0 0 0 B 0 0 1 0 C 1 0 0 0 $dim [1] 6 4 $class [1] &quot;ftable&quot; $row.vars $row.vars$gender [1] &quot;F&quot; &quot;M&quot; $row.vars$grade [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; $col.vars $col.vars$year [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; &#39;ftable&#39; int [1:6, 1:4] 0 0 0 1 0 1 0 1 0 0 ... - attr(*, &quot;row.vars&quot;)=List of 2 ..$ gender: chr [1:2] &quot;F&quot; &quot;M&quot; ..$ grade : chr [1:3] &quot;A&quot; &quot;B&quot; &quot;C&quot; - attr(*, &quot;col.vars&quot;)=List of 1 ..$ year: chr [1:4] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; # 테이블 내 행 변수 바꾸기 t4 &lt;- ftable(t2, row.vars = c(&quot;year&quot;, &quot;gender&quot;)) t4 grade A B C year gender 1 F 0 0 0 M 1 0 1 2 F 0 1 0 M 0 0 0 3 F 1 0 0 M 0 1 0 4 F 0 0 1 M 0 0 0 # 테이블 내 열 변수 바꾸기 t5 &lt;- ftable(t2, col.vars = 1) t5 gender F M grade year A 1 0 1 2 0 0 3 1 0 4 0 0 B 1 0 0 2 1 0 3 0 1 4 0 0 C 1 0 1 2 0 0 3 0 0 4 1 0 margin.table() 함수 배열 형식으로 지정된 교차표(table() 반환 결과)에서 지정된 차원 색인에 대한 표 합계 계산 결과 반환 margin.table( x, # table 또는 ftable 클래스를 갖는 객체 margin # 차원 색인 번호 ) margin.table() 예시 t2 , , year = 1 grade gender A B C F 0 0 0 M 1 0 1 , , year = 2 grade gender A B C F 0 1 0 M 0 0 0 , , year = 3 grade gender A B C F 1 0 0 M 0 1 0 , , year = 4 grade gender A B C F 0 0 1 M 0 0 0 margin.table(t2, 1) # 1 차원(행): 성별 gender F M 3 3 margin.table(t2, 2) # 2 차원(열): 성적 grade A B C 2 2 2 margin.table(t2, 3) # 3 차원(배열 방 번호): 학년 year 1 2 3 4 2 1 2 1 prop.table() 함수 table 객체 빈도에 대한 비율 계산 전체, 차원 단위 비율 계산 가능 prop.table( x, # table 또는 ftable 클래스를 갖는 객체 margin # 차원 색인 번호 ) prop.table() 예시 margin = NULL: 각 셀을 전체 cell의 합으로 나눈 비율 margin = 1: 각 행 별 셀에 대해 각 행에 해당하는 cell 합으로 나눈 비율 \\((n_{ij}/n_{i.})\\), \\(n_{i.} = \\sum_{j=1}^{J} n_{ij}\\) margin = 2: 각 열 별 셀에 대해 각 열에 해당하는 cell 합으로 나눈 비율 \\((n_{ij}/n_{.j})\\), \\(n_{.j} = \\sum_{i=1}^{I} n_{ij}\\) # 2차원 교차표 prop.table(t1) # margin = NULL f2 f1 a b 3 0.08333333 0.25000000 4 0.33333333 0.00000000 5 0.16666667 0.16666667 prop.table(t1, 1) # margin = 1 (row) f2 f1 a b 3 0.25 0.75 4 1.00 0.00 5 0.50 0.50 prop.table(t1, 2) # margin = 2 (column) f2 f1 a b 3 0.1428571 0.6000000 4 0.5714286 0.0000000 5 0.2857143 0.4000000 "],["data-frame.html", "2.8 데이터 프레임(data frame)", " 2.8 데이터 프레임(data frame) 학습목표(4 주차): 데이터 프레임 클래스에 대해 알아보고, 데이터 프레임을 생성, 병합(merge), 연산에 대한 함수들에 대해 알아본다. Excel 스프레드시트와 같은 형태 Table 2.6: 스프레드시트 기본 형태 예시 이름 직장 나이 김어준 딴지일보 51 주진우 시사인 46 김용민 프리랜서 45 정봉주 정당인 59 데이터 프레임은 데이터 유형에 상관없이 2차원 형태의 데이터 구조 행렬과 리스트를 혼합한 자료 형태 \\(\\rightarrow\\) 동일한 길이의 벡터로 이루어진 리스트를 구성요소로 갖는 리스트 행렬과 유사한 구조를 갖고 있지만 각기 다른 유형의 자료형태로 자료행렬을 구성할 수 있다는 점에서 행렬과 차이를 갖음 행렬과 마찬가지로 변수(열)의 길이(행의 개수)는 모두 동일해야 함 R에서 가장 빈번하게 활용되고 있는 데이터 클래스임 데이터 프레임의 각 열(컬럼)은 벡터로 간주 2.8.1 데이터 프레임 생성 데이터 프레임 생성 함수: data.frame() data.frame( # 값 또는 이름(tag) = 값 ..., # 논리값. # 변수명(열 이름)이 구문 상 유효한 변수인지 또는 중복이 있는지 확인 check.names, # 논리값. 문자형 벡터의 factor 형 강제 변환 여부 stringsAsFactors, ) 데이터 프레임 생성 예시: 모 병원에서 얻은 환자의 인구학적 정보 id &lt;- c(1:10) sex &lt;- rep(c(&quot;Female&quot;, &quot;Male&quot;), each = 5) age &lt;- c(34, 22, 54, 43, 44, 39, 38, 28, 31, 42) sbp &lt;- c(112, 118, 132, 128, 128, 124, 121, 119, 124, 109) height &lt;- c(165, 158, 161, 160, 168, 172, 175, 182, 168, 162) weight &lt;- c(52, 48, 59, 60, 48, 72, 73, 82, 64, 60) df &lt;- data.frame(id, sex, age, sbp, height, weight, stringsAsFactors = FALSE) df attributes(df); str(df); summary(df) $names [1] &quot;id&quot; &quot;sex&quot; &quot;age&quot; &quot;sbp&quot; &quot;height&quot; &quot;weight&quot; $class [1] &quot;data.frame&quot; $row.names [1] 1 2 3 4 5 6 7 8 9 10 &#39;data.frame&#39;: 10 obs. of 6 variables: $ id : int 1 2 3 4 5 6 7 8 9 10 $ sex : chr &quot;Female&quot; &quot;Female&quot; &quot;Female&quot; &quot;Female&quot; ... $ age : num 34 22 54 43 44 39 38 28 31 42 $ sbp : num 112 118 132 128 128 124 121 119 124 109 $ height: num 165 158 161 160 168 172 175 182 168 162 $ weight: num 52 48 59 60 48 72 73 82 64 60 id sex age sbp Min. : 1.00 Length:10 Min. :22.00 Min. :109.0 1st Qu.: 3.25 Class :character 1st Qu.:31.75 1st Qu.:118.2 Median : 5.50 Mode :character Median :38.50 Median :122.5 Mean : 5.50 Mean :37.50 Mean :121.5 3rd Qu.: 7.75 3rd Qu.:42.75 3rd Qu.:127.0 Max. :10.00 Max. :54.00 Max. :132.0 height weight Min. :158.0 Min. :48.00 1st Qu.:161.2 1st Qu.:53.75 Median :166.5 Median :60.00 Mean :167.1 Mean :61.80 3rd Qu.:171.0 3rd Qu.:70.00 Max. :182.0 Max. :82.00 # stringsAsFactors = TRUE 인 경우 sex의 summary() 결과 df &lt;- data.frame(id, sex, age, sbp, height, weight, stringsAsFactors = TRUE) summary(df) id sex age sbp height Min. : 1.00 Female:5 Min. :22.00 Min. :109.0 Min. :158.0 1st Qu.: 3.25 Male :5 1st Qu.:31.75 1st Qu.:118.2 1st Qu.:161.2 Median : 5.50 Median :38.50 Median :122.5 Median :166.5 Mean : 5.50 Mean :37.50 Mean :121.5 Mean :167.1 3rd Qu.: 7.75 3rd Qu.:42.75 3rd Qu.:127.0 3rd Qu.:171.0 Max. :10.00 Max. :54.00 Max. :132.0 Max. :182.0 weight Min. :48.00 1st Qu.:53.75 Median :60.00 Mean :61.80 3rd Qu.:70.00 Max. :82.00 summary() 함수는 객체의 클래스에 따라 요약 통계량을 출력해주는 함수 데이터 프레임이 가지고 있는 변수들의 특징을 손쉽게 알아볼 수 있기 때문에 가장 많이 호출되는 함수 중 하나 숫자형 벡터: 최솟값(minimum), 1/4 분위수(1st quantile), 중앙값(median), 평균(mean), 3/4 분위수(3rd quantile), 최댓값을 출력 요인형 객체: 요인의 각 수준 별 빈도를 출력 2차원 이상 table() 객체에 적용 시 \\(\\chi^2\\) 검정(독립성 검정) 결과값을 출력함. 이미 정의된 데이터 프레임에 데이터를 추가 가능 예를 들어 dbp라는 벡터에 이완기 혈압(diastolic blood pressure) 데이터가 입력되어 있고 df에 dbp 변수를 새롭게 추가 시 df$dbp &lt;- x 형태로 추가 위 형태로 이미 존재하고 있는 변수(열)에 새로운 값 재할당 가능 이러한 형태로 문자형 벡터 추가 시 문자형 벡터는 자동으로 factor로 형 변환 되지는 않음 x &lt;- 1:nrow(df) dbp &lt;- c(73, 70, 88, 82, 75, 77, 74, 81, 72, 64) # df에 &quot;dbp&quot; 열을 생성하고 x 값 대입 df$dbp &lt;- x df # df의 dbp에 dbp 벡터의 값을 재할당 df$dbp &lt;- dbp df # df에 운동여부 exercyn 라는 변수 추가 # exercyn 는 &quot;Y&quot; 또는 &quot;N&quot; 두 값을 가짐 df$exercyn &lt;- c(&quot;Y&quot;, &quot;Y&quot;, &quot;N&quot;, &quot;Y&quot;, &quot;N&quot;, &quot;N&quot;, &quot;N&quot;, &quot;Y&quot;, &quot;N&quot;, &quot;Y&quot;) str(df) &#39;data.frame&#39;: 10 obs. of 8 variables: $ id : int 1 2 3 4 5 6 7 8 9 10 $ sex : Factor w/ 2 levels &quot;Female&quot;,&quot;Male&quot;: 1 1 1 1 1 2 2 2 2 2 $ age : num 34 22 54 43 44 39 38 28 31 42 $ sbp : num 112 118 132 128 128 124 121 119 124 109 $ height : num 165 158 161 160 168 172 175 182 168 162 $ weight : num 52 48 59 60 48 72 73 82 64 60 $ dbp : num 73 70 88 82 75 77 74 81 72 64 $ exercyn: chr &quot;Y&quot; &quot;Y&quot; &quot;N&quot; &quot;Y&quot; ... 행렬 및 벡터에서 언급 되었던 rownames(), colnames(), names(), dim(), ncol()/NCOL(),nrow()/NROW() 함수 적용 가능 rownames(df); colnames(df); names(df) [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; &quot;5&quot; &quot;6&quot; &quot;7&quot; &quot;8&quot; &quot;9&quot; &quot;10&quot; [1] &quot;id&quot; &quot;sex&quot; &quot;age&quot; &quot;sbp&quot; &quot;height&quot; &quot;weight&quot; &quot;dbp&quot; [8] &quot;exercyn&quot; [1] &quot;id&quot; &quot;sex&quot; &quot;age&quot; &quot;sbp&quot; &quot;height&quot; &quot;weight&quot; &quot;dbp&quot; [8] &quot;exercyn&quot; dim(df); ncol(df); nrow(df) [1] 10 8 [1] 8 [1] 10 # rownames() 함수를 통해 행이름 변경 rownames(df) &lt;- letters[1:10] df #colnames() 함수를 통해 열 이름 변경 varname_orig &lt;- colnames(df) colnames(df) &lt;- paste0(&quot;V&quot;, 1:ncol(df)) df # names() 함수와 colnames()는 거의 동일한 기능 수행 # 두 함수의 차이점? names(df) [1] &quot;V1&quot; &quot;V2&quot; &quot;V3&quot; &quot;V4&quot; &quot;V5&quot; &quot;V6&quot; &quot;V7&quot; &quot;V8&quot; names(df) &lt;- varname_orig df 참고: R Markdown에서 데이터 프레임의 데이터를 손쉽게 테이블로 출력하는 방법(html 문서) R Markdwon의 YAML 부분에 다음과 같이 옵션을 추가하면 별다른 함수 처리 없이 데이터 프레임을 표 형태로 html 문서에 붙일 수 있음. 아래 예시에서 output 이후 df_print: paged 옵션을 추가 옵션 추가 시 들여쓰기(탭 구분)은 YAML 문서의 트리 구조를 표현한 것이기 때문에 꼭 들여쓰기를 정확히 일치시켜야 함 --- title: &quot;문서 제목&quot; author: &quot;이름&quot; date: &quot;`r Sys.Date()`&quot; output: html_document: df_print: paged --- 2.8.2 데이터 프레임 접근 및 필터링 접근방법 리스트 데이터 접근 방식 # 추출(접근) 연산자(함수) `df$col_name` 형태로 접근 df$height [1] 165 158 161 160 168 172 175 182 168 162 # df[[index]] 또는 df[[&quot;col_name&quot;]] 형태로 접근 df[[4]] [1] 112 118 132 128 128 124 121 119 124 109 df[[&quot;sex&quot;]] [1] Female Female Female Female Female Male Male Male Male Male Levels: Female Male w &lt;- df[[4]] attributes(w); str(w) NULL num [1:10] 112 118 132 128 128 124 121 119 124 109 # df[index] 또는 df[&quot;col_name&quot;] 형태로 접근 h &lt;- df[&quot;height&quot;] attributes(h); str(h) $names [1] &quot;height&quot; $row.names [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot; &quot;g&quot; &quot;h&quot; &quot;i&quot; &quot;j&quot; $class [1] &quot;data.frame&quot; &#39;data.frame&#39;: 10 obs. of 1 variable: $ height: num 165 158 161 160 168 172 175 182 168 162 행렬 데이터 접근 방식 # df[idx_row, idx_col] 또는 df[row_name, col_name] # 형태 데이터 접근 # 열 index 접근 df[, 3]; [1] 34 22 54 43 44 39 38 28 31 42 # 형 강제 변환 방지 df[, 3, drop = FALSE] # 행 index 접근 df[8, ] # 행과 열 index 접근 df[1:4, 5:6] # 열 이름으로 접근 df[, c(&quot;sex&quot;, &quot;sbp&quot;)] # 행 이름으로 접근 df[c(&quot;d&quot;, &quot;e&quot;, &quot;f&quot;), ] # 행과 열 이름으로 접근 df[c(&quot;a&quot;, &quot;f&quot;), c(&quot;sex&quot;, &quot;height&quot;, &quot;dbp&quot;)] # 행 또는 열 제외 df[-c(2:6), ] df[-c(1, 5:7), -c(1, 8)] 필터링 벡터, 행렬과 마찬가지로 비교 연산자를 이용해 조건에 맞는 부분 데이터 추출 가능 # %in% 연산자를 이용해 데이터 프레임의 부분 변수 추출 # id, age 열을 제외한 나머지 데이터 프레임 추출 varname_df &lt;- names(df) df[, !varname_df %in% c(&quot;id&quot;, &quot;age&quot;)] # 조건 연산자 사용 # sex 가 Female이고 나이가 40 이상인 데이터 추출 df[df$sex == &quot;Female&quot; &amp; df$age &gt;= 40, ] # id가 3보다 작은 데이터 추출 df[df[, 1] &lt; 3, ] # subset 함수 이용한 데이터 추출 # sbp 가 120 이상이고 dbp 가 80 이상인 데이터 추출 subset(df, sbp &gt;= 120 &amp; dbp &gt;= 80) # 성별, 수축기, 이완기 혈압 변수만 추출 subset(df, select = c(sex, sbp, dbp)) # id 변수 제거 subset(df, select = -c(id)) 데이터 프레임 또는 리스트 접근 시 df$col_name 를 사용한다면 매번 데이터 프레임 이름과 $을 반복하기 때문에 코드가 불필요하게 복잡해짐. R에서는 데이터 프레임 내부의 열 이름을 직접 접근할 수 있도록 도와주는 몇 가지 함수(예: with(), attach() 등)가 있는데, with()와 within() 활용법에 대해 간략히 알아봄. 위 예제에서 sex 가 Female이고 나이가 40 이상인 데이터 추출한다고 했을 때 with() 함수 사용 # with() 함수: 데이터 환경(객체 내)에서 주어진 표현식의 결과를 반환 with( data, #리스트 또는 데이터 프레임 expr, # 실제 명령을 수행할 표현식, ) with(df, df[sex == &quot;Female&quot; &amp; age &gt;= 40, ]) within() 함수는 with()와 유사하지만 코드블록({...})을 이용해 보다 자유롭게 데이터를 수정 및 추가할 수 있음 df2 &lt;- within(df, { hospital &lt;- c(&quot;A&quot;, &quot;B&quot;, &quot;B&quot;, &quot;A&quot;, &quot;C&quot;, &quot;A&quot;, &quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;B&quot;) mean_age &lt;- mean(age) }) 2.8.3 데이터 프레임 관련 함수 유틸리티 함수 보통 데이터 분석은 외부에서 데이터를 읽은 후 특정 객체에 읽어온 데이터를 할당하는데, 이 경우 데이터가 저장된 객체는 대부분은 데이터 프레임 형태임. 읽어온 데이터는 보통 많은 행(표본)으로 구성되어 있기 때문에 데이터를 손쉽게 살펴보는 방법이 필요 head()/tail() 함수 객체(벡터, 행렬, 테이블, 데이터 프레임 등)의 처음 또는 끝에서 부터 몇 개의 데이터(default = 6L) 를 순차적으로 보여줌 # 앞에서 불러온 전복 데이터셋 확인 dim(abalone) [1] 4177 9 #처음 1에서 6행 까지 데이터 출력 head(abalone) # 제일 마지막 행부터 위로 6개 데이터 까지 출력 tail(abalone) View() 함수 2차원 데이터의 readble 한 스프레드시트 제공 View(abalone) 데이터 프레임 결합 및 분리 함수 rbind()/cbind() 함수 행렬에서 사용한 rbind()/cbind()를 데이터 프레임에도 적용 가능 a = data.frame(x1 = rep(0,5), x2 = rep(&quot;x&quot;,5)) b = data.frame(x1 = rep(1,5), x2 = rep(&quot;d&quot;,5)) c = data.frame(x3 = rep(2,5), x4 = rep(&quot;z&quot;,5)) d &lt;- list(1, &quot;d&quot;) e &lt;- list(x5 = rep(4, 5), x6 = rep(&quot;y&quot;, 5)) # rbind()를 이용해 두 데이터 프레임 a-b 합치기 ab &lt;- rbind(a, b) ab # 변수명이 다른 경우 rbind(a, c) #변수명이 다르기때문에 행으로 묶을 수 없다. Error in match.names(clabs, names(xi)): names do not match previous names # rbind()를 이용해 데이터 프레임-리스트 합치기 abd &lt;- rbind(ab, d) abd # cbind()를 이용해 두 데이터 프레임 a-c 합치기 ac &lt;- cbind(a, c) ac # 행 길이가 다르면 작은 길이의 데이터를 재사용 cbind(a, d) # cbind()를 이용해 두 데이터 프레임-리스트 합치기 ace &lt;- cbind(ac, e) merge() 함수 두 데이터 프레임을 공통된 값을 기준으로 병합 Excel의 vlookup() 함수 또는 데이터베이스 SQL 쿼리 중 join과 동일한 역할을 함 cbind()의 경우는 단순히 열을 합치는 것이지만 merge()는 공통되는 열을 기준으로 두 데이터셋을 병합 공통된 데이터가 있을 때만 데이터 병합 수행 # merge() 함수 인수 merge( x, # 병합할 데이터 프레임 y, # 병합할 데이터 프레임 by, # 병합 기준으로 사용할 컬럼 (문자열 벡터) by.x, # 병합에 사용할 x와 y의 열 이름이 다른 경우 by.y, # by.x와 by.y에 각각 공통 데이터에 해당하는 열 이름 지정 # 둘 다 문자형 스칼라 또는 벡터값 인수로 받음 all, # 논리값 이순 # TRUE인 경우 x, y 중 공통된 값을 갖는 행이 없을 때 # 해당 쪽을 NA를 채워 병합 # 결과적으로 x, y 전체 행이 결과에 포함 all.x, # x,y 중 특정 쪽에 공통된 값이 없더라도 항상 all.y, # 결과에 포함 ) merge() 함수 예시 d1 = data.frame(Name = c(&quot;Park&quot;, &quot;Hanzo&quot;, &quot;Mercy&quot;, &quot;Soldier76&quot; ), country = c(&quot;Korea&quot;, &quot;Japan&quot;, &quot;Swiss&quot;, &quot;USA&quot;)) d2 = data.frame(Age = c(19,38,37,56,31), Name = c(&quot;Park&quot;, &quot;Hanzo&quot;, &quot;Mercy&quot;, &quot;Soldier76&quot;,&quot;Mei&quot; ) ) d1; d2 dim(d1); dim(d2) [1] 4 2 [1] 5 2 # 두 데이터 병합 01 merge(d1, d2, by = &quot;Name&quot;) # 두 데이터 병합 02 names(d2)[2] &lt;- &quot;Surname&quot; merge(d1, d2, by.x = &quot;Name&quot;, by.y = &quot;Surname&quot;) # 두 데이터 병합 03 merge(d1, d2, by.x = &quot;Name&quot;, by.y = &quot;Surname&quot;, all = T) split() 함수 Factor 형에서 언급한 split() 함수를 통해 그룹 별로 데이터 분할 분할된 데이터는 리스트에 저장 split(df, df$sex) $Female id sex age sbp height weight dbp exercyn a 1 Female 34 112 165 52 73 Y b 2 Female 22 118 158 48 70 Y c 3 Female 54 132 161 59 88 N d 4 Female 43 128 160 60 82 Y e 5 Female 44 128 168 48 75 N $Male id sex age sbp height weight dbp exercyn f 6 Male 39 124 172 72 77 N g 7 Male 38 121 175 73 74 N h 8 Male 28 119 182 82 81 Y i 9 Male 31 124 168 64 72 N j 10 Male 42 109 162 60 64 Y 데이터 정렬 함수 sort() 함수 데이터(벡터)의 정렬(오름차순 또는 내림차순) 결과 반환 # sort() 함수 인수 sort( x, # 정렬할 벡터 decreasing, # 논리값, 내림차순 여부 # default = FALSE na.last # 논리값. 결측 존재 시 NA 값 위치 지정 ) # TRUE: 정렬 후 결측은 마지막에 위치 # FALSE: 맨 처음 NA 위치 예시 # 오름차순 정렬 sort(df2$age) [1] 22 28 31 34 38 39 42 43 44 54 # 내림차순 정렬 sort(df$height, decreasing = TRUE) [1] 182 175 172 168 168 165 162 161 160 158 order() 함수 데이터 정렬을 위해 순서에 대한 색인 생성 결과 반환 데이터 프레임에서 특정 열 기준으로 데이터 정렬 시 주로 사용 # 나이 기준으로 오름차순으로 데이터 정렬 with(df, df[order(age), ]) # 키 순으로 내림차순 정렬 df[order(df$height, decreasing = T), ] 2.8.4 *apply() 계열 함수 apply(), lapply(), sapply() 등 apply 계열 함수는 R에서 가장 일반적으로 사용되는 함수 중 하나 반복문(for-loop)를 대신하기 위해 활용되며, R 객체를 입력 받아 원소 별 혹은 그루 별 함수를 적용 데이터 전체에 함수를 한번에 적용하는 vectorizing 연산을 수행함 apply() 함수 배열 또는 행렬에 주어진 함수를 적용한 뒤 그 결과를 벡터 또는 리스트로 반환 행 또는 열 차원 기준 함수 적용 동일한 유형의 벡터로 구성된 데이터셋에 적용 apply( X, # 배열, 행렬, 또는 같은 형태로 정의된 데이터 프레임 MARGIN, # MARGIN = 1: 행 기준 # MARGIN = 2: 열 기준 # MARGIN = c(1,2): 행과 열 방향 모두 FUN # 적용할 함수 ) 예시1: 행렬 및 배열 apply() 적용 X &lt;- matrix(1:9, nrow = 3) X [,1] [,2] [,3] [1,] 1 4 7 [2,] 2 5 8 [3,] 3 6 9 # 행 기준으로 합계 계산 apply(X, 1, sum) [1] 12 15 18 # 열 기준으로 합계 계산 apply(X, 2, sum) [1] 6 15 24 # 배열에 apply 적용 # 각 학생의 퀴즈와 중간-기말 각각 평균 계산 Z # 성적 , , 1 [,1] [,2] [1,] 75 65 [2,] 84 78 [3,] 93 92 , , 2 [,1] [,2] [1,] 82 88 [2,] 78 75 [3,] 85 88 apply(Z, c(1,2), mean) [,1] [,2] [1,] 78.5 76.5 [2,] 81.0 76.5 [3,] 89.0 90.0 # 각 시점 별 개별 학생의 퀴즈-중간, 퀴즈-기말 평균 계산 apply(Z, c(1, 3), mean) [,1] [,2] [1,] 70.0 85.0 [2,] 81.0 76.5 [3,] 92.5 86.5 예시2: 데이터 프레임 위에서 사용한 df와 2.7.1 요인(factor) 절에서 잠깐 예시로 사용된 전복(abalone) 데이터셋 사용 Abalone dataset 변수 설명(코드북) names(abalone) &lt;- c(&quot;sex&quot;, &quot;length&quot;, &quot;diameter&quot;, &quot;height&quot;, &quot;whole.wt&quot;, &quot;shucked.wt&quot;, &quot;viscera.wt&quot;, &quot;shell.wt&quot;, &quot;rings&quot;) head(abalone) # sex를 제외한 나머지 수치형 변수에 대한 기초통계량 계산 # 평균: mean() 함수 사용 apply(abalone[, -1], 2, mean) length diameter height whole.wt shucked.wt viscera.wt shell.wt 0.5239921 0.4078813 0.1395164 0.8287422 0.3593675 0.1805936 0.2388309 rings 9.9336845 # 표준편차: sd() 함수 사용 apply(abalone[, -1], 2, sd) length diameter height whole.wt shucked.wt viscera.wt shell.wt 0.12009291 0.09923987 0.04182706 0.49038902 0.22196295 0.10961425 0.13920267 rings 3.22416903 # 개별 전복에 대해 내장, 육질, 껍질 무게 합계 계산 apply(abalone[, c(&quot;shucked.wt&quot;, &quot;viscera.wt&quot;, &quot;shell.wt&quot;)], 1, sum) -&gt; ab_wt_sum head(ab_wt_sum, 10) [1] 0.4755 0.2180 0.6080 0.4845 0.1840 0.3385 0.7085 0.7035 0.4940 0.7855 # 데이터에 결측이 포함된 경우 # diameter 변수에 10개의 결측을 임의 생성 set.seed(20200410) idx &lt;- sample(1:NROW(abalone), 10) # 비복원 추출 ab2 &lt;- abalone ab2[idx, 3] &lt;- NA # 성별 제외한 나머지 변수의 평균 계산 apply(ab2[, -1], 2, mean) length diameter height whole.wt shucked.wt viscera.wt shell.wt 0.5239921 NA 0.1395164 0.8287422 0.3593675 0.1805936 0.2388309 rings 9.9336845 # NA 결과를 피하려면? apply(ab2[, -1], 2, mean, na.rm = TRUE) length diameter height whole.wt shucked.wt viscera.wt shell.wt 0.5239921 0.4079578 0.1395164 0.8287422 0.3593675 0.1805936 0.2388309 rings 9.9336845 참고 1: 결측이 포함된 벡터 연산 시 결측에 대한 처리 지정 없이 함수를 적용하면 결측값을 반환 R에서 제공되는 연산 관련 일반 함수는 결측처리에 대한 옵션을 인수로 받음 보통 인수 형태는 na.rm = T/F 형태이고 다음의 함수를 통해 데이터에 결측 처리에 대한 속성 및 클래스를 부여함 na.omit()/na.exclude(): NA가 포함되어 있는 행 생략 위 두 함수는 기본적으로 동일하지만, 특정 함수(예: 회귀분석을 수행하는 lm()) 함수에서는 다른 결과를 출력 참고 2: 위 예제에서 보여준 행 또는 열의 합 또는 평균 계산은 매우 자주 사용되기 때문에 rowSums(), colSums(), rowMeans(), colMeans() 함수가 제공됨 colMeans(abalone[,-1]) # apply 결과와 비교 length diameter height whole.wt shucked.wt viscera.wt shell.wt 0.5239921 0.4078813 0.1395164 0.8287422 0.3593675 0.1805936 0.2388309 rings 9.9336845 tapply() 함수 2.7.1 요인(factor) 절에서 설명 tapply()는 1개의 벡터를 대상으로만 함수를 호출 데이터 프레임에 적용하려면? \\(\\rightarrow\\) aggregate() 함수 사용 aggregate() 데이터를 특정 factor의 수준 별로 나눈 후, 각 그룹마다 함수 적용 aggregate()는 다음 두 가지 형태로 함수 적용 가능 # aggregate() 기본 인수 aggregate( x, # R 객체, 주로 데이터 프레임 by, # 그룹으로 묶을 값의 리스트 FUN, # 그룹별 적용할 함수 ) aggregate( formula, # y ~ x 형태로 y는 계산에 사용할 값 # x는 group 변수 # y 대신 .은 그룹 변수를 제외하고 # 적용할 함수의 대상이 되는 모든 변수 data, # formula를 적용할 데이터 FUN # 적용할 함수 ) 예시: 임상연구 자료(df) # 성별에 따라 연속형 변수의 평균 계산 aggregate(df[,-c(1:2, 8)], by =df[&quot;sex&quot;], mean) # 수식 표현형 사용 aggregate(. ~ sex, data = df[,-8], mean) # 요인이 2개인 경우 aggregate(df[,-c(1:2, 8)], by = list(sex = df[[&quot;sex&quot;]], exercise = df[[&quot;exercyn&quot;]]), mean) aggregate(. ~ sex + exercyn, data = df[,-1], mean) lapply() 함수 특정 함수를 벡터, 리스트, 데이터 프레임 등에 적용하고 그 결과를 리스트로 반환 lapply( X, #벡터, 리스트, 표현식, 또는 데이터 프레임 FUN, # 적용할 함수 ) -예시: abalone 데이터를 사용해 일변량 회귀분석 실시 # abalone 데이터를 이용해 단순회귀분석 결과 출력 # 종속변수: rings # 설명변수: 성별을 제외한 모든 연속형 변수 # lm() 함수를 이용한 일변량 회귀분석 실시 univ_reg &lt;- lapply(abalone[,-c(1, 9)], function(x) lm(abalone$rings ~ x)) # univ_reg # 위 객체로부터 회귀모형 요약 통계량 결과 summ_reg &lt;- lapply(univ_reg, summary) # summ_reg # 추정 회귀계수를 데이터로 저장 ## summary(lm_object)의 속성 파악 str(summ_reg[[1]]) List of 11 $ call : language lm(formula = abalone$rings ~ x) $ terms :Classes &#39;terms&#39;, &#39;formula&#39; language abalone$rings ~ x .. ..- attr(*, &quot;variables&quot;)= language list(abalone$rings, x) .. ..- attr(*, &quot;factors&quot;)= int [1:2, 1] 0 1 .. .. ..- attr(*, &quot;dimnames&quot;)=List of 2 .. .. .. ..$ : chr [1:2] &quot;abalone$rings&quot; &quot;x&quot; .. .. .. ..$ : chr &quot;x&quot; .. ..- attr(*, &quot;term.labels&quot;)= chr &quot;x&quot; .. ..- attr(*, &quot;order&quot;)= int 1 .. ..- attr(*, &quot;intercept&quot;)= int 1 .. ..- attr(*, &quot;response&quot;)= int 1 .. ..- attr(*, &quot;.Environment&quot;)=&lt;environment: 0x5624355106c0&gt; .. ..- attr(*, &quot;predvars&quot;)= language list(abalone$rings, x) .. ..- attr(*, &quot;dataClasses&quot;)= Named chr [1:2] &quot;numeric&quot; &quot;numeric&quot; .. .. ..- attr(*, &quot;names&quot;)= chr [1:2] &quot;abalone$rings&quot; &quot;x&quot; $ residuals : Named num [1:4177] 6.0975 -0.3331 -1.0235 1.3217 -0.0342 ... ..- attr(*, &quot;names&quot;)= chr [1:4177] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; ... $ coefficients : num [1:2, 1:4] 2.102 14.946 0.186 0.345 11.328 ... ..- attr(*, &quot;dimnames&quot;)=List of 2 .. ..$ : chr [1:2] &quot;(Intercept)&quot; &quot;x&quot; .. ..$ : chr [1:4] &quot;Estimate&quot; &quot;Std. Error&quot; &quot;t value&quot; &quot;Pr(&gt;|t|)&quot; $ aliased : Named logi [1:2] FALSE FALSE ..- attr(*, &quot;names&quot;)= chr [1:2] &quot;(Intercept)&quot; &quot;x&quot; $ sigma : num 2.68 $ df : int [1:3] 2 4175 2 $ r.squared : num 0.31 $ adj.r.squared: num 0.31 $ fstatistic : Named num [1:3] 1875 1 4175 ..- attr(*, &quot;names&quot;)= chr [1:3] &quot;value&quot; &quot;numdf&quot; &quot;dendf&quot; $ cov.unscaled : num [1:2, 1:2] 0.0048 -0.0087 -0.0087 0.0166 ..- attr(*, &quot;dimnames&quot;)=List of 2 .. ..$ : chr [1:2] &quot;(Intercept)&quot; &quot;x&quot; .. ..$ : chr [1:2] &quot;(Intercept)&quot; &quot;x&quot; - attr(*, &quot;class&quot;)= chr &quot;summary.lm&quot; summ_reg[[1]]$coefficients Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 2.101883 0.1855477 11.32800 2.544353e-29 x 14.946411 0.3451570 43.30323 0.000000e+00 # summ_reg에서 coefficients만 추출 res &lt;- lapply(summ_reg, function(lst) lst$coefficients) res $length Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 2.101883 0.1855477 11.32800 2.544353e-29 x 14.946411 0.3451570 43.30323 0.000000e+00 $diameter Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 2.318574 0.1727366 13.42260 3.01241e-40 x 18.669921 0.4114954 45.37091 0.00000e+00 $height Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 3.938464 0.1442530 27.30248 3.678478e-151 x 42.971441 0.9904086 43.38759 0.000000e+00 $whole.wt Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 6.989239 0.08244313 84.77648 0.000000e+00 x 3.552909 0.08561680 41.49780 1.888678e-315 $shucked.wt Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 7.736643 0.0861330 89.82206 0.000000e+00 x 6.113633 0.2039254 29.97976 5.087464e-179 $viscera.wt Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 7.257427 0.08306853 87.36674 0.000000e+00 x 14.819227 0.39322428 37.68645 8.574726e-268 $shell.wt Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 6.462117 0.07714642 83.76431 0 x 14.535675 0.27908233 52.08382 0 # res 결과를 2차원 배열 형태로 변환 # do.call() 함수 사용 # 리스트로 주어진 인자에 함수를 적용하여 결과 반환 res &lt;- do.call(rbind, res) res Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 2.101883 0.18554766 11.32800 2.544353e-29 x 14.946411 0.34515697 43.30323 0.000000e+00 (Intercept) 2.318574 0.17273658 13.42260 3.012410e-40 x 18.669921 0.41149538 45.37091 0.000000e+00 (Intercept) 3.938464 0.14425297 27.30248 3.678478e-151 x 42.971441 0.99040860 43.38759 0.000000e+00 (Intercept) 6.989239 0.08244313 84.77648 0.000000e+00 x 3.552909 0.08561680 41.49780 1.888678e-315 (Intercept) 7.736643 0.08613300 89.82206 0.000000e+00 x 6.113633 0.20392536 29.97976 5.087464e-179 (Intercept) 7.257427 0.08306853 87.36674 0.000000e+00 x 14.819227 0.39322428 37.68645 8.574726e-268 (Intercept) 6.462117 0.07714642 83.76431 0.000000e+00 x 14.535675 0.27908233 52.08382 0.000000e+00 sapply() 힘수 lapply() 함수와 유사하나(lapply()의 wrapper 함수), 결과를 벡터 또는 행렬로 반환하는 점에서 차이를 보임 예시: 회귀분석 # 각 변수별 회귀계수(절편항과 설명변수) 반환 univ_reg2 &lt;- sapply(abalone[,-c(1, 9)], function(x) { coef(lm(abalone$rings ~ x)) # lm 클래스에서 회귀계수 반환 }) univ_reg2 length diameter height whole.wt shucked.wt viscera.wt (Intercept) 2.101883 2.318574 3.938464 6.989239 7.736643 7.257427 x 14.946411 18.669921 42.971441 3.552909 6.113633 14.819227 shell.wt (Intercept) 6.462117 x 14.535675 attributes(univ_reg2) # 행렬 반환 $dim [1] 2 7 $dimnames $dimnames[[1]] [1] &quot;(Intercept)&quot; &quot;x&quot; $dimnames[[2]] [1] &quot;length&quot; &quot;diameter&quot; &quot;height&quot; &quot;whole.wt&quot; &quot;shucked.wt&quot; [6] &quot;viscera.wt&quot; &quot;shell.wt&quot; # as.data.frame(univ_reg2) mapply() 함수 sapply()와 유사하지만 다수의 인수를 함수에 전달해 적용 임의의 함수 FUN()이 있고, FUN()을 수행하기 위해 필요한 인수가 데이터로 저장되어 있을 때 이를 불러들여 함수를 적용 mapply( FUN, # 적용할 함수 ..., # 적용할 인수 ) 난수 생성 예시: rnorm() 함수 사용 rnorm(n, mean, sd): 평균이 mean이고 표준편차가 sd인 정규분포에서 n개의 난수 생성 # 평균이 각각 0, 1, 2, 4 이고 # 표준편차가 1, 1, 1, 1 인 정규난수를 # 각각 20, 40, 60, 100 개 생성 rn_res &lt;- mapply(rnorm, c(20, 40, 60, 100), c(0:2, 4), rep(1, 4)) # rn_res # 생성한 난수의 평균과 표준편차 확인 sapply(rn_res, mean); sapply(rn_res, sd) [1] 0.1277941 0.8607565 1.9070456 3.9012846 [1] 0.8954115 0.7916029 0.9990486 0.9088889 "],["is-as-function.html", "2.9 객체의 유형 판별 및 변환", " 2.9 객체의 유형 판별 및 변환 지금까지 R 객체를 알아보면서 is.na(), is.null() 등 스칼라의 데이터 타입을 확인하는 함수부터 str(), attributes(), class()와 같이 객체의 속성 및 구조에 대해 확인하는 함수들에 대해 간략히 소개함. R은 스크립트 언어이기 때문에 모든 명령 실행이 함수 기반으로 이루어짐. 특정 객체에만 적용할 수 있는 함수들이 있는 반면, 함수를 통해 새로운 속성을 갖는 객체가 생성되기도 함. 그렇기 때문에 함수 적용 또는 반환 후 생성된 객체의 타입을 확인하거나 객체의 유형을 변환하는 작업은 R에서 데이터 분석을 진행하는 과정에서 빈번하게 발생함. 객체 유형 판별을 위해 is.type_name(), 객체 타입 변환을 위해 as.type_name() 형태의 함수를 제공함. 지금까지 배운 R 객체에 대한 is. 과 as. 계열 함수는 아래와 같음. Table 2.7: R 객체 타입 판별 및 변환 함수 is 계열 함수 as 계열 함수 설명 is.factor() as.factor() 주어진 객체가 factor 형인지 판단/변환 is.ordered() as.ordered 주어진 객체가 순서형 factor인지 판단/변환 is.numeric() as.numeric() 주어진 객체가 수치형인지 판단/변환 is.character() as.character() 주어진 객체가 문자형인지 판단/변환 is.matrix() as.matrix() 주어진 객체가 행렬인지 판단/변환 is.array() as.array() 주어진 객체가 배열인지 판단/변환 is.list() as.list() 주어진 객체가 리스트인지 판단/변환 is.data.frame() as.data.frame() 주어진 객체가 데이터 프레임인지 판단/변환 is/as계열 함수 사용 예시 x &lt;- c(&quot;M&quot;, &quot;F&quot;); f &lt;- factor(x) # x가 문자열인가? is.character(x) [1] TRUE # f가 factor인가? is.factor(f) [1] TRUE #f가 숫자형인가? is.numeric(f) [1] FALSE # f를 수치형으로 변환 f &lt;- as.numeric(f) is.numeric(f) [1] TRUE f [1] 2 1 # 다시 f를 factor형으로 변환 as.factor(f) [1] 2 1 Levels: 1 2 2차원 데이터 객체 유형 판별 및 변환 X &lt;- matrix(rnorm(9), 3) d &lt;- data.frame(group = rep(LETTERS[1:3], each = 2), meas = c(mapply(rnorm, c(2, 2, 2), c(1, 2, 3), c(1, 1, 1)))) # 객체 유형 확인 is.matrix(X); is.data.frame(X) [1] TRUE [1] FALSE is.matrix(d); is.data.frame(d) [1] FALSE [1] TRUE # 객체 유형 변환 as.data.frame(X); as.matrix(d) group meas [1,] &quot;A&quot; &quot;2.028870&quot; [2,] &quot;A&quot; &quot;1.996936&quot; [3,] &quot;B&quot; &quot;2.835169&quot; [4,] &quot;B&quot; &quot;1.105901&quot; [5,] &quot;C&quot; &quot;1.095014&quot; [6,] &quot;C&quot; &quot;2.927883&quot; as.list(X); as.list(d) [[1]] [1] 0.3288415 [[2]] [1] 0.2479955 [[3]] [1] -0.7521625 [[4]] [1] -0.02180829 [[5]] [1] 1.354002 [[6]] [1] -0.1578651 [[7]] [1] -0.3734678 [[8]] [1] -2.285178 [[9]] [1] -1.143963 $group [1] &quot;A&quot; &quot;A&quot; &quot;B&quot; &quot;B&quot; &quot;C&quot; &quot;C&quot; $meas [1] 2.028870 1.996936 2.835169 1.105901 1.095014 2.927883 "],["string-regexp.html", "3 문자열 처리와 정규표현식", " 3 문자열 처리와 정규표현식 학습 목표 텍스트 문자 처리에 있어 가장 기본인 정규 표현식(regular rexpression)에 대해 알아본다. R에서 기본으로 제공하는 문자열 차리 함수에 대해 알아본다 학습 필요성 실제 데이터는 다양한 형태의 텍스트(문자열)을 포함 R에서 문자열을 이용한 반복 계산 가능 대규모 텍스트 데이터(웹문서, 블로그, SNS, 뉴스, 논문, 상품평, …)로부터 새로운 정보 및 지식을 도출하기 위한 텍스트 처리에 대한 기본적 이해 여러 문자열로 이루어진 방대한 텍스트 벡터에서 특정 패턴을 갖고 있는 구문을 선별해야 할 경우, 패턴을 도식화 할 수 있는 함축적 표현 필요 \\(\\rightarrow\\) 정규 표현식 정규 표현식의 기본함수 grep(), grepl(): 문자형 벡터에서 정규 표현식 또는 문자 패턴의 일치를 검색. grep(): 일치하는 특정 문자열을 포함하는 문자형 벡터 또는 인덱스를 반환 grepl(): 문자열 포함 여부에 대한 논리값 반환 regexpr(), gregexpr(): 문자형 벡터에서 정규 표현식 또는 문자열 패턴과 일치하는 원소를 검색하고, 일치가 시작되는 문자열의 인덱스와 일치 길이를 반환 sub(), gsub(): 문자열 벡터에서 정규 표현식 또는 문자열 패턴과 일치하는 원소를 검색하고 해당 문자열을 다른 문자열로 변경 regexec(): regexpr()와 동일하게 일치가 시작되는 문자열의 인덱스를 반환하지만 괄호로 묶인 하위 표현식의 위치를 추가로 반환 정규 표현식 및 문자열 처리를 위한 함수의 종류는 매우 다양하지만, 본 강의에서는 정규 표현식의 이해를 위해 일부만 소개할 것임 문자열 기초 탈출 지시자(escape indicator): \\ 키보드로 입력할 수 없는 문자를 입력하기 위해 사용 문자열에 백슬래쉬 \\를 입력하려면 \\\\로 표시 # 문자열에 따옴표(single of double quote, &#39;, &quot;) 입력 double_quote &lt;- &quot;\\&quot;&quot; double_quote [1] &quot;\\&quot;&quot; single_quote &lt;- &#39;\\&#39;&#39; single_quote [1] &quot;&#39;&quot; x &lt;- c(&quot;\\&quot;&quot;, &quot;\\\\&quot;, &#39;\\&#39;&#39;) writeLines(x) &quot; \\ &#39; # 백슬레쉬가 포함된 문자열 x &lt;- &quot;abc\\n\\tabc&quot; # \\n: Enter # \\t: tab 문자를 표현 writeLines(x) abc abc # 특수문자 표현 x &lt;- &quot;\\u00b5&quot; # 그리스 문자 mu 표현 (유니코드) x [1] &quot;µ&quot; 참고자료 Youtube 동영상: 영어 강의가 옥의 티… regexr.com: 정규 표현식의 패턴 확인 가능 Wikibooks R programming: Text processing "],["유용한-문자열-관련-함수.html", "3.1 유용한 문자열 관련 함수", " 3.1 유용한 문자열 관련 함수 3.1.1 nchar() 인간이 눈으로 읽을 수 있는 문자의 개수(길이)를 반환 공백, 줄바꿈 표시자(예: \\n)도 하나의 문자 개수로 인식 한글의 한 글자는 2 바이트(byte)지만 한 글자로 인식 \\(\\rightarrow\\) byte 단위 반환 가능 # 문자열을 구성하는 문자 개수 반환 nchar( x, # 문자형 벡터 type # &quot;bytes&quot;: 바이트 단위 길이 반환 # &quot;char&quot;: 인간이 읽을 수 있는 글자 길이 반환 # &quot;width&quot;: 문자열이 표현된 폭의 길이 반환 ) 예시 x &lt;- &quot;Carlos Gardel&#39;s song: Por Una Cabeza&quot; nchar(x) [1] 36 y &lt;- &quot;abcde\\nfghij&quot; nchar(y) [1] 11 z &lt;- &quot;양준일: 가나다라마바사&quot; nchar(z) [1] 12 # 문자열 벡터 str &lt;- sentences[1:10] nchar(str) [1] 42 43 38 40 36 37 43 43 35 40 s &lt;- c(&quot;abc&quot;, &quot;가나다&quot;, &quot;1234[]&quot;, &quot;R programming\\n&quot;, &quot;\\&quot;R\\&quot;&quot;) nchar(s, type = &quot;char&quot;) [1] 3 3 6 14 3 nchar(s, type = &quot;byte&quot;) [1] 3 9 6 14 3 nchar(s, type = &quot;width&quot;) [1] 3 6 6 14 3 백터의 원소 개수를 반환하는 length() 함수와는 다름. 3.1.2 paste(), paste0() 하나 이상의 문자열을 연결하여 하나의 문자열로 만들어주는 함수 Excel의 문자열 연결자인 &amp;와 거의 동일한 기능을 수행 paste( ..., # 한 개 이상의 R 객체. 강제로 문자형 변환 sep # 연결 구분자: 디폴트 값은 공백(&quot; &quot;) collapse # 묶을 객체가 하나의 문자열 벡터인 경우 # 모든 원소를 collapse 구분자로 묶은 길이가 1인 벡터 반환 ) paste0()은 paste()의 wrapper 함수이고 paste()의 구분자 인수 sep = \"\" 일 때와 동일한 결과 반환 예시 i &lt;- 1:length(letters) paste(letters, i) # sep = &quot; &quot; [1] &quot;a 1&quot; &quot;b 2&quot; &quot;c 3&quot; &quot;d 4&quot; &quot;e 5&quot; &quot;f 6&quot; &quot;g 7&quot; &quot;h 8&quot; &quot;i 9&quot; &quot;j 10&quot; [11] &quot;k 11&quot; &quot;l 12&quot; &quot;m 13&quot; &quot;n 14&quot; &quot;o 15&quot; &quot;p 16&quot; &quot;q 17&quot; &quot;r 18&quot; &quot;s 19&quot; &quot;t 20&quot; [21] &quot;u 21&quot; &quot;v 22&quot; &quot;w 23&quot; &quot;x 24&quot; &quot;y 25&quot; &quot;z 26&quot; paste(letters, i, sep = &quot;_&quot;) # sep = &quot;-&quot; [1] &quot;a_1&quot; &quot;b_2&quot; &quot;c_3&quot; &quot;d_4&quot; &quot;e_5&quot; &quot;f_6&quot; &quot;g_7&quot; &quot;h_8&quot; &quot;i_9&quot; &quot;j_10&quot; [11] &quot;k_11&quot; &quot;l_12&quot; &quot;m_13&quot; &quot;n_14&quot; &quot;o_15&quot; &quot;p_16&quot; &quot;q_17&quot; &quot;r_18&quot; &quot;s_19&quot; &quot;t_20&quot; [21] &quot;u_21&quot; &quot;v_22&quot; &quot;w_23&quot; &quot;x_24&quot; &quot;y_25&quot; &quot;z_26&quot; paste0(letters, i) # paste(letters, i, sep = &quot;&quot;) 동일 [1] &quot;a1&quot; &quot;b2&quot; &quot;c3&quot; &quot;d4&quot; &quot;e5&quot; &quot;f6&quot; &quot;g7&quot; &quot;h8&quot; &quot;i9&quot; &quot;j10&quot; &quot;k11&quot; &quot;l12&quot; [13] &quot;m13&quot; &quot;n14&quot; &quot;o15&quot; &quot;p16&quot; &quot;q17&quot; &quot;r18&quot; &quot;s19&quot; &quot;t20&quot; &quot;u21&quot; &quot;v22&quot; &quot;w23&quot; &quot;x24&quot; [25] &quot;y25&quot; &quot;z26&quot; # collapse 인수 활용 paste(letters, collapse = &quot;&quot;) [1] &quot;abcdefghijklmnopqrstuvwxyz&quot; writeLines(paste(str, collapse = &quot;\\n&quot;)) The birch canoe slid on the smooth planks. Glue the sheet to the dark blue background. It&#39;s easy to tell the depth of a well. These days a chicken leg is a rare dish. Rice is often served in round bowls. The juice of lemons makes fine punch. The box was thrown beside the parked truck. The hogs were fed chopped corn and garbage. Four hours of steady work faced us. Large size in stockings is hard to sell. # 3개 이상 객체 묶기 paste(&quot;Col&quot;, 1:2, c(TRUE, FALSE, TRUE), sep =&quot; &quot;, collapse = &quot;&lt;-&gt;&quot;) [1] &quot;Col 1 TRUE&lt;-&gt;Col 2 FALSE&lt;-&gt;Col 1 TRUE&quot; # paste 함수 응용 # 스트링 명령어 실행 exprs &lt;- paste(&quot;lm(mpg ~&quot;, names(mtcars)[3:5], &quot;, data = mtcars)&quot;) exprs [1] &quot;lm(mpg ~ disp , data = mtcars)&quot; &quot;lm(mpg ~ hp , data = mtcars)&quot; [3] &quot;lm(mpg ~ drat , data = mtcars)&quot; sapply(1:length(exprs), function(i) coef(eval(parse(text = exprs[i])))) [,1] [,2] [,3] (Intercept) 29.59985476 30.09886054 -7.524618 disp -0.04121512 -0.06822828 7.678233 3.1.3 sprintf() C 언어의 sprintf() 함수와 동일하며 특정 변수들의 값을 이용해 문자열을 반환함 수치형 값의 소숫점 자리수를 맞추거나 할 때 유용하게 사용 포맷팅 문자열을 통해 수치형의 자릿수를 지정 뿐 아니라 전체 문자열의 길이 및 정렬 가능 대표적인 포맷팅 문자열은 아래 표와 같음. Format 설명 %s 문자열 %d 정수형 %f 부동 소수점 수 %e, %E 지수형 예시 options()$digits # [1] 7 pi # 파이 값 [1] 3.141593 sprintf(&quot;%f&quot;, pi) [1] &quot;3.141593&quot; # 소숫점 자리수 3자리 까지 출력 sprintf(&quot;%.3f&quot;, pi) [1] &quot;3.142&quot; # 소숫점 출력 하지 않음 sprintf(&quot;%1.0f&quot;, pi) [1] &quot;3&quot; # 출력 문자열의 길이를 5로 고정 후 # 소숫점 한 자리까지 출력 sprintf(&quot;%5.1f&quot;, pi) [1] &quot; 3.1&quot; nchar(sprintf(&quot;%5.1f&quot;, pi)) [1] 5 # 빈 공백에 0값 대입 sprintf(&quot;%05.1f&quot;, pi) [1] &quot;003.1&quot; # 양수/음수 표현 sprintf(&quot;%+f&quot;, pi) [1] &quot;+3.141593&quot; sprintf(&quot;%+f&quot;, -pi) [1] &quot;-3.141593&quot; # 출력 문자열의 첫 번째 값을 공백으로 sprintf(&quot;% f&quot;, pi) [1] &quot; 3.141593&quot; # 왼쪽 정렬 sprintf(&quot;%-10.3f&quot;, pi) [1] &quot;3.142 &quot; # 수치형에 정수 포맷을 입력하면? sprintf(&quot;%d&quot;, pi) Error in sprintf(&quot;%d&quot;, pi): &#39;%d&#39;는 유효하지 않은 포맷입니다; 수치형 객체들에는 포맷 %f, %e, %g 또는 %a를 사용해 주세요 sprintf(&quot;%d&quot;, 100); sprintf(&quot;%d&quot;, 20L) [1] &quot;100&quot; [1] &quot;20&quot; # 지수형 sprintf(&quot;%e&quot;, pi) [1] &quot;3.141593e+00&quot; sprintf(&quot;%E&quot;, pi) [1] &quot;3.141593E+00&quot; sprintf(&quot;%.2E&quot;, pi) [1] &quot;3.14E+00&quot; # 문자열 sprintf(&quot;%s = %.2f&quot;, &quot;Mean&quot;, pi) [1] &quot;Mean = 3.14&quot; # 응용 mn &lt;- apply(cars, 2, mean) std &lt;- apply(cars, 2, sd) # Mean ± SD 형태로 결과 출력 (소숫점 2자리 고정) res &lt;- sprintf(&quot;%.2f \\U00B1 %.2f&quot;, mn, std) resp &lt;- paste(paste0(names(cars), &quot;: &quot;, res), collapse = &quot;\\n&quot;) writeLines(resp) speed: 15.40 ± 5.29 dist: 42.98 ± 25.77 3.1.4 substr() 문자열에서 특정 부분을 추출하는 함수 보통 한 문자열이 주어졌을 때 start에서 end 까지 추출 substr( x, # 문자형 벡터 start, # 문자열 추출 시작 위치 stop # 무자열 추출 종료 위치 ) 예시 cnu &lt;- &quot;충남대학교 자연과학대학 정보통계학과&quot; substr(cnu, start = 14, stop = nchar(str)) [1] &quot;정보통계학과&quot; # 문자열 벡터에서 각 원소 별 적용 substr(str, 5, 15) [1] &quot;birch canoe&quot; &quot; the sheet &quot; &quot; easy to te&quot; &quot;e days a ch&quot; &quot; is often s&quot; [6] &quot;juice of le&quot; &quot;box was thr&quot; &quot;hogs were f&quot; &quot; hours of s&quot; &quot;e size in s&quot; 3.1.5 tolower(), toupper() 대문자를 소문자(tolower()) 혹은 소문자를 대문자(toupper())로 변환 LETTERS; tolower(LETTERS) [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; &quot;E&quot; &quot;F&quot; &quot;G&quot; &quot;H&quot; &quot;I&quot; &quot;J&quot; &quot;K&quot; &quot;L&quot; &quot;M&quot; &quot;N&quot; &quot;O&quot; &quot;P&quot; &quot;Q&quot; &quot;R&quot; &quot;S&quot; [20] &quot;T&quot; &quot;U&quot; &quot;V&quot; &quot;W&quot; &quot;X&quot; &quot;Y&quot; &quot;Z&quot; [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot; &quot;g&quot; &quot;h&quot; &quot;i&quot; &quot;j&quot; &quot;k&quot; &quot;l&quot; &quot;m&quot; &quot;n&quot; &quot;o&quot; &quot;p&quot; &quot;q&quot; &quot;r&quot; &quot;s&quot; [20] &quot;t&quot; &quot;u&quot; &quot;v&quot; &quot;w&quot; &quot;x&quot; &quot;y&quot; &quot;z&quot; letters; toupper(letters) [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot; &quot;g&quot; &quot;h&quot; &quot;i&quot; &quot;j&quot; &quot;k&quot; &quot;l&quot; &quot;m&quot; &quot;n&quot; &quot;o&quot; &quot;p&quot; &quot;q&quot; &quot;r&quot; &quot;s&quot; [20] &quot;t&quot; &quot;u&quot; &quot;v&quot; &quot;w&quot; &quot;x&quot; &quot;y&quot; &quot;z&quot; [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; &quot;E&quot; &quot;F&quot; &quot;G&quot; &quot;H&quot; &quot;I&quot; &quot;J&quot; &quot;K&quot; &quot;L&quot; &quot;M&quot; &quot;N&quot; &quot;O&quot; &quot;P&quot; &quot;Q&quot; &quot;R&quot; &quot;S&quot; [20] &quot;T&quot; &quot;U&quot; &quot;V&quot; &quot;W&quot; &quot;X&quot; &quot;Y&quot; &quot;Z&quot; 3.1.6 glue 패키지를 활용한 문자열 다루기 glue 패키지에서 제공하는 glue() 함수를 통해 지금까지 학습한 paste(), paste0() 보다 손쉽게 문자열을 결합할 수 있음 중괄호({}, curly bracket)를 활용해 R 객체에 저장되어 있는 값과 지정한 문자열을 결합 3.1.6.1 glue 패키지 설치 # CRAN에 배포된 패키지 설치 install.packages(&#39;glue&#39;) # 개발자 버전 설치 install.packages(&quot;devtools&quot;) devtools::install_github(&quot;tidyverse/glue&quot;) 3.1.6.2 사용 방법 R 객체를 직접 문자열과 결합 \\(\\rightarrow\\) 문자열 + {R 객체명} library(glue) 다음의 패키지를 부착합니다: &#39;glue&#39; The following object is masked from &#39;package:dplyr&#39;: collapse name &lt;- &quot;Boncho Ku&quot; glue(&quot;My name is {name}.&quot;) My name is Boncho Ku. 긴 문자열과 R 객체를 결합 시 함수 내 ,로 구분 후 결합 가능 name &lt;- &quot;Boncho Ku&quot; age &lt;- 42 anniversary &lt;- as.Date(&quot;2013-03-24&quot;) glue(&quot;My name is {name}, &quot;, &quot;My age next year is {age + 1}, &quot;, &quot;My wedding aniversary is {anniversary}.&quot;) My name is Boncho Ku, My age next year is 43, My wedding aniversary is 2013-03-24. 함수 내 임시변수를 활용한 문자열 결함 glue(&quot;My name is {name_temp}, &quot;, &quot;My age next year is {age_temp + 1}, &quot;, &quot;My wedding aniversary is {anniversary_temp}.&quot;, name_temp = &quot;Boncho Ku&quot;, age_temp = 42, anniversary_temp = as.Date(&quot;2013-03-24&quot;)) My name is Boncho Ku, My age next year is 43, My wedding aniversary is 2013-03-24. 데이터 프레임 변수에 일괄 적용 가능 dat &lt;- head(iris) glue(&quot;The {dat$Species} has a sepal length {dat$Sepal.Length}&quot;) The setosa has a sepal length 5.1 The setosa has a sepal length 4.9 The setosa has a sepal length 4.7 The setosa has a sepal length 4.6 The setosa has a sepal length 5 The setosa has a sepal length 5.4 단순히 새로 줄바꿈(Enter)으로 두 줄 이상 문자열을 생성 가능 glue(&quot;The first line The second line The third line&quot;) The first line The second line The third line 문장 끝에 \\\\를 붙이면 줄바꿈이 실행되지 않음 glue(&quot;The first line, \\\\ The second line, \\\\ The third line&quot;) The first line, The second line, The third line 이중 중괄호({{}}): {R 객체명}을 그대로 출럭 name &lt;- &quot;Boncho Ku&quot; glue(&quot;My name is {name}, not {{name}}.&quot;) My name is Boncho Ku, not {name}. .open 및 .close를 사용해 대체 구분기호 지정 가능 one &lt;- 1 glue(&quot;The value of $\\\\int (\\\\sqrt{2\\\\pi}\\\\sigma)^{-1}&quot;, &quot;\\\\exp[-(x - \\\\mu)^2/2\\\\sigma^2] dx$&quot;, &quot; is $&lt;&lt;one&gt;&gt;$&quot;, .open = &quot;&lt;&lt;&quot;, .close = &quot;&gt;&gt;&quot;) The value of $\\int (\\sqrt{2\\pi}\\sigma)^{-1}\\exp[-(x - \\mu)^2/2\\sigma^2] dx$ is $1$ 위 문자열을 Rmarkdown 문서에 수식으로 표현하고 싶다면 inline R code chunk 사용 `r glue(\"The value of $\\\\int (\\\\sqrt{2\\\\pi}\\\\sigma)^{-1}\", \"\\\\exp[-(x - \\\\mu)^2/2\\\\sigma^2] dx$\", \" is $&lt;&lt;one&gt;&gt;$\", .open = \"&lt;&lt;\", .close = \"&gt;&gt;\") ` The value of \\(\\int (\\sqrt{2\\pi}\\sigma)^{-1}\\exp[-(x - \\mu)^2/2\\sigma^2] dx\\) is \\(1\\) "],["regexp-basic-fun.html", "3.2 정규표현식 기본 함수", " 3.2 정규표현식 기본 함수 3.2.1 grep(), grepl() 정규표현식을 이용한 특정 문자 패턴 검색 시 가장 빈번히 사용되는 함수들 중 하나임. grep() 특정 문자 벡터에서 찾고자 하는 패턴과 일치하는 원소의 인덱스, 원소값 반환 # 일치하는 특정 문자열을 포함하는 원소값(문자형) 또는 인덱스(정수)를 반환 grep( pattern, # 정규 표현식 또는 문자 패턴 string, # 패턴을 검색할 문자열 벡터 value # 논리값 # TRUE: pattern에 해당하는 원소값 반환 # FALSE: pattern이 있는 원소의 색인 반환 ) x &lt;- c(&quot;Equator&quot;, &quot;North Pole&quot;, &quot;South Pole&quot;) # x에서 Pole 이 있는 원소의 문자열 반환 grep(&quot;Pole&quot;, x, value = T) [1] &quot;North Pole&quot; &quot;South Pole&quot; # x에서 Pole 이 있는 원소의 색인 반환 grep(&quot;Pole&quot;, x, value = F) [1] 2 3 # x에서 Eq를 포함한 원소 색인 반환 grep(&quot;Eq&quot;, x) [1] 1 grepl() grep()과 유사한 기능을 갖지만, 함수의 반환값이 논리형 벡터임 # 일치하는 특정 문자열을 포함하는 원소 색인에 대한 논리값 반환 grepl( pattern, # 정규 표현식 또는 문자 패턴 string # 패턴을 검색할 문자열 벡터 ) 사용 예시 # grepl() 예시 # Titanic data 불러오기 url1 &lt;- &quot;https://raw.githubusercontent.com/&quot; url2 &lt;- &quot;agconti/kaggle-titanic/master/data/train.csv&quot; titanic &lt;- read.csv(paste0(url1, url2), stringsAsFactors = FALSE) # 승객이름 추출 pname &lt;- titanic$Name # 승객 이름이 James 인 사람만 추출 g &lt;- grepl(&quot;James&quot;, pname) pname[g] [1] &quot;Moran, Mr. James&quot; [2] &quot;Crease, Mr. Ernest James&quot; [3] &quot;Sobey, Mr. Samuel James Hayden&quot; [4] &quot;Bateman, Rev. Robert James&quot; [5] &quot;Watt, Mrs. James (Elizabeth \\&quot;Bessie\\&quot; Inglis Milne)&quot; [6] &quot;Smith, Mr. James Clinch&quot; [7] &quot;Brown, Mrs. James Joseph (Margaret Tobin)&quot; [8] &quot;Bracken, Mr. James H&quot; [9] &quot;Reed, Mr. James George&quot; [10] &quot;Baxter, Mrs. James (Helene DeLaudeniere Chaput)&quot; [11] &quot;Drew, Mrs. James Vivian (Lulu Thorne Christian)&quot; [12] &quot;Flynn, Mr. James&quot; [13] &quot;Scanlan, Mr. James&quot; [14] &quot;Webber, Mr. James&quot; [15] &quot;McGough, Mr. James Robert&quot; [16] &quot;Farrell, Mr. James&quot; [17] &quot;Sharp, Mr. Percival James R&quot; [18] &quot;Downton, Mr. William James&quot; [19] &quot;Elsbury, Mr. William James&quot; [20] &quot;Kelly, Mr. James&quot; [21] &quot;Hawksford, Mr. Walter James&quot; [22] &quot;Lester, Mr. James&quot; [23] &quot;Slemen, Mr. Richard James&quot; [24] &quot;Banfield, Mr. Frederick James&quot; 3.2.2 regexpr(), gregexpr() grep()과 grepl()의 한계점 보완: 특정 문자 패턴의 일치여부에 대한 정보를 제공하지만 위치 및 정규식의 일치 여부를 알려주지는 않음 regexpr() 문자열에서 패턴이 일치하는 문자(표현)가 첫 번째 등장하는 위치와 몇 개의 문자로 구성(길이) 되어 있는지를 반환 예시 x &lt;- c(&quot;Darth Vader: If you only knew the power of the Dark Side. Obi-Wan never told you what happend to your father&quot;, &quot;Luke: He told me enough! It was you who killed him!&quot;, &quot;Darth Vader: No. I&#39;m your father&quot;) # grep 계열 함수 grep(&quot;you&quot;, x); grepl(&quot;you&quot;, x) [1] 1 2 3 [1] TRUE TRUE TRUE # regexpr() regexpr(&quot;you&quot;, x) # 각 x의 문자열에서 you가 처음 나타난 위치 및 길이 반환 [1] 17 33 22 attr(,&quot;match.length&quot;) [1] 3 3 3 attr(,&quot;index.type&quot;) [1] &quot;chars&quot; attr(,&quot;useBytes&quot;) [1] TRUE regexpr(&quot;father&quot;, x) # 패턴을 포함하지 않은 경우 -1 반환 [1] 111 -1 27 attr(,&quot;match.length&quot;) [1] 6 -1 6 attr(,&quot;index.type&quot;) [1] &quot;chars&quot; attr(,&quot;useBytes&quot;) [1] TRUE substr() 함수와 regexpr() 함수를 이용해 텍스트 내 원하는 문자 추출 가능 idx &lt;- regexpr(&quot;father&quot;, x) substr(x, idx, idx + attr(idx, &quot;match.length&quot;) - 1) [1] &quot;father&quot; &quot;&quot; &quot;father&quot; gregexpr() 영역에 걸쳐 패턴과 일치하는 문자의 위치 및 길이 반환(regexpr()의 global 버전) gregexpr(&quot;you&quot;, x) # 각 x의 문자열에서 you가 나타난 모든 위치 및 길이 반환 [[1]] [1] 17 86 106 attr(,&quot;match.length&quot;) [1] 3 3 3 attr(,&quot;index.type&quot;) [1] &quot;chars&quot; attr(,&quot;useBytes&quot;) [1] TRUE [[2]] [1] 33 attr(,&quot;match.length&quot;) [1] 3 attr(,&quot;index.type&quot;) [1] &quot;chars&quot; attr(,&quot;useBytes&quot;) [1] TRUE [[3]] [1] 22 attr(,&quot;match.length&quot;) [1] 3 attr(,&quot;index.type&quot;) [1] &quot;chars&quot; attr(,&quot;useBytes&quot;) [1] TRUE gregexpr(&quot;father&quot;, x) # 패턴을 포함하지 않은 경우 -1 반환 [[1]] [1] 111 attr(,&quot;match.length&quot;) [1] 6 attr(,&quot;index.type&quot;) [1] &quot;chars&quot; attr(,&quot;useBytes&quot;) [1] TRUE [[2]] [1] -1 attr(,&quot;match.length&quot;) [1] -1 attr(,&quot;index.type&quot;) [1] &quot;chars&quot; attr(,&quot;useBytes&quot;) [1] TRUE [[3]] [1] 27 attr(,&quot;match.length&quot;) [1] 6 attr(,&quot;index.type&quot;) [1] &quot;chars&quot; attr(,&quot;useBytes&quot;) [1] TRUE 3.2.3 sub(), gsub() 검색하고자 하는 패턴을 원하는 문자로 변경 문자열 벡터의 패턴을 일치시키거나 문자열 정리가 필요할 때 사용 sub() 문자열에서 첫 번째 일치하는 패턴만 변경 sub(pattern, # 검색하고자 하는 문자, 패턴, 표현 replacement, # 검색할 패턴 대신 변경하고자 하는 문자 및 표현 x # 문자형 벡터 ) 예시 jude &lt;- c(&quot;Hey Jude, don&#39;t make it bad&quot;, &quot;Take a sad song and make it better&quot;, &quot;Remember to let her into your heart&quot;, &quot;Then you can start to make it better&quot;) sub(&quot;a&quot;, &quot;X&quot;, jude) [1] &quot;Hey Jude, don&#39;t mXke it bad&quot; [2] &quot;TXke a sad song and make it better&quot; [3] &quot;Remember to let her into your heXrt&quot; [4] &quot;Then you cXn start to make it better&quot; gsub() 문자열에서 일치하는 모든 패턴 변경 예시 sub(&quot; &quot;, &quot;_&quot;, jude) [1] &quot;Hey_Jude, don&#39;t make it bad&quot; [2] &quot;Take_a sad song and make it better&quot; [3] &quot;Remember_to let her into your heart&quot; [4] &quot;Then_you can start to make it better&quot; gsub(&quot; &quot;, &quot;_&quot;, jude) [1] &quot;Hey_Jude,_don&#39;t_make_it_bad&quot; [2] &quot;Take_a_sad_song_and_make_it_better&quot; [3] &quot;Remember_to_let_her_into_your_heart&quot; [4] &quot;Then_you_can_start_to_make_it_better&quot; gsub(&quot;a&quot;, &quot;X&quot;, jude) [1] &quot;Hey Jude, don&#39;t mXke it bXd&quot; [2] &quot;TXke X sXd song Xnd mXke it better&quot; [3] &quot;Remember to let her into your heXrt&quot; [4] &quot;Then you cXn stXrt to mXke it better&quot; 3.2.4 regexec() regexpr()과 유사하게 작동하지만 괄호(())로 묶인 하위 표현식에 대한 인덱스를 제공 (): 정규 표현식의 메타 문자 중 하나로 그룹을 나타냄 \\(\\rightarrow\\) 정규표현식 내 논리적 테스트 수행 가능 bla &lt;- c(&quot;I like statistics&quot;, &quot;I like R programming&quot;, &quot;I like bananas&quot;, &quot;Estates and statues are too expensive&quot;) grepl(&quot;like&quot;, bla) [1] TRUE TRUE TRUE FALSE grepl(&quot;are&quot;, bla) [1] FALSE FALSE FALSE TRUE grepl(&quot;(like|are)&quot;, bla) [1] TRUE TRUE TRUE TRUE 찾고자 하는 패턴을 두 그룹으로 나눌 때 유용 예시 gregexpr(&quot;stat&quot;, bla) [[1]] [1] 8 attr(,&quot;match.length&quot;) [1] 4 attr(,&quot;index.type&quot;) [1] &quot;chars&quot; attr(,&quot;useBytes&quot;) [1] TRUE [[2]] [1] -1 attr(,&quot;match.length&quot;) [1] -1 attr(,&quot;index.type&quot;) [1] &quot;chars&quot; attr(,&quot;useBytes&quot;) [1] TRUE [[3]] [1] -1 attr(,&quot;match.length&quot;) [1] -1 attr(,&quot;index.type&quot;) [1] &quot;chars&quot; attr(,&quot;useBytes&quot;) [1] TRUE [[4]] [1] 2 13 attr(,&quot;match.length&quot;) [1] 4 4 attr(,&quot;index.type&quot;) [1] &quot;chars&quot; attr(,&quot;useBytes&quot;) [1] TRUE gregexpr(&quot;(st)(at)&quot;, bla) [[1]] [1] 8 attr(,&quot;match.length&quot;) [1] 4 attr(,&quot;index.type&quot;) [1] &quot;chars&quot; attr(,&quot;useBytes&quot;) [1] TRUE [[2]] [1] -1 attr(,&quot;match.length&quot;) [1] -1 attr(,&quot;index.type&quot;) [1] &quot;chars&quot; attr(,&quot;useBytes&quot;) [1] TRUE [[3]] [1] -1 attr(,&quot;match.length&quot;) [1] -1 attr(,&quot;index.type&quot;) [1] &quot;chars&quot; attr(,&quot;useBytes&quot;) [1] TRUE [[4]] [1] 2 13 attr(,&quot;match.length&quot;) [1] 4 4 attr(,&quot;index.type&quot;) [1] &quot;chars&quot; attr(,&quot;useBytes&quot;) [1] TRUE # &quot;at&quot;에 대한 패턴을 찾지 못하고 # &quot;stat&quot; 패턴과 과 동일한 결과 반환 regexec(&quot;(st)(at)&quot;, bla) [[1]] [1] 8 8 10 attr(,&quot;match.length&quot;) [1] 4 2 2 attr(,&quot;index.type&quot;) [1] &quot;chars&quot; attr(,&quot;useBytes&quot;) [1] TRUE [[2]] [1] -1 attr(,&quot;match.length&quot;) [1] -1 attr(,&quot;index.type&quot;) [1] &quot;chars&quot; attr(,&quot;useBytes&quot;) [1] TRUE [[3]] [1] -1 attr(,&quot;match.length&quot;) [1] -1 attr(,&quot;index.type&quot;) [1] &quot;chars&quot; attr(,&quot;useBytes&quot;) [1] TRUE [[4]] [1] 2 2 4 attr(,&quot;match.length&quot;) [1] 4 2 2 attr(,&quot;index.type&quot;) [1] &quot;chars&quot; attr(,&quot;useBytes&quot;) [1] TRUE # &quot;stat&quot; 패턴도 동시에 반환됨을 유의 # 첫 번째 일치 패턴만 반환 3.2.5 strsplit() 문자열에서 매칭되는 특정 패턴(문자)을 기준으로 문자열을 분할함 strsplit( x, # 문자형 벡터 split # 분할 구분 문자(정규표현식 포함) ) 예시 jude_w1 &lt;- strsplit(jude, &quot; &quot;) jude_w1 [[1]] [1] &quot;Hey&quot; &quot;Jude,&quot; &quot;don&#39;t&quot; &quot;make&quot; &quot;it&quot; &quot;bad&quot; [[2]] [1] &quot;Take&quot; &quot;a&quot; &quot;sad&quot; &quot;song&quot; &quot;and&quot; &quot;make&quot; &quot;it&quot; &quot;better&quot; [[3]] [1] &quot;Remember&quot; &quot;to&quot; &quot;let&quot; &quot;her&quot; &quot;into&quot; &quot;your&quot; &quot;heart&quot; [[4]] [1] &quot;Then&quot; &quot;you&quot; &quot;can&quot; &quot;start&quot; &quot;to&quot; &quot;make&quot; &quot;it&quot; &quot;better&quot; # 공백, 쉼표가 있는 경우 구분 jude_w2 &lt;- strsplit(jude, &quot;(\\\\s|,)&quot;) jude_w2 [[1]] [1] &quot;Hey&quot; &quot;Jude&quot; &quot;&quot; &quot;don&#39;t&quot; &quot;make&quot; &quot;it&quot; &quot;bad&quot; [[2]] [1] &quot;Take&quot; &quot;a&quot; &quot;sad&quot; &quot;song&quot; &quot;and&quot; &quot;make&quot; &quot;it&quot; &quot;better&quot; [[3]] [1] &quot;Remember&quot; &quot;to&quot; &quot;let&quot; &quot;her&quot; &quot;into&quot; &quot;your&quot; &quot;heart&quot; [[4]] [1] &quot;Then&quot; &quot;you&quot; &quot;can&quot; &quot;start&quot; &quot;to&quot; &quot;make&quot; &quot;it&quot; &quot;better&quot; "],["reg-exp.html", "3.3 정규 표현식(regular expression)", " 3.3 정규 표현식(regular expression) 주어진 문자열에 특정한 패턴이 있는 경우, 해당 패턴을 일반화(수식화)한 문자열 특정 패턴을 표현한 문자열을 메타 문자(meta character) 라고 지칭 일반적으로 특정 규칙 또는 패턴이 문자열을 찾고(to find), 해당 규칙에 해당하는 문자열을 대체(replace, substitute) 하기 위해 사용 R 언어 뿐 아니라 타 프로그래밍 언어(C, Perl, Python 등) 워드 프로세서, 텍스트 편집기, 검색 엔진, 운영체제(Windows, Linux 등)에서도 범용적으로 사용 정규식이라고도 불리우며 영어로는 regex 또는 regexp 로 명칭됨 3.3.1 기본 메타 문자 Table 3.1: 정규표현식 메타 문자: 기본 Expression Name 설명 . Period (마침표) 무엇이든 한 글자를 의미 + Plus + 앞에 오는 표현이 하나 이상 포함 * Asterisk * 앞에 오는 표현이 0 또는 하나 이상 포함 ? Question mark ? 앞에 오는 표현이 0 또는 하나 포함 ^ Caret ^ 뒤에 오는 표현으로 시작 $ Dollar $ 앞에 오는 표연으로 끝나는 경우 {} Curly bracket {} 앞에 정확히 {}에 있는 숫자만큼 반복되는 패턴 (예시 참고) () Parenthesis () 정규 표현식 내 하위(그룹) 표현식 (예시 참고) | Vertical bar | 의 왼쪽 또는 오른쪽 표현이 존재하는지 메타 문자를 메타 문자가 아닌 문자 자체로 인식하기 위해서는 해당 문자 앞에 \\\\를 붙임 # 마침표가 있는 위치 반환 str2 &lt;- str[1:2] regexpr(&quot;.&quot;, str2) [1] 1 1 attr(,&quot;match.length&quot;) [1] 1 1 attr(,&quot;index.type&quot;) [1] &quot;chars&quot; attr(,&quot;useBytes&quot;) [1] TRUE # 에러 출력 regexpr(&quot;\\.&quot;, str2) Error: &quot;&quot;\\.&quot;로 시작하는 문자열 중에서 &#39;\\.&#39;는 인식할 수 없는 이스케이프입니다 # 정확한 표현 regexpr(&quot;\\\\.&quot;, str2) [1] 42 43 attr(,&quot;match.length&quot;) [1] 1 1 attr(,&quot;index.type&quot;) [1] &quot;chars&quot; attr(,&quot;useBytes&quot;) [1] TRUE . 마침표(period) 어떤 임의의 한 문자를 의미 # 문자열 자체가 존재하니까 참값 반환 grepl(&quot;.&quot;, jude) [1] TRUE TRUE TRUE TRUE grepl(&quot;.&quot;, &quot;#@#%@FDSAGF$%&quot;) [1] TRUE # 문자없음 &quot;&quot; grepl(&quot;.&quot;, &quot;&quot;) [1] FALSE # a로 시작하고 중간에 어떤 글자가 하나 존재하고 b로 끝나는 패턴 bla2 &lt;- c(&quot;aac&quot;, &quot;aab&quot;, &quot;accb&quot;, &quot;acadb&quot;) g &lt;- grepl(&quot;a.b&quot;, bla2) bla2[g] [1] &quot;aab&quot; &quot;acadb&quot; # a와 b 사이 어떤 두 문자 존재하는 패턴 g &lt;- grepl(&quot;a..b&quot;, bla2) bla2[g] [1] &quot;accb&quot; + (plus) + 에 선행된 패턴이 한 번 이상 매칭 \\(\\rightarrow\\) + 앞에 문자를 1개 이상 포함 # &quot;a&quot;를 적어도 하나 이상 포함한 원소 반환 grepl(&quot;a+&quot;, c(&quot;ab&quot;, &quot;aa&quot;, &quot;aab&quot;, &quot;aaab&quot;, &quot;b&quot;)) [1] TRUE TRUE TRUE TRUE FALSE # &quot;l&quot;과 &quot;n&quot; 사이에 &quot;o&quot;가 하나 이상인 원소 반환 grepl(&quot;lo+n&quot;, c(&quot;bloon&quot;, &quot;blno&quot;, &quot;leno&quot;, &quot;lnooon&quot;, &quot;lololon&quot;)) [1] TRUE FALSE FALSE FALSE TRUE * (asterisk) * 앞에 선행된 문자 또는 패턴이 0번 이상 매치 \\(\\rightarrow\\) * 앞에 문자를 0개 또는 1개 이상 포함 # xx가 &quot;a&quot;를 0 또는 1개 이상 포함하고 있는가? xx &lt;- c(&quot;bbb&quot;, &quot;acb&quot;, &quot;def&quot;, &quot;cde&quot;, &quot;zde&quot;, &quot;era&quot;, &quot;xsery&quot;) # &quot;a&quot; 존재와 상관 없이 모든 문자열이 조건에 부합 g &lt;- grepl(&quot;a*&quot;, xx) xx[g] [1] &quot;bbb&quot; &quot;acb&quot; &quot;def&quot; &quot;cde&quot; &quot;zde&quot; &quot;era&quot; &quot;xsery&quot; # &quot;aab&quot;와 &quot;c&quot; 사이에 &quot;d&quot;가 없거나 하나 이상인 경우 # &quot;caabec&quot;인 경우 &quot;aab&quot;와 &quot;c&quot; 사이에 &quot;e&quot;가 존재하기 때문에 FALSE grepl(&quot;aabd*c&quot;, c(&quot;aabddc&quot;, &quot;caabec&quot;, &quot;aabc&quot;)) [1] TRUE FALSE TRUE ? (question) ? 앞에 항목은 선택 사항이며 많아야 한 번 매치 \\(\\rightarrow\\) ? 앞의 문자를 0개 또는 1개 포함 xx &lt;- c(&quot;ac&quot;, &quot;abbc&quot;, &quot;abc&quot;, &quot;abcd&quot;, &quot;abbdc&quot;) g &lt;- grepl(&quot;ab?c&quot;, xx) ## &quot;a&quot;와 &quot;c&quot; 사이 &quot;b&quot;가 0개 또는 1개 포함 xx[g] [1] &quot;ac&quot; &quot;abc&quot; &quot;abcd&quot; yy &lt;- c(&quot;aabc&quot;, &quot;aabbc&quot;, &quot;daabec&quot;, &quot;aabbbc&quot;, &quot;aabbbbc&quot;) g &lt;- grepl(&quot;aabb?c&quot;, yy) ## &quot;aab&quot;와 &quot;c&quot; 사이에 &quot;b&quot;가 0개 또는 1개 있는 경우 일치 yy[g] [1] &quot;aabc&quot; &quot;aabbc&quot; ^ (caret) ^ 뒤에 나오는 문자(열)로 시작하는 문자열 반환 # str에서 &quot;The&quot;로 시작하는 문자열 반환 g &lt;- grepl(&quot;^The&quot;, str) str[g] [1] &quot;The birch canoe slid on the smooth planks.&quot; [2] &quot;These days a chicken leg is a rare dish.&quot; [3] &quot;The juice of lemons makes fine punch.&quot; [4] &quot;The box was thrown beside the parked truck.&quot; [5] &quot;The hogs were fed chopped corn and garbage.&quot; [^]: 대괄호(straight bracket) 안에 첫 번째 문자가 ^인 경우 ^뒤에 있는 문자들을 제외한 모든 문자와 매치 xx &lt;- c(&quot;abc&quot;, &quot;def&quot;, &quot;xyz&quot;, &quot;werx&quot;, &quot;wbcsp&quot;, &quot;cba&quot;) # &quot;a&quot;, &quot;b&quot;, &quot;c&quot;를 순서 상관 없이 동시에 포함하지 않은 문자열 반환 g &lt;- grepl(&quot;[^abc]&quot;, xx) xx[g] [1] &quot;def&quot; &quot;xyz&quot; &quot;werx&quot; &quot;wbcsp&quot; ^[]: [] 안에 들어간 문자 중 어느 한 단어로 시작하는 문자열 반환 xx &lt;- c(&quot;def&quot;, &quot;wasp&quot;, &quot;sepcial&quot;, &quot;statisitc&quot;, &quot;abbey load&quot;, &quot;cross&quot;, &quot;batman&quot;) g &lt;- grepl(&quot;^[abc]&quot;, xx) xx[g] [1] &quot;abbey load&quot; &quot;cross&quot; &quot;batman&quot; $ (dollar) $ 앞에 나오는 문자 및 패턴과 문자열의 맨 마지막 문자 패턴과 매치 g &lt;- grepl(&quot;father$&quot;, x) writeLines(x[g]) Darth Vader: If you only knew the power of the Dark Side. Obi-Wan never told you what happend to your father Darth Vader: No. I&#39;m your father {} (curly bracket) {} 앞의 문자 패턴이 {} 안에 숫자만큼 반복되는 패턴을 매치 {n}: 정확히 n 번 매치 {n,m}: n 번에서 m 번 매치 {n, }: 적어도 n 번 이상 매치 xx &lt;- c(&quot;tango&quot;, &quot;jazz&quot;, &quot;swing jazz&quot;, &quot;hip hop&quot;, &quot;groove&quot;, &quot;rock&#39;n roll&quot;, &quot;heavy metal&quot;) # &quot;z&quot;가 정확히 2번 반복되는 원소 반환 g &lt;- grepl(&quot;z{2}&quot;, xx) xx[g] [1] &quot;jazz&quot; &quot;swing jazz&quot; # &quot;e&quot;가 2번 이상 반복되는 원소 반환 yy &lt;- c(&quot;deer&quot;, &quot;abacd&quot;, &quot;abcd&quot;, &quot;daaeb&quot;, &quot;eel&quot;, &quot;greeeeg&quot;) g &lt;- grepl(&quot;e{2,}&quot;, yy) xx[g] [1] &quot;tango&quot; &quot;groove&quot; &quot;rock&#39;n roll&quot; &quot;heavy metal&quot; # &quot;b&quot;가 2번 이상 4번 이하 반복되고 앞에 &quot;a&quot;가 있는 원소 반환 zz &lt;- c(&quot;ababababab&quot;, &quot;abbb&quot;, &quot;cbbe&quot;, &quot;xabbbbcd&quot;) g &lt;- grepl(&quot;ab{2,4}&quot;, zz) zz[g] [1] &quot;abbb&quot; &quot;xabbbbcd&quot; 참고: 위에서 소개한 메타 문자 중 *는 {0,}, +는 {1,}, ?는 {0,1}과 동일한 의미를 가짐 () (parenthesis) 특정 문자열을 ()로 grouping 한 개 이상의 그룹 지정 가능 # ab가 1~4회 이상 반복되는 문자열 반환 g &lt;- grepl(&quot;(ab){1,4}&quot;, zz) zz[g] [1] &quot;ababababab&quot; &quot;abbb&quot; &quot;xabbbbcd&quot; # &quot;The&quot;로 시작하고 &quot;punch&quot;가 포함된 문자열 ㅂ반환 g &lt;- grepl(&quot;^(The)+.*(punch)&quot;, str) str[g] [1] &quot;The juice of lemons makes fine punch.&quot; | (vertical bar) |를 기준으로 좌우 문자 패턴 중 하나를 의미하며 OR 조건과 동일한 의미를 가짐 [] 의 경우 메타문자나 문자 한글자에 대해서만 적용되는 반면 |는 문자를 묶어 문자열로 지정 가능 g &lt;- grepl(&quot;(is|was)&quot;, str) str[g] [1] &quot;These days a chicken leg is a rare dish.&quot; [2] &quot;Rice is often served in round bowls.&quot; [3] &quot;The box was thrown beside the parked truck.&quot; [4] &quot;Large size in stockings is hard to sell.&quot; g &lt;- grepl(&quot;(are|were)&quot;, str) str[g] [1] &quot;These days a chicken leg is a rare dish.&quot; [2] &quot;The hogs were fed chopped corn and garbage.&quot; 3.3.2 문자 집합 Table 3.2: 정규표현식 메타 문자: 문자집합 Expression 설명 \\w 문자(letter), 숫자(digit), 또는 _ (underscore) 포함 \\d 숫자 0에서 9 \\s 공백문자(line break, tab, spaces) \\W \\w에 포함하지 않는 표현 \\D 숫자가 아닌 표현 \\S 공백이 아닌 표현 # \\w 를 이용해 email 추출 email &lt;- c(&quot;demo@naver.com&quot;, &quot;sample@gmail.com&quot;, &quot;coffee@daum.net&quot;, &quot;redbull@nate.com&quot;, &quot;android@gmail.com&quot;, &quot;secondmoon@gmail.com&quot;, &quot;zorba1997@korea.re.kr&quot;) # 이메일 주소가 naver 또는 gmail만 추출 g &lt;- grepl(&quot;\\\\w+@(naver|gmail)\\\\.\\\\w+&quot;, email) email[g] [1] &quot;demo@naver.com&quot; &quot;sample@gmail.com&quot; &quot;android@gmail.com&quot; [4] &quot;secondmoon@gmail.com&quot; # 숫자를 포함하는 문자열 추출: \\d ex &lt;- c(&quot;ticket&quot;, &quot;51203&quot;, &quot;+-.,!@#&quot;, &quot;ABCD&quot;, &quot;_&quot;, &quot;010-123-4567&quot;) g &lt;- grepl(&quot;\\\\d&quot;, ex) ex[g] [1] &quot;51203&quot; &quot;010-123-4567&quot; # 뒤쪽 공백문자 제거 xx &lt;- c(&quot;some text on the line 1; \\n and then some text on line two &quot;) sub(&quot;\\\\s+$&quot;, &quot;&quot;, xx) [1] &quot;some text on the line 1; \\n and then some text on line two&quot; # 영문자(소문자 및 대문자 포함), 숫자, 언더바(_)를 제외한 문자 포함 g &lt;- grepl(&quot;\\\\W&quot;, ex) ex[g] [1] &quot;+-.,!@#&quot; &quot;010-123-4567&quot; # 숫자를 제외한 모든 문자 반환 g &lt;- grepl(&quot;\\\\D&quot;, ex) ex[g] [1] &quot;ticket&quot; &quot;+-.,!@#&quot; &quot;ABCD&quot; &quot;_&quot; &quot;010-123-4567&quot; # 영문자, 숫자, 언더바를 제외한 모든 문자 포함하고 # 숫자와 특수문자를 포함하는 문자열도 제외 g &lt;- grepl(&quot;\\\\W\\\\D&quot;, ex) ex[g] [1] &quot;+-.,!@#&quot; ## 공백, 탭을 제외한 모든 문자 포함 blank &lt;- c(&quot; &quot;, &quot;_&quot;, &quot;abcd&quot;, &quot;\\t&quot;, &quot;%^$#*#*&quot;) g &lt;- grepl(&quot;\\\\S&quot;, blank) blank[g] [1] &quot;_&quot; &quot;abcd&quot; &quot;%^$#*#*&quot; 3.3.3 문자 클래스 문자 집합을 더 세분화하여 특정 목적에 맞는 정규 표현형 대괄호([]) 안에 특정 패턴에 해당하는 문자로 규칙 표현하고 하이픈(-)을 사용해 특정 문자의 범위 지정 가능 응용 가능한 문자 클래스 Table 3.3: 정규표현식 주요 문자 클래스 Expression 설명 [a-z] 알파벳 소문자 중 하나 [A-Z] 알파벳 대문자 중 하나 [0-9] 0에서 9까지 숫자 중 하나 [a-zA-Z] 모든 알파벳 중 하나 [a-z0-9] 알파벳 소문자나 숫자 중 한 문자 [가-힝] 모든 한글 중 하나 [(abc)d] 문자열 ‘abc’와 문자 ’d’ 중 하나 POSIX (Portable Operating System Interface): 서로 다른 UNIX OS의 API를 정리하여 이식성이 높은 유닉스 응용 프로그램을 개발하기 위한 목적으로 IEEE가 책정한 애플리케이션 인터페이스 규격 (“POSIX” 2018 Accessed: 2020-04-16) Table 3.4: 정규표현식: POSIX 문자 클래스 Expression 설명 [[:punct:]] 구둣점 문자 [][!#$%&amp;’()*+,./:;&lt;=&gt;?@\\^_`{|}~-] [[:alpha:]] 알파벳 [A-Za-z]와 동일한 표현 [[:lower:]] 소문자 알파벳 [a-z]와 동일 [[:upper:]] 대문자 알파벳 [A-Z]와 동일 [[:digit:]] 숫자 0 ~ 9 [0-9]와 동일 [[:alnum:]] 알파벳과 숫자 [0-9A-Za-z]와 동일 [[:cntrl:]] 제어문자 b [[:print:]] 모든 인쇄 가능한 문자 [[:space:]] 공백문자 \\t\\r\\n\\v\\f [[:blank:]] 공백문자 중 \\t \\n [[:xdigit:]] 16 진수 movie &lt;- c(&quot;terminator 3: rise of the machiens&quot;, &quot;les miserables&quot;, &quot;avengers: infinity war&quot;, &quot;iron man&quot;, &quot;indiana jones: the last crusade&quot;, &quot;irish man&quot;, &quot;mission impossible&quot;, &quot;the devil wears prada&quot;, &quot;parasite (gisaengchung)&quot;, &quot;once upon a time in hollywood&quot;) # 각 영화제목의 첫글자를 대문자로 변경 # \\b는 단어의 양쪽 가장 자리의 빈 문자를 의미 # \\\\1은 () 첫 번째 그룹, \\\\U는 대문자(perl) gsub(&quot;\\\\b(\\\\w)&quot;, &quot;\\\\U\\\\1&quot;, movie, perl = T) [1] &quot;Terminator 3: Rise Of The Machiens&quot; &quot;Les Miserables&quot; [3] &quot;Avengers: Infinity War&quot; &quot;Iron Man&quot; [5] &quot;Indiana Jones: The Last Crusade&quot; &quot;Irish Man&quot; [7] &quot;Mission Impossible&quot; &quot;The Devil Wears Prada&quot; [9] &quot;Parasite (Gisaengchung)&quot; &quot;Once Upon A Time In Hollywood&quot; # 엑셀에서 ()로 표시된 음수 데이터를 읽어온 경우 # 이를 음수로 표시 num &lt;- c(&quot;0.123&quot;, &quot;0.456&quot;, &quot;(0.45)&quot;, &quot;1.25&quot;) gsub(&quot;\\\\(([0-9.]+)\\\\)&quot;, &quot;-\\\\1&quot;, num) [1] &quot;0.123&quot; &quot;0.456&quot; &quot;-0.45&quot; &quot;1.25&quot; 3.3.4 정규 표현식 예시 텍스트 데이터를 처리할 때 일반적으로 많이 활용되는 정규 표현식 정제되지 않은 데이터 가공 시 유용하게 활용 공백 제거 선행 예제에서 문자열 뒤에 존재하는 공백 제거 예시 확인 다음 예시들은 선행 및 모든 공백 제거에 대한 정규 표현식에 대해 살펴봄 필요 표현식 공백을 다른 문자로 교체 해주는 함수 \\(\\rightarrow\\) gsub() 공백 character class: \\\\s 처음과 끝 지정 meta character: ^, $ 조건을 찾기 위한 meta character: +, | 모든 공백을 제거하려면 \\(\\rightarrow\\) \\\\s 앞쪽 공백만 제거하려면? \\(\\rightarrow\\) ^\\\\s+ 뒤쪽 공백만 제거하려면? \\(\\rightarrow\\) \\\\s+$ 양쪽 공백 모두를 제거하려면? 문장의 맨 앞에 곻백이 하나 이상 존재하거나(OR, |), 문장 맨 끝에 공백이 하나 이상 존재 \\(\\rightarrow\\) (^\\\\s+|\\\\s+$) txt &lt;- c(&quot; 신종 코로나바이러스 감염증(코로나19) 환자 가운데 회복해서 항체가 생긴 사람 중 절반가량은 체내에 바이러스가 남아 있는 것으로 나타났다. &quot;) txt [1] &quot; 신종 코로나바이러스 감염증(코로나19) 환자 가운데 회복해서 항체가\\n 생긴 사람 중 절반가량은 체내에 바이러스가 남아 있는 것으로 나타났다. &quot; # 모근 공백 제거 gsub(&quot;\\\\s&quot;, &quot;&quot;, txt) [1] &quot;신종코로나바이러스감염증(코로나19)환자가운데회복해서항체가생긴사람중절반가량은체내에바이러스가남아있는것으로나타났다.&quot; # 앞쪽 공백만 제거 gsub(&quot;^\\\\s+&quot;, &quot;&quot;, txt) [1] &quot;신종 코로나바이러스 감염증(코로나19) 환자 가운데 회복해서 항체가\\n 생긴 사람 중 절반가량은 체내에 바이러스가 남아 있는 것으로 나타났다. &quot; # 뒤쪽 공백만 제거 gsub(&quot;\\\\s+$&quot;, &quot;&quot;, txt) [1] &quot; 신종 코로나바이러스 감염증(코로나19) 환자 가운데 회복해서 항체가\\n 생긴 사람 중 절반가량은 체내에 바이러스가 남아 있는 것으로 나타났다.&quot; # 양쪽에 존재하는 공백들 제거 gsub(&quot;(^\\\\s+|\\\\s+$)&quot;, &quot;&quot;, txt) [1] &quot;신종 코로나바이러스 감염증(코로나19) 환자 가운데 회복해서 항체가\\n 생긴 사람 중 절반가량은 체내에 바이러스가 남아 있는 것으로 나타났다.&quot; # 가운데 \\n 뒤에 존재하는 공백들을 없애려면?? gsub(&quot;(^\\\\s+| {2,}|\\\\s+$)&quot;, &quot;&quot;, txt) [1] &quot;신종 코로나바이러스 감염증(코로나19) 환자 가운데 회복해서 항체가\\n생긴 사람 중 절반가량은 체내에 바이러스가 남아 있는 것으로 나타났다.&quot; 핸드폰 번호 추출 대한민국 핸드폰 번호의 형태 필요한 표현식 처음 세 자리: ^(01)\\\\d{1} 가운데 3~4자리: -\\\\d{3,4} 마지막 4자리: -\\\\d{4} phone &lt;- c(&quot;042-868-9999&quot;, &quot;02-3345-1234&quot;, &quot;010-5661-7578&quot;, &quot;016-123-4567&quot;, &quot;063-123-5678&quot;, &quot;070-5498- 1904&quot;, &quot;011-423-2912&quot;, &quot;010-6745-2973&quot;) g &lt;- grepl(&quot;^(01)\\\\d{1}-\\\\d{3,4}-\\\\d{4}&quot;, phone) phone[g] [1] &quot;010-5661-7578&quot; &quot;016-123-4567&quot; &quot;011-423-2912&quot; &quot;010-6745-2973&quot; 이메일 추출 정규 표현식을 이용해 이메일(e-mail) 주소만 텍스트 문서에서 추출 이메일 주소 구성 필요한 표현식 E-mail ID(@ 왼쪽): 어떤 알파벳, 숫자, 특수문자가 1개 이상 \\(\\rightarrow\\) [A-Za-z0-9[:punct:]]+ E-mail ID(@ 오른쪽-1): 어떤 알파벳이나 숫자가 하나 이상 존재하고 특수문자 포함(.xx.xx 추출에 필요) \\(\\rightarrow\\) @[A-Za-z0-9[:punct:]]+ E-mail ID(@ 오른쪽-2): .xx 또는 .xxx 검색 \\(\\rightarrow\\) \\\\.[A-Za-z]+ 예시 네이버 뉴스 크롤링 (“R 에서 원하는 키워드의 네이버 뉴스를 웹크롤링(스크래핑) 하는 방법” 2018) 검색 포탈: 네이버 검색범위: 2020년 4월 21일 검색 keyword: 21대 국회위원 선거 검색 뉴스 개수: 39개 검색결과 저장 파일: dataset/news-scraping.csv 개별 기사에 해당하는 URL로부터 ID 생성 각 뉴스로부터 기자들의 e-mail 추출 추출 후 기사 ID, 기사제목, e-mail 주소로 구성된 데이터 프레임 생성 # 크롤링한 데이터 불러오기 news_naver &lt;- read.csv(&quot;dataset/test.news-scraping.csv&quot;, header = T, stringsAsFactors = FALSE) # regmatches 함수: regexpr(), gregexpr(), regexec()로 검색한 패턴을 # 텍스트(문자열)에서 추출 # ID 추출 id &lt;- regmatches(news_naver$url, regexpr(&quot;\\\\d{10}&quot;, news_naver$url)) contents &lt;- news_naver$news_content news_naver2 &lt;- data.frame(id, title = news_naver$news_title, stringsAsFactors = FALSE) tmp &lt;- regmatches(contents, gregexpr(&quot;\\\\b[A-Za-z0-9[:punct:]]+@[A-Za-z0-9[:punct:]]+\\\\.[A-Za-z]+&quot;, contents)) names(tmp) &lt;- id x &lt;- t(sapply(tmp, function(x) x[1:2], simplify = &quot;array&quot;)) colnames(x) &lt;- paste0(&quot;email&quot;, 1:2) email &lt;- data.frame(id = row.names(x), x, stringsAsFactors = F) res &lt;- merge(news_naver2, email, by = &quot;id&quot;) head(res) # stringr 패키지 사용 # email &lt;- str_extract_all(contents, # &quot;\\\\b[A-Za-z0-9[:punct:]]+@[A-Za-z0-9[:punct:]]+\\\\.[A-Za-z]+&quot;, # simplify = TRUE) # email &lt;- data.frame(email, stringsAsFactors = FALSE) # names(email) &lt;- paste0(&quot;email&quot;, 1:2) # res &lt;- data.frame(id, title = news_naver$news_title, email, # stringsAsFactors = FALSE) # head(res) References "],["r-수학-함수-분포-함수-모형식-표현.html", "4 R 수학 함수, 분포 함수, 모형식 표현 ", " 4 R 수학 함수, 분포 함수, 모형식 표현 "],["수학함수.html", "4.1 수학함수", " 4.1 수학함수 R은 광범위한 수학 함수를 내장하고 있고 다음 열거한 함수 목록은 그 일부임 exp(): 지수(e)를 밑으로 하는 지수 함수 log(): 자연 로그 함수 log10(): 10을 밑으로 하는 로그 sqrt(): 제곱근 abs(): 절대값 sin(), cos(), tan() … : 삼각함수 min(), max(): 벡터 내 최솟값과 최댓값 반환 which.min(), which.max(): 벡터 내 최댓값과 최솟값에 대한 인덱스 반환 sum(), prod(): 벡터 원소들의 합과 곱 결과 반환 cumsum(), cumprod(): 백터 원소들의 누적합과 누적곱 round(), floor(), ceiling(): 수치형 값의 반올림, 내림, 올림 factorial(): 팩토리얼 함수 \\(n!\\) choose(): 조합 함수 (\\(_n C_r = \\frac{n!}{r!(n-r)!}\\)) rev(): 역순으로 배열 rank(): 백터 원소 값들의 순위 반환 sweep(): 각 원소에서 요약통계량(예: 평균)으로부터 편차 계산 시 유용 확장예제1: 확률계산 \\(P_i\\): \\(n\\) 개의 독립적인 사건이 있고 \\(i\\) 번째 사건이 발생할 확률 \\(n = 3\\) 일 때, 각 사건의 이름을 각각 A, B, C 라고 할 때 이 중 사건 하나가 발생할 확률 P(사건 하나가 발생할 확률) = P(A가 일어나고 B와 C가 일어나지 않을 확률) + P(A가 일어나지 않고 B가 일어나고 C가 일어나지 않을 확률) + P(A, B가 일어나지 않고 C만 일어날 확률) 여기서 P(A가 일어나고 B와 C가 일어나지 않을 확률) = \\(P_A(1-P_B)(1-P_C)\\) \\(\\rightarrow\\) 나머지도 마찬가지임 일반화 하면 \\[ \\sum_{i=1}^{n} P_i(1-P_1)(1-P_2)\\cdots (1-P_{i-1})(1-P_{i+1})\\cdots (1-P_{n}) \\] 수학함수로 구현: prod() 함수 활용 # 벡터 p에서 p_i 계산 함수 p &lt;- c(0.2, 0.4, 0.3) notp &lt;- 1 - p p[1] * prod(notp[-1]) + p[2] * prod(notp[-2]) + p[3] * prod(notp[-3]) [1] 0.452 p &lt;- runif(10, 0, 1) notp &lt;- 1 - p # 일반화 하려면 어떻게 해야 할까? -&gt; 반복문 활용 tot &lt;- 0 for (i in 1:length(p)) { tot &lt;- tot + p[i] * prod(notp[-i]) } 확장예제2: 누적합, 누적곱 # cumsum, cumprod 함수 사용 예시 x &lt;- c(2, 4, 1, 3, 7, 8) cumsum(x); cumprod(x) [1] 2 6 7 10 17 25 [1] 2 8 8 24 168 1344 확장예제3: 최솟값, 최댓값 # which.min, which.max 사용 예시 set.seed(100) x &lt;- sample(1:100, 100) idx_min &lt;- which.min(x) x[idx_min] [1] 1 idx_max &lt;- which.max(x) x[idx_max] [1] 100 # min(), max(), pmin(), pmax() 비교 set.seed(5) x &lt;- runif(5, 2, 4) y &lt;- runif(5, 2, 4) z &lt;- cbind(x, y) min(z); max(z) # z의 전체 값 중 최솟값과 최댓값 반환 [1] 2.2093 [1] 3.913 pmin(z); pmax(z) # 아무 값을 반환하지 않음 x y [1,] 2.400429 3.402115 [2,] 3.370437 3.055920 [3,] 3.833752 3.615870 [4,] 2.568799 3.913000 [5,] 2.209300 2.220906 x y [1,] 2.400429 3.402115 [2,] 3.370437 3.055920 [3,] 3.833752 3.615870 [4,] 2.568799 3.913000 [5,] 2.209300 2.220906 # 두 열을 비교해 각 행에서 최솟값, 최댓값을 반환 pmin(z[, 1], z[, 2]) [1] 2.400429 3.055920 3.615870 2.568799 2.209300 pmax(z[, 1], z[, 2]) [1] 3.402115 3.370437 3.833752 3.913000 2.220906 확장예제5: sweep() 함수 활용 X &lt;- matrix(1:12, 3, 4) m &lt;- apply(X, 2, mean) M &lt;- matrix(m, ncol = 4, nrow = 3, byrow = TRUE) X - M [,1] [,2] [,3] [,4] [1,] -1 -1 -1 -1 [2,] 0 0 0 0 [3,] 1 1 1 1 # sweep 함수 활용 sweep(X, 2, colMeans(X)) [,1] [,2] [,3] [,4] [1,] -1 -1 -1 -1 [2,] 0 0 0 0 [3,] 1 1 1 1 확장예제6: 미분/적분 문자의 미분 및 수치 적분 가능 # 도함수 구하기 ## D() 함수 사용 dx &lt;- D(expression(exp(x^2)), &quot;x&quot;) # exp(x^2)을 x에 대해서 1차 미분한 도함수 set.seed(3) x &lt;- runif(3, 1, 2) eval(dx) # 위 입력한 x에 대한 도함수 값 출력 [1] 9.141245 94.842390 18.856751 ## deriv() 함수 사용 grad &lt;- D(expression(x*sin(x)), &quot;x&quot;) # 도함수를 R의 function으로 바로 반환 가능 dx2 &lt;- deriv(expression(x*sin(x)), &quot;x&quot;, function.arg = TRUE) dx2(x) [1] 1.074580 1.757109 1.361092 attr(,&quot;gradient&quot;) x [1,] 1.3778035 [2,] 0.5482219 [3,] 1.2386966 # 수치 적분 ## integrate() 함수 사용 ## 주어진 함수의 적분식을 구한 후, 입력 구간에 대한 적분값 계산 integrate(f = function(x) x^2, lower = 0, upper = 1) 0.3333333 with absolute error &lt; 3.7e-15 "],["통계-분포-함수.html", "4.2 통계 분포 함수", " 4.2 통계 분포 함수 R은 현존하는 대부분의 통계 확률 분포 함수를 제공하고 접두사 + 분포이름 형태의 함수명을 갖고 있으며, 보통 다음과 같은 접두사를 통해 분포 함수 생성 d: 밀도(density)의 약어로 확률 밀도함수(probability density function, pdf) 또는 이산형 분포의 확률 질량 함수(probability mass function, pmf) q: 분위수(quantile)의 약어로 상위 %에 해당하는 \\(x\\) 값을 반환 p: 누적분포함수(cumulative density function, cdf) r: 특정 분포로부터 난수(확률변수) 생성 예: dnorm(), qnorm(), pnorm(), rnorm() 은 정규분포 관련 함수임 Table 4.1: 일반적인 R 통계 분포함수(일부 제시) Distribution Density/Mass function R pdf R cdf R quantile RV generation Parameter 균일분포 \\(\\frac{1}{b -a},~\\mathrm{for}~x \\in [a, b]\\) dunif punif qunif runif min (a), max (b) 지수분포 \\(\\lambda \\exp{(-\\lambda x)}\\) dexp pexp qexp rexp rate (\\(\\lambda\\)) 정규분포 \\(\\frac{1}{\\sqrt{2\\pi}\\sigma}\\exp \\left\\{-\\frac{(x - \\mu)^2}{2\\sigma^2} \\right \\}\\) dnorm pnorm qnorm rnorm mean (\\(\\mu\\)), sd (\\(\\sigma\\)) \\(\\chi^2\\) 분포 \\(\\frac{1}{\\Gamma(\\nu/2)2^{\\nu/2}}x^{(\\nu/2) - 1}e^{(-x/2)}\\) dchisq pchisq qchisq rchisq df (\\(\\nu\\)) \\(t\\) 분포 \\(\\frac{\\Gamma(\\frac{\\nu + 1}{2})}{\\Gamma{(\\frac{\\nu}{2}})}\\frac{1}{\\sqrt{\\nu\\pi}}\\frac{1}{(1 + x^2/\\nu)^{(\\nu + 1)/2}}\\) dt pt qt rt df (\\(\\nu\\)) 이항분포 \\({n \\choose x} p^x (1 - p)^{n - x}\\) dbinom pbinom qbinom rbinom size (\\(n\\)), prob (\\(p\\)) 포아송 분포 \\(\\frac{e^{-\\lambda}\\lambda^x}{x!}\\) dpois ppois qpois rpois lambda (\\(\\lambda\\)) 예제: 확률 분포 함수 ## 카이제곱분포 x &lt;- seq(0, 30, by = 0.1) y &lt;- dchisq(x, df = 3) # 자유도가 3인 카이제곱분포 밀도 함수 plot(x, y, type = &quot;l&quot;, bty = &quot;n&quot;, xlab = &quot;&quot;, ylab = &quot;&quot;, main = expression(paste(&quot;PDF of &quot;, ~chi^2, &quot; distribution&quot;)), lwd = 2, cex.main = 2) # P(5 &lt; V &lt; 10) pchisq(10, df = 3) - pchisq(5, df = 3) [1] 0.153231 ## 그림에 표현 idx &lt;- x &gt;= 5 &amp; x &lt;= 10 polygon(c(5, x[idx], 10), c(0, y[idx], 0), col = &quot;blue&quot;, border = &quot;blue&quot;) abline(h = 0, col = &quot;darkgray&quot;) text(x = 10, y = 0.05, cex = 2, bquote(P({5 &lt;= V} &lt;= 10 ) == .(sprintf(&quot;%.3f&quot;, pchisq(10, df = 3) - pchisq(5, df = 3)))), adj = 0) # 분위수 qchisq(pchisq(10, df = 3), df = 3) [1] 10 # 난수 생성 v &lt;- rchisq(1000, df = 3) mean(v) # 카이제곱분포의 평균은 이론적으로 자유도 값과 같음 [1] 2.994 "],["모형식-표현.html", "4.3 모형식 표현", " 4.3 모형식 표현 R에서 통계적 모형 표현 방법 지금까지 별다른 설명 없이 ~가 들어간 수식표현을 특정함수(예: lm(), t.test(), 심지어 그래프 생성에 필요한 함수 등)의 인수로 사용함. R은 (통계적) 모형을 표현하기 위해 formula 표현을 사용 \\(\\rightarrow\\) 일반적으로 좌변 ~ 우변형태로 표시 보통은 특정 함수 내에서 호출되며 데이터에 포함되어 있는 변수를 평가하지 않고 해당 함수에서 해석할 수 있도록 변수값을 불러올 수 있음. formula는 “language” 객체의 일종이며 “formula” 클래스를 속성으로 갖는 평가되지 않은 표현식(unevaluated expression) typeof(quote(x + 10)) # 객체의 형태가 &quot;language&quot; [1] &quot;language&quot; class(quote(x + 10)) # 객체의 클래스가 &quot;call&quot; [1] &quot;call&quot; R에서 formula을 특정하는 ~의 의미는 “즉시 평가(evaluate)하지 않고 이 코드의 의미를 전달(캡쳐)” \\(\\rightarrow\\) 인용(quote) 연산자로 볼 수 있는 이유임 # 수식 표현 a &lt;- y ~ x b &lt;- y ~ x + b c &lt;- ~ x + y + z typeof(c); class(c); attributes(c) [1] &quot;language&quot; [1] &quot;formula&quot; $class [1] &quot;formula&quot; $.Environment &lt;environment: R_GlobalEnv&gt; 가장 기본적인 formula의 형태는 아래와 같음 반응변수(response variable) ~ 독립변수(independent variables) ~ 는 “(좌변)은 (우변)의 함수로 나타낸 모형” 으로 해석됨. 우변과 좌변 모두 일반적으로 여러 개의 변수들이 있을 수 있으며, 해당 변수의 추가는 +로 표시됨 좌변은 반응변수, 우변은 설명변수를 의미 일반적으로 좌변에 \\(y\\)로 표현되는 반응변수는 학문 분야에 따라 종속변수(dependent variable), 표적변수(target variable), 결과변수(outcome variable), 레이블(label, \\(y\\)가 범주형일 경우) 등으로 명칭되며, 우변에 \\(y\\)를 설명하기 위해 사용하는 변수(\\(x\\))를 마찬가지로 분야와 성격에 따라 독립변수(independent variable), 설명변수(exploratory variable), 예측변수(predictor variable), 위험 인자(risk factor), 공변량(covariate) 등으로 명칭된다. formula를 구성하는 항으로 벡터 객체를 직접 사용할 수 있으나, 데이터 프레임의 변수명을 formula의 항으로 구성할 수 있음. formula의 항으로 지정된 벡터 또는 변수들의 값은 formula를 호출해 사용할 때 까지 연결되지 않은 “언어”로써만 존재 formula는 양면수식(two-sided formula, 좌변과 우변 모두에 하나 이상의 항이 존재)과 단면수식(one-sided formula, 우변에만 하나 이상의 항 존재) set.seed(1) x1 &lt;- rnorm(100, 2, 4) x2 &lt;- runif(100, 2, 4) x3 &lt;- rpois(100, 3) y &lt;- 2*x1 + 3*x2 + 0.5*x3 + 5 + rnorm(100, 0, 4) f1 &lt;- y ~ x # y는 x의 함수 f2 &lt;- y ~ x1 + x2 # y는 x1과 x2의 함수를 지칭하는 모형 typeof(f2); class(f2); attributes(f2) [1] &quot;language&quot; [1] &quot;formula&quot; $class [1] &quot;formula&quot; $.Environment &lt;environment: R_GlobalEnv&gt; names(iris) [1] &quot;Sepal.Length&quot; &quot;Sepal.Width&quot; &quot;Petal.Length&quot; &quot;Petal.Width&quot; &quot;Species&quot; f3 &lt;- Species ~ Sepal.Length + Sepal.Width + Petal.Length # 붓꽃의 종은 꽃받침 길이와 너비, 꽃잎의 길이에 대한 함수 f4 &lt;- ~ x1 + x2 f5 &lt;- y ~ x1 + x2 + x3 length(f3); length(f4) [1] 3 [1] 2 f4[[1]]; f4[[2]] `~` x1 + x2 f5[[1]]; f5[[2]]; f5[[3]] `~` y x1 + x2 + x3 수식 사용 이유 변수 간의 관계를 알기 쉽게 표현 복잡한 변수의 관계를 표현해 함수 내에서 손쉽게 해당 항에 대응하는 데이터 값에 접근 가능 수식표현 방법 위에서 기술환대로 좌변항 ~ 우변항으로 표현 formula() 또는 as.formula() 함수를 통해 텍스트를 formula 형태로 생성 가능 f6 &lt;- &quot;y ~ x1 + x2 + x3&quot; h &lt;- as.formula(f6) h y ~ x1 + x2 + x3 h &lt;- formula(f6) h y ~ x1 + x2 + x3 fs &lt;- c(f1, f2, f6) # formula 객체를 concatenate 할 경우 list 객체 fl &lt;- lapply(fs, as.formula) formula로 표현한 모형의 항에 대응하는 값으로 데이터 행렬 및 데이터 프레임 생성 model.frame(): formula 객체에 표현된 항에 대응하는 데이터 값으로 이루어진 데이터 프레임 반환 model.matrix(): 디자인 행렬을 생성하는 함수 d1 &lt;- model.frame(y ~ x1 + x2) # 벡터값을 데이터 프레임으로 반환 head(d1) # formula를 구성하고 있는 변수명에 대응하는 변수를 데이터 프레임에서 추출 f3 Species ~ Sepal.Length + Sepal.Width + Petal.Length d2 &lt;- model.frame(f3, iris) head(d2) # model.matrix()에서는 디자인 행렬만 반환 # y 값은 포함하지 않고 우변에 해당하는 항에 대응하는 데이터 반환 X1 &lt;- model.matrix(y ~ x1 + x2) head(X1) (Intercept) x1 x2 1 1 -0.5058152 2.535016 2 1 2.7345733 2.437291 3 1 -1.3425144 3.033594 4 1 8.3811232 2.537901 5 1 3.3180311 2.362337 6 1 -1.2818735 3.037152 formula 관련 함수 terms(): formula 객체에 포함되어 있는 항의 구조 파악 all.vars(): formula에 포함되어 있는 변수명 추출 update(): formula를 구성하는 항을 수정 terms(f2) y ~ x1 + x2 attr(,&quot;variables&quot;) list(y, x1, x2) attr(,&quot;factors&quot;) x1 x2 y 0 0 x1 1 0 x2 0 1 attr(,&quot;term.labels&quot;) [1] &quot;x1&quot; &quot;x2&quot; attr(,&quot;order&quot;) [1] 1 1 attr(,&quot;intercept&quot;) [1] 1 attr(,&quot;response&quot;) [1] 1 attr(,&quot;.Environment&quot;) &lt;environment: R_GlobalEnv&gt; all.vars(f2) [1] &quot;y&quot; &quot;x1&quot; &quot;x2&quot; update(f2, ~ . + x3) y ~ x1 + x2 + x3 formula에 사용되는 연산자와 의미 Symbol Example Meaning + X + Z 변수 항 포함 - X + Z - X 변수 항 제거 : X:W X와 W의 교호작용 %in% X%in%W 지분(nesting) * X*Z X + Z + X:Z ^ (X+W+Z)^3 3차 교호작용항까지 모든 항을 포함 I I(X^2) as is: X^2을 포함 1 X - 1 절편 제거 . Y ~ . 모든 변수 포함(X + W + Z) 일반 연산 시 A %in% B의 의미는 A가 B의 원소를 포함하는지에 대한 논리값을 반환해 주지만, formula에서 %in%은 중첩 또는 지분(nesting)을 내포함. R의 리스트 객체는 중첩 및 지분 구조의 대표적 형태임. 예를 들어 리스트에 포함된 한 원소에 대응하는 데이터의 형태 및 값은 동일 리스트의 다른 원소에 대응한 데이터의 형태 및 값이 다름. 즉, 리스트 객체는 한 객체에 여러 형태의 데이터 구조를 가질 수 있고 이를 중접된 구조라고 함. 또한 실험계획법(experimental design)에서 지분 설계(nested design) 방법이 있는데, 두 개 요인(factor) A와 B가 존재할 때 A의 수준에 따른 B의 수준이 모두 다른 경우, 즉 교호작용이 존재하지 않는 형태의 실험설계법을 지칭함. 예를 들어 A사와 B사의 오랜지 주스 당도에 차이가 있는지를 알기 위해 각 회사에서 생산하고 있는 주스 3종을 랜덤하게 선택했다고 가정해 보자. 여기서 주 관심사는 두 회사에서 생산한 주스의 당도의 동질성이지 오랜지 주스 간 당도 차이는 관삼사항이 아님. 이 경우, 주 관심요인은 회사(C)이고, 요인 C는 회사 A, B라는 두 개의 수준(level)을 갖고 있음. 오랜지 주스(O)는 각 회사 별로 3개의 수준을 갖고 있는데, 각 회사에서 생산하는 오랜지 주스는 생산 공정에 차이가 있기 떄문에 각 회사에 지분되어 있음. 즉, 회사 A에서 생산한 오랜지 주스 O1, O2, O3은 회사 B에서 생산한 O1, O2, O3과 다름. set.seed(10) x &lt;- runif(30) z &lt;- runif(30, 2, 3) w &lt;- sample(0:1, 30, replace = TRUE) y &lt;- 3 + 2.5*x + x^2 + 1.5*z + 0.5 * w + 2*w*x + rnorm(30, 0, 2) head(model.matrix(~ x)) (Intercept) x 1 1 0.50747820 2 1 0.30676851 3 1 0.42690767 4 1 0.69310208 5 1 0.08513597 6 1 0.22543662 head(model.matrix(~ x + z)) # x + z (Intercept) x z 1 1 0.50747820 2.535597 2 1 0.30676851 2.093088 3 1 0.42690767 2.169803 4 1 0.69310208 2.899832 5 1 0.08513597 2.422638 6 1 0.22543662 2.747746 head(model.matrix(~ x + z - x)) # x + z에서 z 항 제거 (Intercept) z 1 1 2.535597 2 1 2.093088 3 1 2.169803 4 1 2.899832 5 1 2.422638 6 1 2.747746 head(model.matrix(~ x:w)) # 교호작용항만 포함 (Intercept) x:w 1 1 0.5074782 2 1 0.3067685 3 1 0.0000000 4 1 0.0000000 5 1 0.0000000 6 1 0.0000000 head(model.matrix(~ x*w)) # x + w + x:w (Intercept) x w x:w 1 1 0.50747820 1 0.5074782 2 1 0.30676851 1 0.3067685 3 1 0.42690767 0 0.0000000 4 1 0.69310208 0 0.0000000 5 1 0.08513597 0 0.0000000 6 1 0.22543662 0 0.0000000 head(model.matrix(~ (x + z + w)^3)) # x + z + w + x:z + z:w + x:w + x:w:z (Intercept) x z w x:z x:w z:w x:z:w 1 1 0.50747820 2.535597 1 1.2867602 0.5074782 2.535597 1.2867602 2 1 0.30676851 2.093088 1 0.6420935 0.3067685 2.093088 0.6420935 3 1 0.42690767 2.169803 0 0.9263056 0.0000000 0.000000 0.0000000 4 1 0.69310208 2.899832 0 2.0098799 0.0000000 0.000000 0.0000000 5 1 0.08513597 2.422638 0 0.2062536 0.0000000 0.000000 0.0000000 6 1 0.22543662 2.747746 0 0.6194427 0.0000000 0.000000 0.0000000 head(model.matrix(~ x + I(x^2))) # x + x^2 (Intercept) x I(x^2) 1 1 0.50747820 0.257534127 2 1 0.30676851 0.094106916 3 1 0.42690767 0.182250156 4 1 0.69310208 0.480390494 5 1 0.08513597 0.007248133 6 1 0.22543662 0.050821668 # head(model.matrix(~ x + x^2)) head(model.matrix(~ x - 1)) x 1 0.50747820 2 0.30676851 3 0.42690767 4 0.69310208 5 0.08513597 6 0.22543662 dat &lt;- data.frame(y, x, w, z) head(model.matrix(y ~ ., data = dat)) (Intercept) x w z 1 1 0.50747820 1 2.535597 2 1 0.30676851 1 2.093088 3 1 0.42690767 0 2.169803 4 1 0.69310208 0 2.899832 5 1 0.08513597 0 2.422638 6 1 0.22543662 0 2.747746 head(model.matrix(y ~ .^2, data = dat)) (Intercept) x w z x:w x:z w:z 1 1 0.50747820 1 2.535597 0.5074782 1.2867602 2.535597 2 1 0.30676851 1 2.093088 0.3067685 0.6420935 2.093088 3 1 0.42690767 0 2.169803 0.0000000 0.9263056 0.000000 4 1 0.69310208 0 2.899832 0.0000000 2.0098799 0.000000 5 1 0.08513597 0 2.422638 0.0000000 0.2062536 0.000000 6 1 0.22543662 0 2.747746 0.0000000 0.6194427 0.000000 # nested 구조 dat2 &lt;- expand.grid(C = c(&quot;A&quot;, &quot;B&quot;), O = paste0(&quot;O&quot;, 1:3), y = runif(3, 1, 2)) dat2 &lt;- dat2[order(dat2$C, dat2$O), ] model.matrix(y ~ C + O %in% C, data = dat2) (Intercept) CB CA:OO2 CB:OO2 CA:OO3 CB:OO3 1 1 0 0 0 0 0 7 1 0 0 0 0 0 13 1 0 0 0 0 0 3 1 0 1 0 0 0 9 1 0 1 0 0 0 15 1 0 1 0 0 0 5 1 0 0 0 1 0 11 1 0 0 0 1 0 17 1 0 0 0 1 0 2 1 1 0 0 0 0 8 1 1 0 0 0 0 14 1 1 0 0 0 0 4 1 1 0 1 0 0 10 1 1 0 1 0 0 16 1 1 0 1 0 0 6 1 1 0 0 0 1 12 1 1 0 0 0 1 18 1 1 0 0 0 1 attr(,&quot;assign&quot;) [1] 0 1 2 2 2 2 attr(,&quot;contrasts&quot;) attr(,&quot;contrasts&quot;)$C [1] &quot;contr.treatment&quot; attr(,&quot;contrasts&quot;)$O [1] &quot;contr.treatment&quot; "],["r-markdown.html", "5 R Markdown", " 5 R Markdown Sketch 동일한 문서에 코드, 결과, 텍스트가 동시에 있을 수 있을까? 만약 결과와 도표가 자동으로 생성된 경우 데이터가 변경 되더라도 자동으로 문서를 업데이트 할 수 있을까? 최종 완료한 문서가 미래에도 열 수 있을까? 이러한 모든 과정이 매우 쉽다면?? Figure 5.1: R markdown 세계(https://ulyngs.github.io/rmarkdown-workshop-2019 에서 발췌) "],["r-markdown의-구성.html", "5.1 R Markdown의 구성", " 5.1 R Markdown의 구성 본 절의 내용 중 일부는 지난 학기 강의노트 1.7절과 중복되거나 재구성한 내용이 포함됨. R Markdown은 R 코드와 분석 결과(표, 그림 등)을 포함한 문서 또는 컨텐츠를 제작하는 도구로 일반적으로 아래 열거한 형태로 활용함 문서 또는 논문(pdf, html, docx) 프리젠테이션(pdf, html, pptx) 웹 또는 블로그 재현가능(reproducible)한 분석 및 연구8 가능 신뢰성 있는 문서 작성 Copy &amp; paste를 하지 않고 효율적 작업 가능 R 마크다운 파일 = .Rmd 확장자를 가진 일반 텍스트 파일 --- title: &quot;Untitled.Rmd&quot; date: &quot;2020-09-11&quot; output: html_document --- ```{r setup, include=FALSE} knitr::opts_chunk$set(echo = TRUE) ``` ## R Markdown Markdown은 HTML, PDF 및 MS Word 문서를 작성하기 위한 간단한 형식의 지정 구문입니다. R Markdown 사용에 대한 자세한 내용은 &lt;http://rmarkdown.rstudio.com&gt;을 참조하십시오. **Knit** 버튼을 클릭하면 두 가지를 모두 포함하는 문서가 생성됩니다. 문서에 포함 된 R 코드 청크의 출력 내용뿐 아니라 다음과 같이 R 코드 청크를 포함 할 수 있습니다. ```{r cars} summary(cars) ``` ## Including Plots You can also embed plots, for example: ```{r pressure, echo=FALSE} plot(pressure) ``` `echo = FALSE` 매개 변수가 코드 청크에 추가 되었습니다. 플롯을 생성 한 R 코드의 인쇄를 방지합니다. 위 R Markdown 문서는 아래 그림과 같이 YAML, Markdown 텍스트, Code Chunk 세 부분으로 구성됨. Figure 5.2: R markdown structure YAML (YAML Ain’t Markup Language) R Markdown 문서의 metadata로 문서의 맨 처음에 항상 포함(header)되어야 함. R Markdown 문서의 최종 출력 형태(html, pdf, docx, pptx 등), 제목, 저자, 날짜 등의 정보 등을 포함 최종 문서 생성 과정 Rmd 파일을 knitr 을 통해 .md 파일로 변환 후 pandoc 이라는 문서 변환기를 통해 원하는 문서 포맷으로 출력 Figure 1.9: R Markdown의 최종 결과물 산출과정(http://applied-r.com/project-reporting-template/) 과학적 연구의 결과물을 오픈소스로 내놓고 누구라도 검증 가능↩︎ "],["r-markdown-기본-문법syntax.html", "5.2 R Markdown 기본 문법(syntax)", " 5.2 R Markdown 기본 문법(syntax) R Markdown의 기본 문법은 Rstudio 풀다운 메뉴 [Help] \\(\\rightarrow\\) [Markdown Quick Reference] 에서 확인 가능 5.2.1 텍스트 문법 강조(emphasis) 이텔릭체: *italic1*, _italic2_ \\(\\rightarrow\\) italic1, italic2 볼드(굵은)체: *bold1*, __bold2__ \\(\\rightarrow\\) bold1, bold2 Inline code `inline code` \\(\\rightarrow\\) inline code 아래/위 첨자(sub/superscript) subscript~2~ \\(\\rightarrow\\) subscript2 superscript^2^ \\(\\rightarrow\\) superscript2 삭제표시(strike through) ~~strikethrough~~ \\(\\rightarrow\\) strikethrough 생략표시(ellipsis) ... \\(\\rightarrow\\) … 긴/짧은 대쉬(en/em-dash) 긴 대쉬: --- \\(\\rightarrow\\) — 짧은 대쉬: -- \\(\\rightarrow\\) – 특수문자 탈출 지정자 \\*, \\_, \\~, \\\\ \\(\\rightarrow\\) *, _, ~, \\ 하이퍼링크 -[text](link) \\(\\rightarrow\\) R Markdown Cheat-sheet 외부그림 삽입 ![image title](path/to/image): ![장난꾸러기](figures/son-02.jpg) 장난꾸러기 강제 줄바꿈(line breaks) 하나의 줄에서 공백(space) 두 개 이상 또는 백슬레시(\\) 입력 후 [Enter] End a line with two spaces to start a new paragraph End a line with two spaces to start a new paragraph End a line with two spaces to start\\ a new paragraph End a line with two spaces to start a new paragraph 각주(footnote) A footnote^[주석내용] \\(\\rightarrow\\) A footnote9 주석(comment) &lt;!-- this is a comment that won't be shown --&gt; \\(\\rightarrow\\) RStudio에서 단축키 [Ctrl] + [Shift] + [C]를 통해 전체 line 에 대해 주석처리 가능 5.2.2 Block-level elements 장/절(header) # Header 1 (chapter, 장) ## Header 2 (section, 절) ### Header 3 (subsection, 관) 목록(list) 비순서(unordered) 목록: -, *, + 중 어느 하나로 입력 가능 - one item * two item + sub-item 1 + sub-item 2 - subsub-item 1 - subsub-item 2 one item two item sub-item 1 sub-item 2 subsub-item 1 subsub-item 2 순서(ordered) 목록: 비순서 목록의 기호 대신 숫자로 리스트 생성 1. the first item - sub-item 1 2. the second item 3. the third item the first item sub-item 1 the second item the third item 같은 숫자로 적어도 순서대로 목록 생성 1. the first item - sub-item 1 1. the second item 1. the third item the first item sub-item 1 the second item the third item 인용구(blockquote): &gt;로 시작 &gt; &quot;There are three kinds of lies: lies, damn lies, and statistics&quot; &gt; &gt; --- Benjamin Disraeli “There are three kinds of lies: lies, damn lies, and statistics” — Benjamin Disraeli 5.2.3 수식표현(math expression) 줄 안에 수식 입력 시 $수식표현$ 으로 입력 수식 display style (보통 교과서에 정리 및 정의에 기술된 수식들) 적용 시 $$ ~ $$ 안에 수식 입력 수식 표현은 LaTeX 의 수식 표현을 동일하게 준용(https://www.latex4technics.com/, https://latex.codecogs.com/legacy/eqneditor/editor.php 에서 수식 입력 명령어 학습 가능) LaTeX 수식 입력 코드는 예시 \\[ P(X = x) = f(x; n, p) = {n \\choose x} p^x (1-p)^{n-x} \\] Inline equation: $P(X = x) = f(x; n, p) = {n \\choose x} p^x (1-p)^{n-x}$ \\(\\rightarrow\\) \\(P(X = x) = f(x; n, p) = {n \\choose x} p^x (1-p)^{n-x}\\) Math block: $$P(X = x) = f(x; n, p) = {n \\choose x} p^x (1-p)^{n-x}$$ \\[P(X = x) = f(x; n, p) = {n \\choose x} p^x (1-p)^{n-x}\\] $ $ 또는 $$ $$ 안에 LaTeX에서 제공하는 수식 함수 사용 가능 $$\\begin{array}{ccc} x_{11} &amp; x_{12} &amp; x_{13}\\\\ x_{21} &amp; x_{22} &amp; x_{23} \\end{array}$$ \\[\\begin{array}{ccc} x_{11} &amp; x_{12} &amp; x_{13}\\\\ x_{21} &amp; x_{22} &amp; x_{23} \\end{array}\\] $$\\Theta = \\begin{pmatrix}\\alpha &amp; \\beta\\\\ \\gamma &amp; \\delta \\end{pmatrix}$$ \\[\\Theta = \\begin{pmatrix}\\alpha &amp; \\beta\\\\ \\gamma &amp; \\delta \\end{pmatrix}\\] $$\\begin{align} g(X_{n}) &amp;= g(\\theta)+g&#39;({\\tilde{\\theta}})(X_{n}-\\theta) \\notag \\\\ \\sqrt{n}[g(X_{n})-g(\\theta)] &amp;= g&#39;\\left({\\tilde{\\theta}}\\right) \\sqrt{n}[X_{n}-\\theta ] \\end{align}$$ \\[\\begin{aligned} g(X_{n}) &amp;= g(\\theta)+g&#39;({\\tilde{\\theta}})(X_{n}-\\theta) \\notag \\\\ \\sqrt{n}[g(X_{n})-g(\\theta)] &amp;= g&#39;\\left({\\tilde{\\theta}}\\right) \\sqrt{n}[X_{n}-\\theta ] \\end{aligned}\\] 주석내용↩︎ "],["r-code-chunks.html", "5.3 R Code Chunks", " 5.3 R Code Chunks 실제 R code가 실행되는 부분임 Code chunk 실행 시 다양한 옵션 존재(본 강의에서는 몇 개의 옵션만 다룰 것이며, 더 자세한 내용은 https://yihui.org/knitr/options/ 또는 R Markdown 레퍼런스 가이드 참조 Code chunk는 ```{r}로 시작되며 r은 code 언어 이름을 나타냄. Code chunk는 ``` 로 종료 R Markdown 문서 작성 시 단축키 [Ctrl] + [Alt] + [I]를 입력하면 Chunk 입력창이 자동 생성됨 Code chunk의 옵션 조정을 통해 코드의 출력여부, 코드 출력 시 코드의 출력 형태, 코드의 결과물 출력 조정 가능 Figure 5.3: Chunk anatomy (https://ulyngs.github.io/rmarkdown-workshop-2019 에서 발췌) 자주 활용하는 chunk 옵션 코드 실행 관련 청크 Table 5.1: 코드 실행 관련 청크 Chunk 옵션 Default 설명 eval TRUE R 실행(코드 실행 결과)에 대응하는 결과 출력 여부 include TRUE 출력 문서에 코드 청크의 내용을 포함할지 여부 ```{r ex01-1, eval=TRUE} summary(iris) hist(iris$Sepal.Length) ``` ```{r ex01-2, eval=FALSE} summary(iris) hist(iris$Sepal.Length) ``` #청크 옵션 eval=TRUE summary(iris) Sepal.Length Sepal.Width Petal.Length Petal.Width Min. :4.300 Min. :2.000 Min. :1.000 Min. :0.100 1st Qu.:5.100 1st Qu.:2.800 1st Qu.:1.600 1st Qu.:0.300 Median :5.800 Median :3.000 Median :4.350 Median :1.300 Mean :5.843 Mean :3.057 Mean :3.758 Mean :1.199 3rd Qu.:6.400 3rd Qu.:3.300 3rd Qu.:5.100 3rd Qu.:1.800 Max. :7.900 Max. :4.400 Max. :6.900 Max. :2.500 Species setosa :50 versicolor:50 virginica :50 hist(iris$Sepal.Length) #청크 옵션 eval=FALSE summary(iris) hist(iris$Sepal.Length) 소스 코드 출력(텍스트) 결과 관련 청크 Table 5.2: 소스 코드 출력 결과 관련 청크 Chunk 옵션 Default 설명 echo TRUE R 실행 결과에 대응하는 코드 출력 여부 results markup 출력 결과 포맷 지정을 위한 옵션으로 추가적으로 3 가지 옵션 선택 가능: ‘hide,’ ‘asis,’ ‘hold,’ ‘markup’ error TRUE 코드 또는 스크립트에 구문오류 메세지 출력 여부 message TRUE 코드로부터 생성된 메세지 출력 여부 warning TRUE 경고 메세지 출력 여부 echo: 코드 청크에 작성한 R-script 출력 여부 결정 echo = FALSE 이면 소스 코드 출력 없이 그림 결과만 출력 ```{r ex01-2, echo=TRUE} require(ggthemes) # ggtheme 패키지 불러오기 require(ggpubr) # ggpubr 패키지 불러오기 iris %&gt;% ggplot(aes(x = Sepal.Length, y = Petal.Width, color = Species)) + geom_point(size = 5) + theme_pubclean() + theme(axis.line = element_line(size = 0.8), legend.title = element_text(face = &quot;bold&quot;, size = 15), legend.text = element_text(face = &quot;bold&quot;, size = 12)) ``` ```{r ex01-3, echo=FALSE} require(ggthemes) # ggtheme 패키지 불러오기 require(ggpubr) # ggpubr 패키지 불러오기 iris %&gt;% ggplot(aes(x = Sepal.Length, y = Petal.Width, color = Species)) + geom_point(size = 5) + theme_pubclean() + theme(axis.line = element_line(size = 0.8), legend.title = element_text(face = &quot;bold&quot;, size = 15), legend.text = element_text(face = &quot;bold&quot;, size = 12)) ``` # echo = TRUE require(ggthemes) # ggtheme 패키지 불러오기 require(ggpubr) # ggpubr 패키지 불러오기 iris %&gt;% ggplot(aes(x = Sepal.Length, y = Petal.Width, color = Species)) + geom_point(size = 5) + theme_pubclean() + theme(axis.line = element_line(size = 0.8), legend.title = element_text(face = &quot;bold&quot;, size = 15), legend.text = element_text(face = &quot;bold&quot;, size = 12)) results: 코드의 텍스트 출력 결과 포맷 지정 markup (default): 코드 청크 내 스크립트의 출력 형태에 따라 텍스트 출력 결과를 mark-up asis: 변환하지 않은 원래 R 출력 결과 그대로(as is) 출력 hide: R 스크립트로 생성된 텍스트 출력을 보여주지 않음(warning, message 출력 예외) hold: 코드 청크로 생성된 모든 소스 및 출력을 단일 블록으로 축소 # results = &#39;markup&#39;인 경우 아래 텍스트를 mark-up # (이 경우 아래 텍스트는 ``` ``` 블럭 처리)한 결과를 md 파일로 전송 cat(&quot;I&#39;m raw **Markdown** content.\\n&quot;) I&#39;m raw **Markdown** content. Figure 5.4: 청크 옵션 results = ’markup’인 경우 rmd vs. md 파일 비교 # results = &#39;asis&#39; 인 경우 텍스트를 그대로 md 파일에 입력 cat(&quot;I&#39;m raw **Markdown** content.\\n&quot;) I’m raw Markdown content. Figure 5.5: 청크 옵션 results = ’asis’인 경우 rmd vs. md 파일 비교 # results = &#39;hide&#39; cat(&quot;I&#39;m raw **Markdown** content.\\n&quot;) # 텍스트 결과를 출력하지 않음 # results = &#39;hold&#39;가 아닌 경우 한 라인 별 출력 결과 생성 x &lt;- rnorm(10) x [1] 1.442557736 -0.157947174 0.010098028 -1.215905613 -0.676432559 [6] 1.471455952 0.592469244 -0.004468392 0.706690708 -0.472658684 y &lt;- rnorm(10, 1, 2) y [1] -0.6876653 1.2876016 4.9979167 3.8535540 -1.4102832 1.2299296 [7] 4.6060114 0.1971145 2.0983738 -0.5085941 x + y [1] 0.7548925 1.1296544 5.0080147 2.6376484 -2.0867158 2.7013856 [7] 5.1984807 0.1926461 2.8050645 -0.9812528 # results = &#39;hold&#39;인 경우 코드 부분과 출력 부분이 따로 블록 처리 x &lt;- rnorm(10) x y &lt;- rnorm(10, 1, 2) y x + y [1] 0.9001881 -0.6756496 1.4802336 -0.4144501 -0.7257396 0.2195122 [7] -0.8043865 0.2140246 1.2319485 0.9866379 [1] 2.68282653 7.05386846 -3.16520531 2.23998995 1.12760639 -0.02994966 [7] 5.68832594 2.09058673 2.71354457 6.07637251 [1] 3.5830147 6.3782188 -1.6849717 1.8255399 0.4018668 0.1895626 [7] 4.8839394 2.3046113 3.9454931 7.0630104 error: 코드 청크 내 스크립트에 오류에 대한 보존 여부(stop()) 기본적으로 Rmarkdown 컴파일 시 error에 대한 옵션이 FALSE이기 때문에 스크립트(코드)에 오류가 포함되면 컴파일이 정지됨. error = TRUE 이면 오류 메세지를 포함한 텍스트 결과를 출력 3x &lt;- 3 x &lt;- 25 # 위 행이 구문 오류를 포함하고 있기 때문에 # 오류 이후의 코드는 실행되지 않음 x Error: &lt;text&gt;:1:2: 예상하지 못한 기호(symbol)입니다. 1: 3x ^ message/warning: 텍스트 출력물 중 경고(warning, warning() 함수의 출력 결과) 메세지 출력 여부 결정 # message = TRUE 인 경우 함수 message 출력 testit &lt;- function() { message(&quot;testing package startup messages&quot;) packageStartupMessage(&quot;initializing ...&quot;, appendLF = FALSE) Sys.sleep(1) packageStartupMessage(&quot; done&quot;) } # help(message) 예시 중 발췌 testit() testing package startup messages initializing ... done # message=FALSE -&gt; 메세지 출력하지 않음 testit() # 경고 메세지 출력 x &lt;- c(1, 2, &quot;new&quot;, 4:10) x &lt;- as.numeric(x) Warning: 강제형변환에 의해 생성된 NA 입니다 코드 서식 관련 청크 옵션 Table 5.3: 코드 서식 관련 청크 Chunk 옵션 Default 설명 comment TRUE 소스 코드 실행 출력의 각 줄 앞에 붙는 표시문자 출력 여부: 기본 값은 ‘##’ 임 highlight TRUE 구문 강조 여부 prompt FALSE R 프롬프트 출력 여부 tidy FALSE R 소스 코드 출력 정리 여부 comment: 텍스트 출력물에 주석 표시(default)를 함으로써 소스 코드와 출력 결과를 동시 선택과 복사를 가능(##는 주석 표시이기 때문에 실행되지 않음) 주석 표시를 제거하고 싶다면 comment = NA 또는 comment = '' # 디폴트 comment 사용 summary(iris) ## Sepal.Length Sepal.Width Petal.Length Petal.Width ## Min. :4.300 Min. :2.000 Min. :1.000 Min. :0.100 ## 1st Qu.:5.100 1st Qu.:2.800 1st Qu.:1.600 1st Qu.:0.300 ## Median :5.800 Median :3.000 Median :4.350 Median :1.300 ## Mean :5.843 Mean :3.057 Mean :3.758 Mean :1.199 ## 3rd Qu.:6.400 3rd Qu.:3.300 3rd Qu.:5.100 3rd Qu.:1.800 ## Max. :7.900 Max. :4.400 Max. :6.900 Max. :2.500 ## Species ## setosa :50 ## versicolor:50 ## virginica :50 ## ## ## highlight: 구문 강조 표시 여부 highlight=FALSE 일 때 소스 코드 출력 결과 # highlight=FALSE iris %&gt;% ggplot(aes(x = Sepal.Length, y = Petal.Width, color = Species)) + geom_point(size = 5) + theme_pubclean() + theme(axis.line = element_line(size = 0.8), legend.title = element_text(face = &quot;bold&quot;, size = 15), legend.text = element_text(face = &quot;bold&quot;, size = 12)) prompt: R 콘솔 상 프롬프트 &gt;, + 출력 여부 &gt; # prompt = TRUE 인 경우 코드 출력 결과 &gt; require(ggthemes) # ggtheme 패키지 불러오기 &gt; require(ggpubr) # ggpubr 패키지 불러오기 &gt; iris %&gt;% + ggplot(aes(x = Sepal.Length, y = Petal.Width, color = Species)) + + geom_point(size = 5) + + theme_pubclean() + + theme(axis.line = element_line(size = 0.8), + legend.title = element_text(face = &quot;bold&quot;, size = 15), + legend.text = element_text(face = &quot;bold&quot;, size = 12)) tidy: 코드를 사용자가 지정(혹은 formatR::tidy_sorce() 함수에 초기값으로 지정된 코드 정리 값)한 줄 당 문자 길이 등을 반영해 코드를 정리 tidy=TRUE 인 경우 자동으로 줄 바꿈 &gt; # tidy = FALSE 인 경우 코드 출력 결과 &gt; require(ggthemes) # ggtheme 패키지 불러오기 &gt; require(ggpubr) # ggpubr 패키지 불러오기 &gt; iris %&gt;% ggplot(aes(x = Sepal.Length, y = Petal.Width, color = Species)) + geom_point(size = 5) + theme_pubclean() + theme(axis.line = element_line(size = 0.8), legend.title = element_text(face = &quot;bold&quot;, size = 15), legend.text = element_text(face = &quot;bold&quot;, size = 12)) &gt; # tidy = TRUE 인 경우 코드 출력 결과 &gt; require(ggthemes) # ggtheme 패키지 불러오기 &gt; require(ggpubr) # ggpubr 패키지 불러오기 &gt; iris %&gt;% + ggplot(aes(x = Sepal.Length, y = Petal.Width, color = Species)) + geom_point(size = 5) + + theme_pubclean() + theme(axis.line = element_line(size = 0.8), legend.title = element_text(face = &quot;bold&quot;, + size = 15), legend.text = element_text(face = &quot;bold&quot;, size = 12)) 그림(plot) 출력 관련 청크 옵션 Table 5.4: Plot 출력 관련 청크 Chunk 옵션 Default 설명 fig.align default 최종 문서에 plot 정렬 방식 결정(center/left/right) fig.height/fig.width 7 그림 크기(단위: 인치) fig.cap NULL 그림 캡션(문자열 입력) dpi 72 dot per inche: 출력 그림 해상도 알아두면 좋은 청크 형태 Setup 청크 일반적으로 Rmarkdown 문서는 YAML 해더 뒤에 전역적 청크 옵션 지정과 R 패키지를 불러오는 것으로 시작 청크 옵션은 knitr::opts_chunk$set(청크 옵션 지정) 형태로 지정 가능 다음은 RStudio 에서 Rmd 문서 생성 시 맨 처음 나오는 코드 청크 예시임 ```{r ex01-2, include=FALSE} knitr::opts_chunk$set(echo = TRUE) ``` 일반적 활용 예시 ```{r option-init, include=FALSE} knitr::opts_chunk$set(root.dir = &#39;../..&#39;, # 프로젝트 폴더 지정 eval = TRUE, echo = FALSE, cache = FALSE, include = TRUE, tidy = TRUE, tidy.opts = list(blank=FALSE, width.cutoff=120), # 소스 출력길이 지정 message = FALSE, warning = FALSE, engine = &quot;R&quot;, # Chunks will always have R code, unless noted error = TRUE, fig.path=&quot;Figures/&quot;, # Set the figure options fig.align = &quot;center&quot;, fig.width = 7, fig.height = 7, fig.keep=&#39;all&#39;, fig.retina=2) ``` 이미지 불러오기 ```{r, fig.cap = &quot;Taj Mahal&quot;} knitr::include_graphics(&quot;figures/taj.JPG&quot;, dpi = NA) ``` Figure 5.6: Taj Mahal ```{r, fig.cap = &quot;Scatterplot of the car dataset&quot;} cars %&gt;% ggplot(aes(x = speed, y = dist)) + geom_point(size = 5) + theme_tufte(base_size = 15) # ggtheme::theme_tufte() ``` R 생성 도표 포함 Figure 5.7: Scatterplot of the car dataset 테이블 삽입 가장 간단한 테이블은 knitr::kable() 함수를 통해 생성 가능 kable() 함수는 가장 단순한 형태의 표만 생성하기 때문에 복잡한 표를 만들기에는 한계가 존재함 이를 보완하기 위해 다음과 같은 패키지 활용 kableExtra: HTML 또는 LaTeX 용 표 생성 https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_pdf.pdf flextable + officer: HTML, 워드 문서 표 작성 https://davidgohel.github.io/flextable/ ```{r} knitr::kable(head(iris)) ``` Sepal.Length Sepal.Width Petal.Length Petal.Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 5.4 3.9 1.7 0.4 setosa "],["inline-code.html", "5.4 인라인(inline) R 코드", " 5.4 인라인(inline) R 코드 문서의 모든 숫자를 인라인 R 코드를 통해 재현가능하게 생성 가능 인라인 R 코드는 `r 과 ` 사이에 변수 계산 스크립트를 입력해 작성 가능 예를 들어 `r 10 + 4` 는 14 출력 활용 예시 head(mtcars, 5) N &lt;- nrow(mtcars) mtcars 데이터셋에 포함된 자동차는 `r N ` 개다. \\(\\rightarrow\\) mtcars 데이터셋에 포함된 자동차는 32 개다. "],["yaml.html", "5.5 YAML", " 5.5 YAML R Markdown 문서의 가장 처음에 정의하는 metadata .Rmd 파일을 .md 파일로 변환 후 최종 출력문서 생성 시 필요한 pandoc의 옵션을 설정하는 것과 같은 의미임 일반적으로 문서 형태 및 생성을 위해 사용하는 R package (예: bookdown, officedown, rticles 등)에 따라 YAML 구성요소가 달라짐 기본 문법 /#: 주석 처리 YAML 문서의 시작과 끝은 --- 로 정의함 기본적으로 콜론(:)으로 구분된 태그(키): 값 쌍으로 구성됨 \\(\\rightarrow\\) key: value 여기서 콜론 바로 다음에는 반드시 공백문자가 있어야 함 한 key의 하위 키는 리스트 형태로 표현하고, 하위 키는 두 개 이상의 스페이스로 공백을 주어 표현 --- key : value subkey1: value1 subkey2: value2 subsubkey1: value3 --- R Markdown 기본 YAML 구조 --- title: &quot;문서 제목&quot; # 일반적으로 따옴표 사용 subtitle: &quot;문서 부제목&quot; author: &quot;문서 작성자&quot; date: &quot;문서 작성일자&quot; output: - &quot;html_document&quot; - &quot;word_document&quot; - &quot;pdf_document&quot; - &quot;md_document&quot; - &quot;isoslides_presentation&quot; - &quot;slidy_presentation&quot; - &quot;beamer_presentation&quot; bibliography: 참고문헌.bib # bibtex 서식 활용 . . . --- https://bookdown.org/yihui/rmarkdown/documents.html 에 자세한 예시 참고 "],["rmarkdown-citation.html", "5.6 참고문헌 인용", " 5.6 참고문헌 인용 참고문헌 정보가 BibTeX 포맷으로 저장된 .bib 파일을 YAML에 선언 후 인용 가능 참고문헌 표현: [@citation-identifier] 또는 @citation-identifier BibTeX 포맷은 Google Scholar 에서 쉽게 획득 가능 Citation 스타일은 YAML 헤더에 csl: style.csl로 변경 가능하며 Zotero 에서 .csl 파일 다운로드 가능 "],["r-외부-데이터-입출력.html", "6 R 외부 데이터 입출력", " 6 R 외부 데이터 입출력 R 기본 함수를 이용해서 데이터 저장 파일의 가장 기본적인 형태인 텍스트 파일을 읽고 저장하는 방법에 대해 먼저 살펴봄. Base R에서 외부 데이터를 읽고 저장을 위한 함수는 매우 다양하지만 가장 많이 사용되고 있는 함수들에 대해 살펴볼 것임 기본 R(base R)에서 제공하는 함수를 이용해 외부 데이터를 읽고, 내보내고, 저장하는 방법에 대해 살펴봄. 가장 일반적인 형태의 데이터는 보통 텍스트 파일 형태로 저장되어 있음, 일반적으로 첫 번째 줄: 변수명 두 번째 줄 부터: 데이터 입력 id sex age edulev height 1 Male 65 12 168 2 Female 74 9 145 3 Male 61 12 171 4 Male 85 6 158 5 Female 88 0 134 데이터의 자료값과 자료값을 구분하는 문자를 구분자(separator)라고 하며 주로 공백(), 콤마(,), tab 문자(\\t) 등이 사용됨 주로 확장자 명이 *.txt 이며, 콤마 구분자인 경우 보통은 *.csv (comma separated values)로 저장 #titanic3.csv 파일 일부 &quot;pclass&quot;,&quot;survived&quot;,&quot;name&quot;,&quot;sex&quot;,&quot;age&quot;, 1,1,&quot;Allen, Miss. Elisabeth Walton&quot;,&quot;female&quot; 1,1,&quot;Allison, Master. Hudson Trevor&quot;,&quot;male&quot; 1,0,&quot;Allison, Miss. Helen Loraine&quot;, &quot;female&quot; 1,0,&quot;Allison, Mr. Hudson Joshua Creighton&quot;,&quot;male&quot; 1,0,&quot;Allison, Mrs. Hudson J C (Bessie Waldo Daniels)&quot;,&quot;female&quot; "],["text-import-export.html", "6.1 텍스트 파일 입출력", " 6.1 텍스트 파일 입출력 외부 데이터를 불러온다는 것은 외부에 저장되어 있는 파일을 R 작업환경으로 읽어온다는 의미이기 때문에, 현재 작업공간의 작업 디렉토리(working directory) 확인이 필요. read.table()/write.table(): 가장 범용적으로 외부 텍스트 데이터를 R 작업공간으로 데이터 프레임으로 읽고 저장하는 함수 텍스트 파일의 형태에 따라 구분자 지정 가능 # read.table(): 텍스트 파일 읽어오기 read.table( file, # 파일명. 일반적으로 폴더명 구분자 # 보통 folder/파일이름.txt 형태로 입력 header = FALSE, # 첫 번째 행을 헤더(변수명)으로 처리할 지 여부 sep = &quot;&quot;, # 구분자 &quot;,&quot;, &quot;\\t&quot; 등의 형태로 입력 comment.char = &quot;#&quot;, # 주석문자 지정 stringsAsFactors = TRUE, # 문자형 변수를 factor으로 변환할 지 여부 encoding = &quot;unknown&quot; # 텍스트의 encoding 보통 CP949 또는 UTF-8 # 한글이 입력된 데이터가 있을 때 사용 ) read.table() 예시 예시에 사용된 데이터들은 Clinical trial data analysis using R (Chen and Peace 2010)에서 제공되는 데이터임. # tab 구분자 데이터 불러오기 # dataset 폴더에 저장되어 있는 DBP.txt 파일 읽어오기 dbp &lt;- read.table(&quot;dataset/DBP.txt&quot;, sep = &quot;\\t&quot;, header = TRUE) str(dbp) &#39;data.frame&#39;: 40 obs. of 9 variables: $ Subject: int 1 2 3 4 5 6 7 8 9 10 ... $ TRT : chr &quot;A&quot; &quot;A&quot; &quot;A&quot; &quot;A&quot; ... $ DBP1 : int 114 116 119 115 116 117 118 120 114 115 ... $ DBP2 : int 115 113 115 113 112 112 111 115 112 113 ... $ DBP3 : int 113 112 113 112 107 113 100 113 113 108 ... $ DBP4 : int 109 103 104 109 104 104 109 102 109 106 ... $ DBP5 : int 105 101 98 101 105 102 99 102 103 97 ... $ Age : int 43 51 48 42 49 47 50 61 43 51 ... $ Sex : chr &quot;F&quot; &quot;M&quot; &quot;F&quot; &quot;F&quot; ... # 문자형 값들을 factor로 변환하지 않는 경우 dbp2 &lt;- read.table(&quot;dataset/DBP.txt&quot;, sep = &quot;\\t&quot;, header = TRUE, stringsAsFactors = FALSE) str(dbp2) &#39;data.frame&#39;: 40 obs. of 9 variables: $ Subject: int 1 2 3 4 5 6 7 8 9 10 ... $ TRT : chr &quot;A&quot; &quot;A&quot; &quot;A&quot; &quot;A&quot; ... $ DBP1 : int 114 116 119 115 116 117 118 120 114 115 ... $ DBP2 : int 115 113 115 113 112 112 111 115 112 113 ... $ DBP3 : int 113 112 113 112 107 113 100 113 113 108 ... $ DBP4 : int 109 103 104 109 104 104 109 102 109 106 ... $ DBP5 : int 105 101 98 101 105 102 99 102 103 97 ... $ Age : int 43 51 48 42 49 47 50 61 43 51 ... $ Sex : chr &quot;F&quot; &quot;M&quot; &quot;F&quot; &quot;F&quot; ... # 데이터 형태 파악 head(dbp) # 콤마 구분자 데이터 불러오기 # dataset 폴더에 저장되어 있는 diabetes_csv.txt 파일 읽어오기 diab &lt;- read.table(&quot;dataset/diabetes_csv.txt&quot;, sep = &quot;,&quot;, header = TRUE) str(diab) &#39;data.frame&#39;: 403 obs. of 19 variables: $ id : int 1000 1001 1002 1003 1005 1008 1011 1015 1016 1022 ... $ chol : int 203 165 228 78 249 248 195 227 177 263 ... $ stab.glu: int 82 97 92 93 90 94 92 75 87 89 ... $ hdl : int 56 24 37 12 28 69 41 44 49 40 ... $ ratio : num 3.6 6.9 6.2 6.5 8.9 ... $ glyhb : num 4.31 4.44 4.64 4.63 7.72 ... $ location: chr &quot;Buckingham&quot; &quot;Buckingham&quot; &quot;Buckingham&quot; &quot;Buckingham&quot; ... $ age : int 46 29 58 67 64 34 30 37 45 55 ... $ gender : chr &quot;female&quot; &quot;female&quot; &quot;female&quot; &quot;male&quot; ... $ height : int 62 64 61 67 68 71 69 59 69 63 ... $ weight : int 121 218 256 119 183 190 191 170 166 202 ... $ frame : chr &quot;medium&quot; &quot;large&quot; &quot;large&quot; &quot;large&quot; ... $ bp.1s : int 118 112 190 110 138 132 161 NA 160 108 ... $ bp.1d : int 59 68 92 50 80 86 112 NA 80 72 ... $ bp.2s : int NA NA 185 NA NA NA 161 NA 128 NA ... $ bp.2d : int NA NA 92 NA NA NA 112 NA 86 NA ... $ waist : int 29 46 49 33 44 36 46 34 34 45 ... $ hip : int 38 48 57 38 41 42 49 39 40 50 ... $ time.ppn: int 720 360 180 480 300 195 720 1020 300 240 ... head(diab) # Encoding이 다른 경우(한글데이터 포함): # 한약재 사전 데이터 (CP949 encoding으로 저장) # tab 구분자 데이터 사용 # UTF-8로 읽어오기 herb &lt;- read.table(&quot;dataset/herb_dic_sample.txt&quot;, sep = &quot;\\t&quot;, header = TRUE, encoding = &quot;UTF-8&quot;, stringsAsFactors = FALSE) head(herb) # CP949로 읽어오기 herb &lt;- read.table(&quot;dataset/herb_dic_sample.txt&quot;, sep = &quot;\\t&quot;, header = TRUE, encoding = &quot;CP949&quot;, stringsAsFactors = FALSE) head(herb) read.table() + textConnection(): 웹사이트나 URL에 있는 데이터를 Copy + Paste 해서 읽어올 경우 유용하게 사용 textConnection(): 텍스트에서 한 줄씩 읽어 문자형 벡터처럼 인식할 수 있도록 해주는 함수 # Plasma 데이터: http://lib.stat.cmu.edu/datasets/Plasma_Retinol input1 &lt;- (&quot;64 2 2 21.4838 1 1298.8 57 6.3 0 170.3 1945 890 200 915 76 2 1 23.87631 1 1032.5 50.1 15.8 0 75.8 2653 451 124 727 38 2 2 20.0108 2 2372.3 83.6 19.1 14.1 257.9 6321 660 328 721 40 2 2 25.14062 3 2449.5 97.5 26.5 0.5 332.6 1061 864 153 615 72 2 1 20.98504 1 1952.1 82.6 16.2 0 170.8 2863 1209 92 799 40 2 2 27.52136 3 1366.9 56 9.6 1.3 154.6 1729 1439 148 654 65 2 1 22.01154 2 2213.9 52 28.7 0 255.1 5371 802 258 834 58 2 1 28.75702 1 1595.6 63.4 10.9 0 214.1 823 2571 64 825 35 2 1 23.07662 3 1800.5 57.8 20.3 0.6 233.6 2895 944 218 517 55 2 2 34.96995 3 1263.6 39.6 15.5 0 171.9 3307 493 81 562&quot;) input2 &lt;- (&quot;AGE: Age (years) SEX: Sex (1=Male, 2=Female). SMOKSTAT: Smoking status (1=Never, 2=Former, 3=Current Smoker) QUETELET: Quetelet (weight/(height^2)) VITUSE: Vitamin Use (1=Yes, fairly often, 2=Yes, not often, 3=No) CALORIES: Number of calories consumed per day. FAT: Grams of fat consumed per day. FIBER: Grams of fiber consumed per day. ALCOHOL: Number of alcoholic drinks consumed per week. CHOLESTEROL: Cholesterol consumed (mg per day). BETADIET: Dietary beta-carotene consumed (mcg per day). RETDIET: Dietary retinol consumed (mcg per day) BETAPLASMA: Plasma beta-carotene (ng/ml) RETPLASMA: Plasma Retinol (ng/ml)&quot;) plasma &lt;- read.table(textConnection(input1), sep = &quot;\\t&quot;, header = F) codebook &lt;- read.table(textConnection(input2), sep = &quot;:&quot;, header = F) varname &lt;- gsub(&quot;^\\\\s+&quot;, &quot;&quot;, codebook$V1) # 변수명 지정 names(plasma) &lt;- varname head(plasma) write.table(): R의 객체(벡터, 행렬, 데이터 프레임)를 저장 후 외부 텍스트 파일로 내보내기 위한 함수 # write.table() R 객체를 텍스트 파일로 저장하기 write.table( data_obj, # 저장할 객체 이름 file, # 저장할 위치 및 파일명 또는 # 또는 &quot;파일쓰기&quot;를 위한 연결 명칭 sep, # 저장 시 사용할 구분자 row.names = TRUE # 행 이름 저장 여부 ) 예시 # 위에서 읽어온 plasma 객체를 dataset/plasma.txt 로 내보내기 # 행 이름은 생략, tab으로 데이터 구분 write.table(plasma, &quot;dataset/plasma.txt&quot;, sep = &quot;\\t&quot;, row.names = F) 파일명 대신 Windows clipboard 로 내보내기 가능 # clipboard로 복사 후 excel 시트에 해당 데이터 붙여넣기 # Ctrl + V write.table(plasma, &quot;clipboard&quot;, sep = &quot;\\t&quot;, row.names = F) read.csv()/write.csv(): read.table() 함수의 wrapper 함수로 구분자 인수 sep이 콤마(,)로 고정(예시 생략) References "],["binary-import-export.html", "6.2 R 바이너리(binary) 파일 입출력", " 6.2 R 바이너리(binary) 파일 입출력 R 작업공간에 존재하는 한 개 이상의 객체들을 저장하고 읽기 위한 함수 R 데이터 관련 바이너리 파일은 한 개 이상의 객체가 저장된 바이너리 파일인 경우 *.Rdata 형태를 갖고, 단일 객체를 저장할 경우 보통 *.rds 파일 확장자로 저장 *.Rdata 입출력 함수 load(): *.Rdata 파일 읽어오기 save(): 한 개 이상 R 작업공간에 존재하는 객체를 .Rdata 파일로 저장 save.image(): 현재 R 작업공간에 존재하는 모든 객체를 .Rdata 파일로 저장 # 현재 작업공간에 존재하는 모든 객체를 &quot;output&quot; 폴더에 저장 # output 폴더가 존재하지 않는 경우 아래 명령 실행 # dir.create(&quot;output&quot;) ls() [1] &quot;codebook&quot; &quot;dbp&quot; &quot;dbp2&quot; &quot;def.chunk.hook&quot; [5] &quot;diab&quot; &quot;hook_output&quot; &quot;input1&quot; &quot;input2&quot; [9] &quot;plasma&quot; &quot;varname&quot; save.image(file = &quot;output/all_obj.Rdata&quot;) rm(list = ls()) ls() character(0) # 저장된 binary 파일(all_obj.Rdata) 불러오기 load(&quot;output/all_obj.Rdata&quot;) ls() [1] &quot;codebook&quot; &quot;dbp&quot; &quot;dbp2&quot; &quot;def.chunk.hook&quot; [5] &quot;diab&quot; &quot;hook_output&quot; &quot;input1&quot; &quot;input2&quot; [9] &quot;plasma&quot; &quot;varname&quot; # dnp, plasma 데이터만 output 폴더에 sub_obj.Rdata로 저장 save(dbp, plasma, file = &quot;output/sub_obj.Rdata&quot;) rm(list = c(&quot;dbp&quot;, &quot;plasma&quot;)) ls() [1] &quot;codebook&quot; &quot;dbp2&quot; &quot;def.chunk.hook&quot; &quot;diab&quot; [5] &quot;hook_output&quot; &quot;input1&quot; &quot;input2&quot; &quot;varname&quot; # sub_obj.Rdata 파일 불러오기 load(&quot;output/sub_obj.Rdata&quot;) ls() [1] &quot;codebook&quot; &quot;dbp&quot; &quot;dbp2&quot; &quot;def.chunk.hook&quot; [5] &quot;diab&quot; &quot;hook_output&quot; &quot;input1&quot; &quot;input2&quot; [9] &quot;plasma&quot; &quot;varname&quot; *.rds 입출력 함수 readRDS()/ saveRDS(): 단일 객체가 저장된 *.rds 파일을 읽거나 저장 대용량 데이터를 다룰 때 유용함 read.table() 보다 데이터를 읽는 속도가 빠르며, 다른 확장자 명의 텍스트 파일보다 높은 압축율을 보임 # 대용량 파일 dataset/pulse.csv 불러오기 # system.time(): 명령 실행 시가 계산 함수 system.time(pulse &lt;- read.csv(&quot;dataset/pulse.csv&quot;, header = T)) 사용자 시스템 elapsed 4.658 0.036 4.698 # saveRDS()함수를 이용해 output/pulse.rds 파일로 저장 saveRDS(pulse, &quot;output/pulse.rds&quot;) rm(pulse); ls() [1] &quot;codebook&quot; &quot;dbp&quot; &quot;dbp2&quot; &quot;def.chunk.hook&quot; [5] &quot;diab&quot; &quot;hook_output&quot; &quot;input1&quot; &quot;input2&quot; [9] &quot;plasma&quot; &quot;varname&quot; system.time(pulse &lt;- readRDS(&quot;output/pulse.rds&quot;)) 사용자 시스템 elapsed 0.079 0.000 0.079 "],["import-export-excel.html", "6.3 Excel 파일 입출력", " 6.3 Excel 파일 입출력 R에서 기본적으로 제공하는 파일 입출력 함수는 대부분 텍스트 파일(*.txt, *.csv, *.tsv10)을 대상으로 하고 있음 readr 패키지에서도 이러한 원칙은 유지됨 Excel 파일을 R로 읽어오기(과거 방법) *.xls 또는 *.xlsx 파일을 엑셀로 읽은 후 해당 데이터를 위 텍스트 파일 형태로 내보낸 후 해당 파일을 R로 읽어옴 xlsx 패키지 등을 이용해 엑셀 파일을 직접 읽어올 수 있으나, Java 기반으로 개발된 패키지이기 때문에 Java Runtime Environment를 운영체제에 설치해야만 작동 최근 tidyverse 중 하나인 readxl 패키지를 이용해 간편하게 R 작업환경에 엑셀 파일을 읽어오는 것이 가능(Hadley Wickham이 개발…) tidyverse의 한 부분임에도 불구하고 tidyverse 패키지 번들에는 포함되어 있지 않기 때문에 별도 설치 필요 readxl 패키지 구성 주요 함수 read_xls(), read_xlsx(), read_excel: 엑셀 파일을 읽어오는 함수로 각각 Excel 97 ~ 2003, Excel 2007 이상, 또는 버전 상관 없이 저장된 엑셀 파일에 접근함 excel_sheets(): 엑셀 파일 내 시트 이름 추출 \\(\\rightarrow\\) 한 엑셀 파일의 복수 시트에 데이터가 저장되어 있는 경우 활용 예시: 2020년 4월 23일 COVID-19 유병률 데이터 (Our World in Data) read_xlsx( path, # Excel 폴더 및 파일 이름 sheet = NULL, # 불러올 엑셀 시트 이름 # default = 첫 번째 시트 col_names = TRUE, # read_csv()의 인수와 동일한 형태 입력 col_types = NULL # read_csv()의 인수와 동일한 형태 입력 ) # 2020년 4월 21일자 COVID-19 국가별 유별률 및 사망률 집계 자료 # dataset/owid-covid-data.xlsx 파일 불러오기 # install.packages(&quot;readxl&quot;) require(readxl) 필요한 패키지를 로딩중입니다: readxl covid19 &lt;- read_xlsx(&quot;dataset/covid-19-dataset/owid-covid-data.xlsx&quot;) covid19 # 여러 시트를 동시에 불러올 경우 # dataset/datR4CTDA.xlsx 의 모든 시트 불러오기 path &lt;- &quot;dataset/datR4CTDA.xlsx&quot; sheet_name &lt;- excel_sheets(path) dL &lt;- lapply(sheet_name, function(x) read_xlsx(path, sheet = x)) names(dL) &lt;- sheet_name tab separated values↩︎ "],["control-structure.html", "7 제어문(Control Structure)", " 7 제어문(Control Structure) Sketch 프로그램 안의 특정 구문을 주어진 조건에 맞게 실행 여부를 제어하거나 동일한 작업을 반복할 수 있을까? 프로그램을 통해 특정 목적을 위한 나만의 함수를 만들 수 있을까? Figure 5.1: Flow-control example (https://homerhanumat.github.io/r-notes/flow.html) 참고: 본 장의 내용은 데이터과학 민주화와 Beginning Computer Programming with R의 내용을 기반으로 재구성함 "],["condition.html", "7.1 조건문(Conditionals)", " 7.1 조건문(Conditionals) if 구문을 통해 조건문 생성 불린 표현식(boolean expression): 참(TRUE) 또는 거짓(FALSE) 두 값 중 하나로 값이 도출되는 표현식11 비교 연산자(comparison operators) 같다, 같지 않다, 크다 등을 표현하기 위한 연산자 ==, !=, &gt;, &lt;, &gt;=, &lt;= 논리 연산자(logical operator) AND (&amp;, &amp;&amp;), OR (|, ||), NOT (!) x &lt;- 10; y &lt;- 13 # x가 2의 배수이고 y가 3의 배수 # 두 조건이 모두 참이여야 참 x %% 2 == 0 &amp; y %% 3 == 0 # x가 2의 배수이거나 y가 3의 배수 # 두 개 조건 중 하나만 참을 만족하면 참임 x %% 2 == 0 | y %% 3 == 0 # NOT (x &gt; y) !(x &gt; y) # 부정에 부정은 참 [1] FALSE [1] TRUE [1] TRUE 7.1.1 기본 구문 if (조건) 표현식 └ 괄호 안 조건을 만족하면 표현식을 실행하고 조건을 만족하지 않으면 실행하지 않음 x &lt;- 10 if (x &gt; 0) { print(&quot;x is positive&quot;) } x &lt;- -5 if (x &gt; 0) { print(&quot;x is positive&quot;) } [1] &quot;x is positive&quot; Figure 7.1: if 구문 기본 flow-chart if 구문의 사용 규칙 if 문은 조건을 정의하는 헤더 부분((, ))과 표현식이 위치하는 몸통 블록(body block, {표현식}) 으로 구성됨 (, )에 표현되는 조건은 벡터가 아닌 단일 값으로 나타내야 함. {, } 의 표현 또는 문장이 한 줄인 경우 블록 지정이 필요하지 않지만, 두 줄 이상인 경우 if 문의 범위를 지정해줘야 하기 때문에 꼭 중괄호(curly bracket, {})가 사용되야 함. # 조건문 사용 예시 x &lt;- c(TRUE, FALSE, FALSE) y &lt;- c(TRUE, TRUE, FALSE) z &lt;- &quot;Both TRUE!!&quot; if (x[1] &amp; y[1]) print(z) # x, y 첫 번째 원소만 사용 if (x &amp;&amp; y) print(z) # 강제로 첫 번째 원소만 사용 if (x &amp; y) print(z) # 경고 표시 Warning in if (x &amp; y) print(z): length &gt; 1 이라는 조건이 있고, 첫번째 요소만이 사용될 것입니다 [1] &quot;Both TRUE!!&quot; [1] &quot;Both TRUE!!&quot; [1] &quot;Both TRUE!!&quot; 대안 실행(alternative execution) 두 가지 경우가 존재하고 조건에 따라 어떤 명령을 실행할지를 결정 if와 else로 표현 가능 조건에 따라 실행이 분기(branch) 되기 때문에 if-else 구문을 분기문이라고도 함 else 는 if 조건을 배제(exclusive)한 나머지 경우이기 때문에 조건을 따로 지정하지 않으며, if와 동일하게 중괄호 내에 표현되어야 함 x &lt;- 9 if (x %% 2 == 0) { print(&quot;x is even&quot;) } else { print(&quot;x is odd&quot;) } [1] &quot;x is odd&quot; Figure 7.2: 대안실행(if-else 구문) flow-chart 7.1.2 연쇄 조건문(chained condition) 두 가지 이상의 분기가 존재하는 경우 조건 표현식 연쇄 조건문의 표현은 아래와 같음 if (조건1) { 표현식1 ... } else if (조건2) { 표현식2 ... } else { 표현식3 ... } x &lt;- 5; y &lt;- 10 if (x &lt; y) { print(&quot;x is less than y&quot;) } else if (x &gt; y) { print(&quot;x is greater than y&quot;) } else { print(&quot;x is equal to y&quot;) } [1] &quot;x is less than y&quot; Figure 7.3: 연쇄조건(if-else if-else 구문) flow-chart 7.1.3 중첩 조건문(nested contition) 하나의 조건문 내부에 하위 조건식이 존재하는 형태 if (조건1) { 표현식1 ... } else { if (조건2) { 표현식2 ... } else { 표현식3 ... } } x &lt;- 10; y &lt;- 10 if (x == y) { print(&quot;x is equal to y&quot;) } else { if (x &gt; y) { print(&quot;x is greater than y&quot;) } else { print(&quot;x is less than y&quot;) } } [1] &quot;x is equal to y&quot; Figure 7.4: 중첩 조건문 flow-chart 중첩 조건문은 코드의 가독성을 떨어뜨리기 때문에 피하는 것을 권장 중첩 조건문을 피하기 위한 한 가지 방법은 논리 연산자를 활용 # 중첩조건 x &lt;- 58 if (x &gt; 0) { if (x &lt; 10) { print(&quot;x는 한 자리 양수&quot;) } else { if (x &lt; 100) { print(&quot;x는 두 자리 양수&quot;) } else { print(&quot;x는 세 자리 이상 양수&quot;) } } } [1] &quot;x는 두 자리 양수&quot; # 연쇄 조건 x &lt;- 2020 if (x &gt; 0 &amp; x &lt; 10) { print(&quot;x는 한 자리 양수&quot;) } else if (x &gt;=10 &amp; x &lt; 100) { print(&quot;x는 두 자리 양수&quot;) } else { print(&quot;x는 세 자리 이상 양수&quot;) } [1] &quot;x는 세 자리 이상 양수&quot; 7.1.4 ifelse() 함수 if-else 구문을 사용하기 쉽게 구현된 R 내장 함수 if-else 구문과 다르게 조건 부분에 한 값(스칼라)이 아닌 논리형 벡터를 입력값으로 받아 조건에 따른 값(벡터)을 반환 # ifelse() 함수 인수 # help(ifelse) 참고 ifelse( test, 조건에 따른 논리형 벡터 yes, test에 정의한 조건이 참인 경우 새로운 벡터에 대입할 값 no, test 조건이 거짓인 경우 대입할 값 ) 사용 예시 # 평균이 23이고 표준편차가 5인 정규분포로부터 30개의 난수 추출 set.seed(12345) bmi &lt;- rnorm(30, 23, 5) bmi_cat &lt;- ifelse(bmi &lt; 25, &quot;normal&quot;, &quot;overweight&quot;) bmi_cat [1] &quot;overweight&quot; &quot;overweight&quot; &quot;normal&quot; &quot;normal&quot; &quot;overweight&quot; [6] &quot;normal&quot; &quot;overweight&quot; &quot;normal&quot; &quot;normal&quot; &quot;normal&quot; [11] &quot;normal&quot; &quot;overweight&quot; &quot;normal&quot; &quot;overweight&quot; &quot;normal&quot; [16] &quot;overweight&quot; &quot;normal&quot; &quot;normal&quot; &quot;overweight&quot; &quot;normal&quot; [21] &quot;overweight&quot; &quot;overweight&quot; &quot;normal&quot; &quot;normal&quot; &quot;normal&quot; [26] &quot;overweight&quot; &quot;normal&quot; &quot;overweight&quot; &quot;overweight&quot; &quot;normal&quot; # ifelse() 함수를 연쇄조건문 처럼 사용할 수 있다 bmi_cat2 &lt;- ifelse(bmi &lt; 18.5, &quot;underweight&quot;, ifelse(bmi &lt; 24.9, &quot;normal&quot;, ifelse(bmi &lt; 29.9, &quot;overweight&quot;, &quot;obesity&quot;))) bmi_cat2 [1] &quot;overweight&quot; &quot;overweight&quot; &quot;normal&quot; &quot;normal&quot; &quot;overweight&quot; [6] &quot;underweight&quot; &quot;overweight&quot; &quot;normal&quot; &quot;normal&quot; &quot;underweight&quot; [11] &quot;normal&quot; &quot;obesity&quot; &quot;normal&quot; &quot;overweight&quot; &quot;normal&quot; [16] &quot;overweight&quot; &quot;normal&quot; &quot;normal&quot; &quot;overweight&quot; &quot;normal&quot; [21] &quot;overweight&quot; &quot;obesity&quot; &quot;normal&quot; &quot;underweight&quot; &quot;underweight&quot; [26] &quot;obesity&quot; &quot;normal&quot; &quot;overweight&quot; &quot;overweight&quot; &quot;normal&quot; 비교 및 논리 연산자(통계프로그래밍언어 2.1.4절 참고)↩︎ "],["looping.html", "7.2 반복문(Looping)", " 7.2 반복문(Looping) Prerequisite 프로그램 또는 알고리즘 구현 시 특정 문장 또는 표현을 반복해야만 하는 상황이 발생 특히 시뮬레이션 시 반복문은 거의 필수적임 반복문을 통해 코딩의 효율을 극대화 할 수 있음 반복문은 특정 변수의 값을 갱신(update) 하기 위해 주로 사용 x &lt;- x + 1 # 현재 값에 1을 더해서 x를 새로운 값으로 update 통상적으로 특정 변수의 값을 갱신하기 위해 변수 값을 초기화(initialize) x &lt;- 0 # x 변수 초기화 x &lt;- x + 1 몇 번 반복이라는 정의가 없는 상태에서 특정 조건이 거짓(FALSE)이 될 때 까지 계속 반복 7.2.1 repeat 구문 repeat 표현식 repeat 다음에 오는 표현식을 무한 반복(infinite loop) repeat print(&quot;무한 루프에 걸림...ESC 키 누르시오!!&quot;) [1] &quot;무한 루프에 걸림...ESC 키 누르시오!!&quot; [1] &quot;무한 루프에 걸림...ESC 키 누르시오!!&quot; [1] &quot;무한 루프에 걸림...ESC 키 누르시오!!&quot; [1] &quot;무한 루프에 걸림...ESC 키 누르시오!!&quot; [1] &quot;무한 루프에 걸림...ESC 키 누르시오!!&quot; ... ... 특정 작업에 대해 블록을 지정(중괄호)하고 블록 안에 표현 가능 일반적으로 특정 조건(if (조건) break)을 두어 무한루프에서 탈출 if 문의 조건은 언제 반복이 끝날 지를 제어하는 변수로 반복변수(iteration variable) 이라고도 함 언제까지(until) 반복(repeat) \\(\\rightarrow\\) REPEAT-UNTIL 구문으로 표현 repeat { 표현식 1 if (조건) break 반복변수 update } Figure 7.5: REPEAT 구문 flow-chart # REPEAT-UNTIL 예시 1 # 1:100 까지 합 계산 함수 tot &lt;- 0; i &lt;- 1 # 사용 변수 초기화 (update 변수) repeat { tot &lt;- tot + i if (i &gt;= 100) break # i는 반복 변수 i &lt;- i + 1 } tot # check sum(1:100) [1] 5050 [1] 5050 tot에 i를 더한 후 i 가 조건을 만족하는지 확인 조건에 부합하지 않으면 다음 문장 실행(i에 1을 증가 후 업데이트) 1. 의 작업을 반복(loop) i가 조건에 부합하면 반복 종료 # REPEAT 예시 2 # 1에서 20 사이 숫자 알아맞추기 게임 set.seed(1) n &lt;- 20 number &lt;- sample(1:n, size = 1) cat(&quot;1에서 &quot;, n, &quot;까지 숫자 알아 맞추기&quot;, sep = &quot;&quot;) repeat { guess &lt;- readline(&quot;어떤 숫자를 생각하시나요? (종료: q 입력) &quot;) if (guess == &quot;q&quot;) { cat(&quot;재미가 없나봐요.\\n&quot;) break } else if (as.numeric(guess) == number) { cat(&quot;천재인데요?ㅋㅋㅋ&quot;) break } # 틀리면 계속 반복 } guess에 readline() 으로부터 값 입력 guess 값이 q 이면 종료 guess 값이 number 와 일치하면 종료 2.와 3. 조건에 부합하지 않으면 guess 값을 반복적으로 입력 어떤 숫자를 생각하시나요? (종료: q 입력) 1 어떤 숫자를 생각하시나요? (종료: q 입력) 2 어떤 숫자를 생각하시나요? (종료: q 입력) 3 천재인데요?ㅋㅋㅋ 7.2.2 while 구문 while (조건) 표현식 ... while에 지정된 조건이 참이면 계속해서 반복 repeat는 반복이 처음부터 시작되는 반면, while 문은 조건을 먼저 평가한 후 반복이 시작됨. while (FALSE)인 경우 루프 본문 코드가 실행되지 않음 while (TRUE)는 repeat 구문과 동일 while문 의 일반적 형태 while (조건) { 표현식 1 반복변수 update } Figure 7.6: WHILE 구문 flow-chart # WHILE 구문 예시 1 # 1:100 까지 합 계산 함수 tot &lt;- 0; i &lt;- 1 # 사용 변수 초기화 (update 변수) while (i &lt;= 100) { tot &lt;- tot + i i &lt;- i + 1 } tot [1] 5050 초기값 i가 조건 i &lt;= 100 인지 확인 참인 경우 tot + i를 통해 tot을 업데이트 한 다음 i를 1만큼 증가 만약 i에 대한 조건 평가 결과가 거짓이면 while 구문을 빠져나감 # while 문 조건이 TRUE 인 경우 tot &lt;- 0; i &lt;- 1 # 사용 변수 초기화 (update 변수) while (TRUE) { tot &lt;- tot + i if (i &gt;= 100) break i &lt;- i + 1 } tot [1] 5050 while 의 조건이 참이기 때문에 무한 반복 단 i가 100과 같거나 클 경우 구문 탈출 그 전 까지는 tot와 i를 갱신 # WHILE 구문 예시 2 # 문자열 벡터에서 특정 문자열의 인덱스를 반환 txtvec &lt;- c(&quot;R&quot;, &quot;package&quot;, &quot;flow-control&quot;, &quot;while&quot;, &quot;if&quot;, &quot;for&quot;, &quot;repeat&quot;) found &lt;- FALSE i &lt;- 1 word &lt;- readline(&quot;검색할 텍스트: &quot;) while (!found &amp; i &lt;= length(txtvec)) { if (txtvec[i] == word) { found &lt;- TRUE break } cat(i, &quot; 번째 위치에 해당 단어가 존재하지 않습니다.\\n&quot;, sep=&quot;&quot;) i &lt;- i + 1 } if (found) { cat(i, &quot; 번째 위치에 &quot;, word, &quot;를 찾았습니다.&quot;, sep = &quot;&quot;) } else { cat(word, &quot; 단어는 해당 문자열 벡터에 존재하지 않습니다.\\n&quot;, sep = &quot;&quot;) } found = FALSE, i = 1을 초기값으로 입력 readline()으로 입력한 텍스트를 word에 저장 found 가 참이고 i가 텍스트 벡터의 길이 값과 같을 때 까지 다음 구문 반복 txtvec 각 원소와 word 값이 같은지 확인 while 입력 결과 1 번째 위치에 해당 단어가 존재하지 않습니다. 2 번째 위치에 해당 단어가 존재하지 않습니다. 3 번째 위치에 해당 단어가 존재하지 않습니다. 4 번째 위치에 while 를 찾았습니다. temp 입력 결과 1 번째 위치에 해당 단어가 존재하지 않습니다. 2 번째 위치에 해당 단어가 존재하지 않습니다. 3 번째 위치에 해당 단어가 존재하지 않습니다. 4 번째 위치에 해당 단어가 존재하지 않습니다. 5 번째 위치에 해당 단어가 존재하지 않습니다. 6 번째 위치에 해당 단어가 존재하지 않습니다. 7 번째 위치에 해당 단어가 존재하지 않습니다. temp 단어는 해당 문자열 벡터에 존재하지 않습니다. repeat, while과 같이 반복의 횟수가 지정되지 않는 반목구문을 불확정 반복문(indefinite loop)이라고 함. 다음에 배울 for 구문은 위 두 반복문과는 다르게 반복의 범위를 명확히 지정하기 때문에 확정 반복문(definite loop)라고 함. 7.2.3 for 구문 가장 많이 사용되는 반복구문으로 일반적인 형태는 아래와 같음 for (반복변수 in sequence) { 표현식 1 ... } R에서 sequence는 특정 유형의 벡터이며, 반복변수에 sequence의 원소를 순차적으로 할당함 반복변수는 for 반복문 안의 표현식 1에서 사용됨 Figure 7.7: FOR 구문 flow-chart #for 문 예시 1 student &lt;- read.table(&quot;dataset/students.txt&quot;, sep = &quot;\\t&quot;, header = TRUE) student_name &lt;- student$name for (s in student_name) { cat(s, &quot;학생!! R을 배우면 통계가 쉬워져요!!^^\\n&quot;) } 송은철 학생!! R을 배우면 통계가 쉬워져요!!^^ 윤지호 학생!! R을 배우면 통계가 쉬워져요!!^^ 노자홍 학생!! R을 배우면 통계가 쉬워져요!!^^ 박경민 학생!! R을 배우면 통계가 쉬워져요!!^^ 윤지우 학생!! R을 배우면 통계가 쉬워져요!!^^ 장민영 학생!! R을 배우면 통계가 쉬워져요!!^^ 권혁제 학생!! R을 배우면 통계가 쉬워져요!!^^ 김요한 학생!! R을 배우면 통계가 쉬워져요!!^^ 김진현 학생!! R을 배우면 통계가 쉬워져요!!^^ 박종현 학생!! R을 배우면 통계가 쉬워져요!!^^ 신지성 학생!! R을 배우면 통계가 쉬워져요!!^^ 오정우 학생!! R을 배우면 통계가 쉬워져요!!^^ 이명헌 학생!! R을 배우면 통계가 쉬워져요!!^^ 전지원 학생!! R을 배우면 통계가 쉬워져요!!^^ 조현모 학생!! R을 배우면 통계가 쉬워져요!!^^ 최소미 학생!! R을 배우면 통계가 쉬워져요!!^^ 김선재 학생!! R을 배우면 통계가 쉬워져요!!^^ 김지윤 학생!! R을 배우면 통계가 쉬워져요!!^^ 장유진 학생!! R을 배우면 통계가 쉬워져요!!^^ 김하진 학생!! R을 배우면 통계가 쉬워져요!!^^ 김민서 학생!! R을 배우면 통계가 쉬워져요!!^^ 김준섭 학생!! R을 배우면 통계가 쉬워져요!!^^ 남현준 학생!! R을 배우면 통계가 쉬워져요!!^^ 채승훈 학생!! R을 배우면 통계가 쉬워져요!!^^ 강현지 학생!! R을 배우면 통계가 쉬워져요!!^^ 권사랑 학생!! R을 배우면 통계가 쉬워져요!!^^ 김민선 학생!! R을 배우면 통계가 쉬워져요!!^^ 김민영 학생!! R을 배우면 통계가 쉬워져요!!^^ 박승원 학생!! R을 배우면 통계가 쉬워져요!!^^ 박우담 학생!! R을 배우면 통계가 쉬워져요!!^^ 소아영 학생!! R을 배우면 통계가 쉬워져요!!^^ 안성재 학생!! R을 배우면 통계가 쉬워져요!!^^ 이다빈 학생!! R을 배우면 통계가 쉬워져요!!^^ 이연하 학생!! R을 배우면 통계가 쉬워져요!!^^ 정진경 학생!! R을 배우면 통계가 쉬워져요!!^^ 조은아 학생!! R을 배우면 통계가 쉬워져요!!^^ 최보경 학생!! R을 배우면 통계가 쉬워져요!!^^ 한민형 학생!! R을 배우면 통계가 쉬워져요!!^^ 황연지 학생!! R을 배우면 통계가 쉬워져요!!^^ student_name의 첫 번째 원소를 s에 할당 for 구문 안에 표현 실행 student_name의 마지막 원소까지 반복 # 위 예시와 동일한 표현 ## 인덱싱을 사용 for (i in 1:length(student_name)) { cat(student_name[i], &quot;학생!! R을 배우면 통계가 쉬워져요!!^^\\n&quot;) } ## sequence를 만드는 함수 seq_along() 사용 for (i in seq_along(student_name)) { cat(student_name[i], &quot;학생!! R을 배우면 통계가 쉬워져요!!^^\\n&quot;) } for 구문 안에 for 문을 1개 이상 중첩 가능 ## 2중 for 문 예시 set.seed(12345) id &lt;- sample(1:length(student_name), 5) sel_student &lt;- student_name[id] for (i in seq_along(student_name)) { for (j in seq_along(sel_student)) { if (student_name[i] == sel_student[j]) { cat(sel_student[j], &quot;님!! 당첨 축하 드립니다!!\\n&quot;) } } } 전지원 님!! 당첨 축하 드립니다!! 최소미 님!! 당첨 축하 드립니다!! 채승훈 님!! 당첨 축하 드립니다!! 권사랑 님!! 당첨 축하 드립니다!! 김민영 님!! 당첨 축하 드립니다!! 불확정 반복문 학습 시 무한루프로부터 break를 통해 루프에서 탈출 루프를 완전히 탈출하지 않고 현재 반복을 중지하고 그 다음 반복을 진행하고 싶을 경우 next 예약어를 사용 # 알파벳 e와 일치하는 경우에만 텍스트 메세지 출력 vec &lt;- c(&quot;a&quot;,&quot;e&quot;, &quot;e&quot;, &quot;i&quot;, &quot;o&quot;, &quot;u&quot;, &quot;e&quot;, &quot;z&quot;) word &lt;- &quot;e&quot; for (i in 1:length(vec)) { if (vec[i] != word) next cat(word, &quot;가&quot;, i, &quot;번 째 인덱스에 있네요!!\\n&quot;) } e 가 2 번 째 인덱스에 있네요!! e 가 3 번 째 인덱스에 있네요!! e 가 7 번 째 인덱스에 있네요!! "],["function.html", "7.3 함수 (function)", " 7.3 함수 (function) Figure 7.8: 함수 함수: 특정한 목적을 위한 연산을 수행하기 위해 명명된 일련의 문장(추상화) 예: sum(x) \\(\\rightarrow\\) 벡터 x의 값을 모두 합산하는 함수로 “sum” 이라고 명명된 내장 함수 R 콘솔에서 함수 명칭(예: sum)을 입력 후 실행하면 함수 내부 확인 가능 sum function (..., na.rm = FALSE) .Primitive(&quot;sum&quot;) 함수의 명칭(위의 예에서 sum)으로 특정 합수를 호출(call) R의 스크립트는 내장된 혹은 사용자가 정의한 함수들을 호출함으로써 작성됨 함수를 사용해야만 하는 이유 매우 큰 프로그램 작업을 해야할 경우 함수를 통해 작업 단위 별로 분할 가능 한 번 작성한 함수는 재사용 가능 프로그램의 체계적 관리가 가능하기 때문에 유지 및 보수가 용이 프로그램 코드의 간결화 7.3.1 함수의 정의 function 이라는 R의 예약어를 통해 사용자 함수 정의 함수 정의 시 함수의 명칭을 반드시 부여해야 함 함수 이름 &lt;- function() 함수는 일반적으로 인수(argument)로 입력값을 전달 받으면 그 결과값을 반환(return) 함수의 인수와 반환에 따라 다음과 같이 4 가지 유형의 함수 정의 가능 인수를 갖는 함수 인수를 갖지 않는 함수 값을 반환하는 함수 값을 반환하지 않는 함수 # (1) 인수를 갖는 함수 ## (모)분산을 계산하는 함수 var_pop &lt;- function(x) { n &lt;- length(x) if (n &lt; 2) { stop(&quot;적어도 두 개 이상의 관찰값이 존재해야 합니다&quot;) } mx &lt;- mean(x) v &lt;- sum((x - mx)^2)/n return(v) # 결과를 반환하는 함수: v를 함수의 출력값으로 설정 } ## test set.seed(1) # 동일한 난수 생성을 위해 seed 번호 부여 x &lt;- rnorm(1) var_pop(x) Error in var_pop(x): 적어도 두 개 이상의 관찰값이 존재해야 합니다 set.seed(1000) x &lt;- rnorm(1000, 2, 4) # 평균이 2이고 표준편차가 4인 정규분포로부터 1000개 난수 추출 var_pop(x) [1] 15.40581 # (2) 인수를 갖지 않는 함수 print_lyrics_let_it_be &lt;- function() { print(&quot;When I find myself in times of trouble, &quot;) print(&quot;Mother Mary comes to me.&quot;) print(&quot;Speaking words of wisdom &#39;let it be&#39;.&quot;) } print_lyrics_let_it_be() [1] &quot;When I find myself in times of trouble, &quot; [1] &quot;Mother Mary comes to me.&quot; [1] &quot;Speaking words of wisdom &#39;let it be&#39;.&quot; print_lyrics_let_it_be(beatles) Error in print_lyrics_let_it_be(beatles): 사용되지 않은 인자 (beatles) ## 주사위를 돌리는 함수 rolling_dice &lt;- function() { sample(1:6, 1, replace = TRUE) } rolling_dice(); rolling_dice(); rolling_dice(); [1] 4 [1] 4 [1] 4 # (3) 값을 반환하는 함수 manual_mean &lt;- function(x) { n &lt;- length(x) sumi &lt;- 0 for (i in 1:n) { sumi &lt;- sumi + x[i] } return(sumi/n) } set.seed(20) x &lt;- sample(1:200, 20, replace = FALSE) # 1 ~ 200 중 랜덤하게 20개 추출(비복원) manual_mean(x) [1] 107 # 미리 정의하지 않은 인수를 입력한 경우 set.seed(4) na_idx &lt;- sample(1:length(x), 4) x[na_idx] &lt;- NA manual_mean(x, na.rm = TRUE) Error in manual_mean(x, na.rm = TRUE): 사용되지 않은 인자 (na.rm = TRUE) # (4) 값을 반환하지 않는 함수(void function) summary_mean &lt;- function(x, ...) { n &lt;- sum(!is.na(x)) mx &lt;- sum(x, ...)/n cat(&quot;Data: &quot;, sprintf(&quot;%.2f&quot;, x), &quot;\\n&quot;) # 소숫점 2째 짜리 까지 출력 cat(&quot;전체 관찰값 개수(결측 제외) = &quot;, n, &quot;\\n&quot;) cat(&quot;산술평균 = &quot;, mx, &quot;\\n&quot;) } set.seed(20) x &lt;- rnorm(20) summary_mean(x) Data: 1.16 -0.59 1.79 -1.33 -0.45 0.57 -2.89 -0.87 -0.46 -0.56 -0.02 -0.15 -0.63 1.32 -1.52 -0.44 0.97 0.03 -0.09 0.39 전체 관찰값 개수(결측 제외) = 20 산술평균 = -0.1877639 result &lt;- summary_mean(x) Data: 1.16 -0.59 1.79 -1.33 -0.45 0.57 -2.89 -0.87 -0.46 -0.56 -0.02 -0.15 -0.63 1.32 -1.52 -0.44 0.97 0.03 -0.09 0.39 전체 관찰값 개수(결측 제외) = 20 산술평균 = -0.1877639 result NULL x[na_idx] &lt;- NA # ...를 통해 미리 정하지 않은 인수를 # 함수 내부에서 호출한 다른 함수로 전달 가능 summary_mean(x, na.rm = TRUE) Data: 1.16 -0.59 NA -1.33 -0.45 0.57 NA -0.87 -0.46 -0.56 NA -0.15 -0.63 1.32 -1.52 -0.44 0.97 0.03 NA 0.39 전체 관찰값 개수(결측 제외) = 16 산술평균 = -0.1590692 x &lt;- summary_mean(x, na.rm = TRUE) Data: 1.16 -0.59 NA -1.33 -0.45 0.57 NA -0.87 -0.46 -0.56 NA -0.15 -0.63 1.32 -1.52 -0.44 0.97 0.03 NA 0.39 전체 관찰값 개수(결측 제외) = 16 산술평균 = -0.1590692 7.3.2 함수의 인수 전달 방법 함수는 입력값(input) 을 가지며, 이러한 입력값은 함수의 인수(argument)에 해당 값을 할당함으로써 입력값이 함수로 전달됨 함수의 인수 정의는 내 마음대로 가능(개수 무관) R에서 함수 호출 시 인수 전달은 “값”을 호출 하는 방식(call by value) call by value와 상반되는 개념으로 참조에 의한 호출(call by reference)로 값이 아니라 값이 저장되어 있는 메모리의 주소 값을 전달하는 방식(대표적인 예: C 언어의 포인터)임. 계산 효율은 참조에 의한 호출이 월등히 뛰어나지만, 프로그램의 구조가 복잡하다는 단점을 가짐. R은 데이터 분석에 특화된 프로그램이기 때문에 직관적인 call by value 방식을 택함. 예시 # 두 변수의 값을 바꾸는 함수: swap swap &lt;- function(x, y) { temp &lt;- x x &lt;- y y &lt;- temp cat(&quot;두 값이 바뀌었습니다.&quot;, sprintf(&quot;x = %d, y = %d&quot;, x, y) ,&quot;\\n&quot;) } x &lt;- 3; y &lt;- 10 swap(x, y) 두 값이 바뀌었습니다. x = 10, y = 3 x; y # x, y 두 값이 바뀌지 않음 [1] 3 [1] 10 인수를 전달하는 방법은 다음 두 가지임 인수의 위치 순서에 의한 전달: 정의한 인수의 순서대로 각 인수에 대응하는 값을 전달 인수의 이름에 의한 전달: 위치와 관계 없이 정의한 인수의 이름을 지정하여 값을 전달 # 표준편차 계산 함수: stdev stdev &lt;- function(x, na.rm = TRUE) { if (is.matrix(x)) apply(x, 2, sd, na.rm = na.rm) else if (is.vector(x)) sqrt(var(x, na.rm = na.rm)) else if (is.data.frame(x)) sapply(x, sd, na.rm = na.rm) else sqrt(var(as.vector(x), na.rm = na.rm)) } set.seed(1000) X &lt;- matrix(rnorm(1000), 100, 10) x &lt;- rpois(50, lambda = 10) # 포아송 분포(lambda = 10)에서 50개 난수 추출 dat &lt;- mtcars # R 내장 데이터를 dat 에 저장 # (1) 순서에 의한 전달 stdev(X, T); stdev(X) # 동일한 결과 [1] 1.0065940 0.9033927 0.9727257 0.9905631 0.8202803 1.0114516 0.9855547 [8] 1.0211373 1.0716219 1.0426811 [1] 1.0065940 0.9033927 0.9727257 0.9905631 0.8202803 1.0114516 0.9855547 [8] 1.0211373 1.0716219 1.0426811 stdev(x) [1] 3.41569 stdev(dat) mpg cyl disp hp drat wt 6.0269481 1.7859216 123.9386938 68.5628685 0.5346787 0.9784574 qsec vs am gear carb 1.7869432 0.5040161 0.4989909 0.7378041 1.6152000 stdev(TRUE, dat) # 오류 why?? Warning in if (na.rm) &quot;na.or.complete&quot; else &quot;everything&quot;: length &gt; 1 이라는 조건 이 있고, 첫번째 요소만이 사용될 것입니다 Error in if (na.rm) &quot;na.or.complete&quot; else &quot;everything&quot;: argument is not interpretable as logical # (2) 이름에 의한 전달 set.seed(5) na_idx &lt;- sample(1:50, 5) x[na_idx] &lt;- NA stdev(na.rm = T, x = x) [1] 3.411211 stdev(dat = dat, na.rm = TRUE) # 오류 why??? Error in stdev(dat = dat, na.rm = TRUE): 사용되지 않은 인자 (dat = dat) 7.3.3 함수의 기본 구성 요소 Figure 7.9: 함수의 기본 구조 function()에서 () 안의 부분(일반적으로 첫 번째 줄)을 머리(header) 부분 함수의 초기 형태(매개변수 또는 인수의 형태)를 지정 연산 또는 명령이 수행되는 부분은 함수의 몸통(body) 부분({} 로 표시) 함수 내부에서 실행되는 연산 명령어들의 집합으로 구성 인수(argument): 함수의 기능을 선택적으로 조정하는 parameter로 함수 안에서 작동하는 매개변수들을 통칭 인수는 argument 또는 argument = default value로 설정 복수의 인수는 콤마(,)로 구분 \\(\\rightarrow\\) fun_name &lt;- function(arg1, arg2, arg3) 특수 인수 ...: 어떠한 개수의 인수를 함수로 전달할 수 있음 일반적으로 인수의 개수가 불특정하거나 함수 안에서 다른 함수를 호출할 때 특정 인수를 다른 함수로 전달시킬 때 유용(위 예시 참고) # (1) 인수에 default 값을 주지 않은 함수 fun_without_arg_default &lt;- function(x, y) { x*y } set.seed(10) a &lt;- sample(1:20, 10, replace = TRUE) # 복원 추출 a[7] &lt;- NA b &lt;- 5 fun_without_arg_default(a, b) [1] 55 45 50 80 60 40 NA 95 75 75 # (2) 인수에 default 값을 부여한 함수 fun_with_arg_default &lt;- function(x = 5, y = 8) { x*y } fun_with_arg_default() [1] 40 trim_mean &lt;- function(x, trim = 0, na.rm = F) { mean(x, trim = trim, na.rm = na.rm) } trim_mean(a) [1] NA trim_mean(x = a, trim = 0.2, na.rm = TRUE) # 인수 이름으로 값 전달 [1] 12.57143 trim_mean(a, 0.3, TRUE) # 인수 순서대로 값 전달 [1] 12.6 # (3) ... 인수 사용 예제 # list() 함수를 이용해 `...`에 해당하는 인수들을 리스트 객체로 만든 후 # 이를 함수에서 사용 dot_example &lt;- function(x, ...) { # browser() trim &lt;- 0 na.rm &lt;- FALSE dots &lt;- list(...) # ...에 해당하는 인수 추출 for (arg in names(dots)) { if (arg == &quot;trim&quot;) trim &lt;- as.numeric(dots[arg]) if (arg == &quot;na.rm&quot;) na.rm &lt;- as.logical(dots[arg]) } mean(x, trim = trim, na.rm = na.rm) } dot_example(a) [1] NA set.seed(30) a &lt;- sample(1:30, 15, replace = TRUE) # 복원 추출 dot_example(a) [1] 17.06667 a[9] &lt;- NA dot_example(a) [1] NA dot_example(a, trim = 0.1, na.rm = TRUE) [1] 17.75 # (4) `...` 인수가 함수 내 사용(호출)된 # 다른 함수의 인수로 전달하는 경우 # summary_mean() 함수 예제와 유사 mean_manual &lt;- function(x, ...) { mean(x, ...) } set.seed(30) x &lt;- rnorm(30, mean = 10, sd = 5) na_idx &lt;- sample(1:30, 3, replace = TRUE) xna &lt;- x; xna[na_idx] &lt;- NA mean_manual(x) [1] 8.347683 mean_manual(xna) [1] NA mean_manual(xna, na.rm = TRUE) [1] 8.127862 mean_manual(x = xna, trim = 0.2, na.rm = TRUE) [1] 7.534424 함수 몸체 안에 browser()을 입력하면, browser() 전 까지 함수 몸체 안 명령들이 수행되고, 이후 명령들이 어떻게 실행되는지 확인할 수 있음. 함수 작성 시 함수 로직을 세우고 디버깅 할 때 매우 유용하게 사용 인수 관련 몇 가지 유용한 함수들 args(): 특정 함수에서 사용되는 인수 확인 args(fun_without_arg_default) function (x, y) NULL args(rnorm) function (n, mean = 0, sd = 1) NULL body(): 함수의 몸체 조회 body(var_pop) { n &lt;- length(x) if (n &lt; 2) { stop(&quot;적어도 두 개 이상의 관찰값이 존재해야 합니다&quot;) } mx &lt;- mean(x) v &lt;- sum((x - mx)^2)/n return(v) } body(dot_example) { trim &lt;- 0 na.rm &lt;- FALSE dots &lt;- list(...) for (arg in names(dots)) { if (arg == &quot;trim&quot;) trim &lt;- as.numeric(dots[arg]) if (arg == &quot;na.rm&quot;) na.rm &lt;- as.logical(dots[arg]) } mean(x, trim = trim, na.rm = na.rm) } match.arg(): 인수를 매치하는 함수로 매치할 대상의 인수를 지정 arg: 매치할 대상 인수 지정 choice: 매치될 인수값 목록 several.ok: 복수 선택 여부(TRUE/FALSE) # 인수의 매치 match.arg(arg = c(&quot;med&quot;, &quot;max&quot;), choices = c(&quot;mean&quot;, &quot;median&quot;, &quot;iqr&quot;, &quot;minimum&quot;, &quot;maximum&quot;, &quot;range&quot;), several.ok = TRUE) [1] &quot;median&quot; &quot;maximum&quot; match.arg(arg = c(&quot;median&quot;, &quot;maximuum&quot;), choices = c(&quot;mean&quot;, &quot;med&quot;, &quot;iqr&quot;, &quot;minimum&quot;, &quot;max&quot;, &quot;range&quot;), several.ok = TRUE) # 오류 why?? Error in match.arg(arg = c(&quot;median&quot;, &quot;maximuum&quot;), choices = c(&quot;mean&quot;, : &#39;arg&#39;은 반드시 &quot;mean&quot;, &quot;med&quot;, &quot;iqr&quot;, &quot;minimum&quot;, &quot;max&quot;, &quot;range&quot; 중 하나이어야 합니다 match.arg(arg = c(&quot;med&quot;, &quot;max&quot;), choices = c(&quot;mean&quot;, &quot;median&quot;, &quot;iqr&quot;, &quot;minimum&quot;, &quot;maximum&quot;, &quot;range&quot;), several.ok = FALSE) Error in match.arg(arg = c(&quot;med&quot;, &quot;max&quot;), choices = c(&quot;mean&quot;, &quot;median&quot;, : &#39;arg&#39;는 반드시 길이가 1이어야 합니다 # match.arg() 함수 응용 # 중심값 관련 통계량 계산 함수 # 평균(mean), 절삭평균(trimmed mean), 중앙값(median), 최빈수(mode) 계산 # pkg_list &lt;- rownames(installed.packages()) # 설치된 패키지 목록 # if (!(&quot;DescTools&quot; %in% pkg_list)) # install.packages(&quot;DescTools&quot;) # 최빈수를 구하기 위한 패키지 설치 center &lt;- function(x, type = c(&quot;mean&quot;, &quot;trimmed&quot;, &quot;median&quot;, &quot;mode&quot;), ... ) { # browser() trim = 0; na.rm = FALSE # dot 인수 초기값 type &lt;- match.arg(type) dots &lt;- list(...) for (arg in names(dots)) { if (arg == &quot;trim&quot;) trim &lt;- as.numeric(dots[arg]) if (arg == &quot;na.rm&quot;) na.rm &lt;- as.logical(dots[arg]) } switch(type, mean = mean(x, na.rm = na.rm), trimmed = mean(x, trim = trim, na.rm = na.rm), median = median(x, na.rm = na.rm), mode = DescTools::Mode(round(x, 1), na.rm = na.rm) # DescTools 패키지 내 Mode 함수를 # workspace에 불러오지 않고 사용 ) } set.seed(100) x &lt;- rchisq(100, df = 3) # 자유도가 3인 카이제곱분포에서 난수 추출 xna &lt;- x; xna[na_idx] &lt;- NA center(x, &quot;mean&quot;); center(x, &quot;me&quot;) [1] 2.929673 Error in match.arg(type): &#39;arg&#39;은 반드시 &quot;mean&quot;, &quot;trimmed&quot;, &quot;median&quot;, &quot;mode&quot; 중 하나이어야 합니다 [1] 2.929673 center(x, &quot;trimmed&quot;, trim = 0.1) [1] 2.565866 center(x, &quot;median&quot;) [1] 2.45614 center(x, &quot;mode&quot;) [1] 1.7 attr(,&quot;freq&quot;) [1] 6 center(xna, &quot;median&quot;) [1] NA center(xna, &quot;median&quot;, na.rm = TRUE) [1] 2.423723 switch() 함수는 ifelse() 함수의 확장 버전으로 \\(n\\) 개의 조건에 대한 분기 가능 함수 제어 관련 주요 함수 return(): 계산된 결과를 반환하는 함수로 함수의 흐름에서 return()이 나타나면 결과값을 반환하고 함수 종료 강제 종료가 필요한 경우 응용 가능 # (1) 객체 반환 set.seed(100) x &lt;- rnorm(100, mean = 24, sd = 2.2) value_return1 &lt;- function(x) { tot &lt;- sum(x) n &lt;- length(x) result &lt;- list(size = n, total = tot, average = mean(x), stdev = sd(x)) return(result) } value_return1(x) $size [1] 100 $total [1] 2400.641 $average [1] 24.00641 $stdev [1] 2.245563 desc &lt;- value_return1(x) desc$stdev [1] 2.245563 value_return2 &lt;- function(x) { return(sum(x)/length(x)) } value_return2(x) [1] 24.00641 # (2) 강제 종료 시 활용 value_return3 &lt;- function(x) { if (anyNA(x)) return return(sum(x)/length(x)) } xna &lt;- x; xna[na_idx] &lt;- NA value_return3(xna) [1] NA value_return3(x) [1] 24.00641 stop(): 예외처리 함수의 일종으로 특정 조건일 경우 (오류) 메세지를 출력하고 함수 종료 인수로 문자열을 가짐 # (1) stop() 함수 사용 # 복소수 값을 실수와 허수로 분할 split_complex &lt;- function(z) { if(!is.complex(z)) stop(&quot;입력값이 복소수가 아닙니다&quot;) re &lt;- Re(z) im &lt;- Im(z) return(list(real = re, imaginary = im)) } split_complex(pi) Error in split_complex(pi): 입력값이 복소수가 아닙니다 split_complex(23 + 7i) $real [1] 23 $imaginary [1] 7 7.3.4 함수의 적용 범위(scoping rule) Scoping rule: 변수 또는 객체가 어디에서 사용 가능한지를 결정하는 규칙 매개변수(parameter): 함수를 적용할 때 사용되는 변수로 인수로부터 발생함 함수의 인수 리스트에서 인수값이 매개변수로 할당 지역변수(local variable): 함수의 몸체 부분에서 정의된 변수들을 지칭하며 함수의 종료와 동시에 재사용 불가 전역변수(global variable): 함수의 외부(workspace)에서 정의된 변수로 함수 내부에서 값을 할당하지 않더라도 사용 가능 # (1) 매개변수, 지역변수, 전역변수 구분 x &lt;- 10 # 전역변수 y &lt;- 5 # 전역변수 scope1 &lt;- function(x) { y &lt;- x^2 print(x) # 매개변수 print(y) # 지역변수 } x; y # 전역변수가 출력 [1] 10 [1] 5 scope1(x = 10) [1] 10 [1] 100 작업공간에서 x와 y는 각각 10, 5 값이 할당 작업공간 상에서 x y 값은 변하지 않음 지역변수 y의 사용 범위는 함수 몸체이기 때문에 함수 밖에 있는 y는 값이 변하지 않음 x &lt;- 10 # 전역변수 y &lt;- 5 # 전역변수 rm(z) scope2 &lt;- function(x) { y &lt;- x^2 print(x) # 매개변수 print(y) # 지역변수 print(z) } scope2(x = 5) [1] 5 [1] 25 Error in print(z): 객체 &#39;z&#39;를 찾을 수 없습니다 z &lt;- 13 # 전역변수로 z 할당 scope2(x = 5) [1] 5 [1] 25 [1] 13 함수 외부와 내부 모두에서 z가 정의되지 않았기 때문에 에러 출력 작업공간 상에 z를 정의한 경우 함수 내부에서 workspace에서 정의한 z를 그대로 사용 \\(\\rightarrow\\) 함수 외부와 내부 자유로이 사용 가능한 변수를 자유변수(free variable)이라고 지칭함. 지역변수의 사용 범위는 함수 몸체 안이지만 그 범위를 밖으로 확장할 수 있음 \\(\\rightarrow\\) &lt;&lt;- 또는 -&gt;&gt; 사용 # 지경변수의 확장 예제 x &lt;- 1; y &lt;- 2; z &lt;- 3; k &lt;- 10 scope3 &lt;- function(x) { y &lt;&lt;- x + 10 y * 3 -&gt;&gt; z print(x) # 매개변수 print(y) # 지역변수 print(z) # 지역변수 print(k) # 자유변수 } x;y;z;k [1] 1 [1] 2 [1] 3 [1] 10 scope3(x = 2) [1] 2 [1] 12 [1] 36 [1] 10 x;y;z;k [1] 1 [1] 12 [1] 36 [1] 10 하나의 함수 내부에 또 다른 함수 생성 가능 mean_manual2 &lt;- function(x) { tot &lt;- sum(x) size &lt;- function(x) { return(length(x)) } return(tot/size(x)) } mean_manual2(1:10) [1] 5.5 "],["알고리즘의-기초.html", "8 알고리즘의 기초", " 8 알고리즘의 기초 Sketch 알고리즘으로 무엇을 할 수 있을까? 지금까지 배운 여러 구문을 이용해 간단한 알고리즘을 구현해 보기 "],["알고리즘algorithm.html", "8.1 알고리즘(Algorithm)", " 8.1 알고리즘(Algorithm) 어떤 주어진 문제를 해결하기 위해 정해진 일련의 절차 또는 방법을 절차화한 형태로 표현한 것으로 계산을 실행하기 위한 단계적 절차를 의미. 즉, 문제 해결에 필요한 계산 절차 또는 처리 과정의 순서를 의미함. — Wikipedia 발췌 — 좋은 알고리즘의 특징 정밀성: 변하지 않는 명확한 작업 단계로 구성 유일성: 각 단계마다 명확한 다음 단계를 가져야 함 타당성: 구현할 수 있고 실용적 입력: 정의된 입력을 받을 수 있어야 함 출력: 답으로 출력을 내보낼 수 있어야 함 유한성: 특정 수의 작업 이후에 정지 일반성: 정의된 입력들에 대해 일반적으로 적용할 수 있어야 함 구현 자연어(natural language), 의사코드(pseudocode), 순서도(flow-chart), 프로그래밍 언어 등으로 표현할 수 있고, 정형적 단계는 다음과 같음 문제정의 \\(\\rightarrow\\) 모델고안 \\(\\rightarrow\\) 명세 작성 \\(\\rightarrow\\) 설계 \\(\\rightarrow\\) 검증 \\(\\rightarrow\\) 분석 \\(\\rightarrow\\) 구현 \\(\\rightarrow\\) 테스트 \\(\\rightarrow\\) 문서화 알고리즘의 성능 “알고리즘 성능”과 관련한 내용은 https://makemethink.tistory.com/105 에서 관련 내용을 참고해 재구성함 성능(performance/efficiency) 동일한 결과를 산출하는 알고리즘에도 차이가 존재 보통 그 차이는 알고리즘의 수행시간(자원, resource)과 밀접한 연관이 있음 예: 특정 학생의 전화번호 탐색 알고리즘(정답을 출력한다고 가정) A 알고리즘 수행 시간: 0.1초 B 알고리즘 수행 시간: 1.0초 \\(\\rightarrow\\) A 알고리즘이 더 효율적임 즉 성능은 동일한 결과를 도출하기 위해 필요한 자원(시간과 공간)의 크기 \\[ \\mathrm{performance} = \\mathrm{\\frac{solution}{resource}} \\] 성능은 다음과 같은 측면으로 고려해볼 수 있음 최선(best)의 경우 \\(\\rightarrow\\) 빠르면 1초 내에 전화번호 탐색 평균(average)의 경우 \\(\\rightarrow\\) 평균 10 초 이내에 전화번호 탐색 최악(worst)의 경우 \\(\\rightarrow\\) 아무리 늦어도 1분 이내 번호 탐색 일반적으로 성능은 최악의 경우를 상정함 \\(\\rightarrow\\) 위의 예시에서 최악은 적어도 기대 시간이 1분 보다는 빠르기 때문에 위 두 가지를 모두 포괄 자원(resource)을 결정 짓는 요소 시간 복잡도(time complexity): 알고리즘 실행 완료 시 까지 걸린 시간 사칙연산(+, -, *, \\) 비교연산(&gt;, &lt;, ==) 반복(for, while, repeat) 함수호출 공간 복잡도(space complexity): 알고리즘 실행 완료를 위해 필요한 메모리(공간) 크기 변수 개수 데이터 구조 함수 호출 알고리즘 내 자료 재햘당 여부 일반적으로 시간이 공간보다 더 소중한 자원임 시간 복잡도 및 공간 복잡도 예 # 프로그램 1 x &lt;- numeric(100) for (i in seq_along(x)) { x[i] &lt;- i } # 프로그램 2 x &lt;- NULL for (i in 1:100) { x &lt;- c(x, i) } 프로그램 1의 for 반복의 시간복잡도는 \\(\\mathcal{O}(n)\\) 이고, 공간 복잡도의 경우 반복문 내에세 미리 정의한 x 벡터에 값을 할당하는 것이기 때문에 \\(\\mathcal{O}(1)\\) 프로그램 2의 경우에는 반복문 내에서 x의 저장공간이 반복에 따라 추가적으로 \\(n\\) 까지 증가하기 때문에 공간 복잡도는 \\(\\mathcal{O}(n)\\) 알고리즘 성능의 점근적 분석 성능은 입력의 크기에 따라 결정됨 \\(n\\)을 입력의 크기라고 할 때 시간 복잡도를 \\(n\\)에 대한 함수로 표현 \\(\\rightarrow\\) \\(f(n)\\) f(n) 은 다음과 같은 형태를 가질 수 있음 시간 복잡도는 매우 큰 입력에 대해 측정하는데, 입력에 대한 함수 \\(f(n)\\) 보다 성능이 특정 입력보다 커지면 항상 나쁜 \\(g(n)\\)을 이용해 \\(f(n)\\)의 성능을 표현 \\(g(n)\\)은 \\(f(n)\\) 보다 상상 성능이 나쁘다 \\(\\rightarrow\\) \\(f(n)\\)의 최악 최악의 경우에도 \\(f(n)\\)은 \\(g(n)\\)보다 성능이 좋음 \\(f(n)\\)의 상한은 \\(g(n)\\)임 \\(f(n) \\leq g(n)\\) 많이 사용되는 표준 함수 사용(예: 1, \\(n\\), \\(\\log n\\), \\(n^2\\), \\(n\\log n\\), \\(2^n\\)) 예: \\(g(n) = n^2\\) \\(f(n)\\)은 어떤 경우에도 \\(n^2\\) 보다는 빠름 \\(f(n)\\)의 최악의 경우가 \\(n^2\\) 임 \\(f(n)\\)의 상한은 \\(n^2\\) Big O notation (빅오 표기법) 어떤 함수의 증가 양상을 다른 함수와 비교하기 위한 점근 표기법(asymptotic notation) 중 하나 예: Big \\(\\Omega\\) (하한), Big \\(\\Theta\\) notation (평균) Big O는 점근적 상한에 대한 표기법 알고리즘의 복잡도를 단순화 하거나 무한급수의 뒷부분 간소화 할 때 사용 알고리즘의 효율성을 나타내기 위한 방법으로 시간 복잡도(실행시간)와 공간 복잡도(실행공간, 메모리)로 이루어짐. 수학적 정의 모든 정수 또는 실수 집합에서 정의한 \\(n\\)에 대한 실수 집합의 함수를 \\(f\\) 와 \\(g\\) 라고 하자. \\(|f(x)| \\leq C |g(x)|\\)를 만족하는 상수 \\(k~(x \\geq k)\\)와 \\(C\\) 가 존재할 때 \\(f(x)\\)은 \\(\\mathcal{O}(g(x))\\) 이라고 나타낸다. 이 때, \\(f(x)\\)은 \\(g(x)\\)의 big-oh\" 라고 읽는다. Figure 8.1: https://johngrib.github.io/wiki/big-O-notation/ 에서 발췌 여기서 \\(k\\)와 \\(C\\)를 \\(f(x)\\)가 \\(\\mathcal{O}(g(x))\\) 관계에 대한 증인(witness)라 부름 즉 \\(f(x)\\)가 \\(\\mathcal{O}(g(x))\\) 라는 것을 증명하기 위해서는 위 정의를 만족하는 \\(k\\)와 \\(C\\)를 찾으면 됨 만약 \\(k\\), \\(C\\) 한 쌍이 존재하면 무수히 많은 \\(k\\)와 \\(C\\)가 존재함 \\(\\mathcal{O}(g(n))\\)은 \\(g(n)\\)의 증가율보다 작거나 같은 함수들의 집합임 \\(\\mathcal{O}(n^2)\\)은 \\(\\mathcal{O}(1)\\), \\(\\mathcal{O}(n)\\), \\(\\mathcal{O}(n\\log n)\\) 을 포함 \\(k\\)의 최솟값은 \\(Cg(x) \\geq f(x)\\) 인 지점 \\(C\\)의 후보는 모든 실수이기 때문에 \\(Cg(x)\\)의 최고차항 차수가 \\(f(x)\\)의 최고차항의 차수보다 크거나 같다면 \\(f(x)\\)의 최고차항 계수는 그 값과 상관없이 \\(Cg(x)\\)의 증가율보다 클수 없음. Big O 복잡도 도표 출처: https://amitshahi.dev/blog/2019-06-23-big-o-notation/ 기울기가 높아질수록 성능이 시간이 오래 걸림 \\(\\rightarrow\\) 효율이 떨어지므로 성능 또한 좋지 않음 Big O의 차이에 따른 알고리즘 성능 비교 Table 8.1: Big-O 복잡도 비교 N \\(\\mathcal{O}(1)\\) \\(\\mathcal{O}(\\log n)\\) \\(\\mathcal{O}(n)\\) \\(\\mathcal{O}(n\\log n)\\) \\(\\mathcal{O}(n^2)\\) \\(\\mathcal{O}(2^n)\\) \\(\\mathcal{O}(n!)\\) 1 1 1 1 1 1 1 1 10 1 2 10 23 100 1024 3.63E+06 100 1 5 100 461 10000 1.27E10+30 9.33E10+157 Big O 표기법 규칙 극한의 성질 합의 법칙: \\(\\lim\\limits_{x \\to a} [f(x) + g(x)] = \\lim\\limits_{x \\to a} f(x) + \\lim\\limits_{x \\to a} g(x)\\) 차의 법칙: \\(\\lim\\limits_{x \\to a} [f(x) - g(x)] = \\lim\\limits_{x \\to a} f(x) - \\lim\\limits_{x \\to a} g(x)\\) 상수 곱의 법칙: \\(\\lim\\limits_{x \\to a} [cf(x)] = c\\lim\\limits_{x \\to a} f(x)\\) 곱의 법칙: \\(\\lim\\limits_{x \\to a} [f(x) \\cdot g(x)] = \\lim\\limits_{x \\to a} f(x) \\cdot \\lim\\limits_{x \\to a} g(x)\\) 1. 계수 법칙 상수 \\(C &gt; 0\\) 일 때, \\(f(x) = \\mathcal{O}(g(x))\\) 이면 \\(Cf(x) = \\mathcal{O}(g(x))\\) 입력의 크기 \\(x\\)가 무한대에 가까워 지는 경우 양수 \\(C\\)의 크기는 의미가 없음 \\(100 \\infty = \\infty\\) Big O 표기는 정확한 수치를 나타내는 것이 아니기 때문에 중요하지 않은 항과 상수, 계수를 제거한 점근적 표기법(asymptotic notation) 임(drop non-dominants) 예제 1: \\(f(x) = 6x^4 -2x^3 - 2x^2 + 5\\)의 Big O를 구하시오. \\(k = 1\\), \\(C = 15\\) 일 때, \\[ \\begin{aligned} |6x^4 -2x^3 - 2x^2 + 5| &amp;\\leq 6x^4 +2|x^3| + 2x^2 + 5 \\\\ &amp;\\leq 6x^4 + 2x^4 + 2x^4 + 5x^4 \\\\ &amp;= 15x^4 \\end{aligned} \\] 따라서 \\(|6x^4 -2x^3 - 2x^2 + 5| \\leq 15x^4\\) 이기 때문에 \\(f(x) = \\mathcal{O}(x^4)\\) 임. 직관적 풀이: 위 함수의 \\(x\\)에 매우 큰 값을 대입한 경우, 4차항 이하의 값은 점점 의미가 없어지기 때문에 중요한 것은 \\(6x^4\\) 임(). 따라서 \\(\\mathcal{O}(6x^4) = 6\\mathcal{O}(x^4) = \\mathcal{O}(x^4)\\) 임. 예제 2: 아래 두 코드의 복잡도를 Big-O로 표시하시오. # case 1 bigo_case1 &lt;- function(n) { sum &lt;- 0 for (i in 1:n) { sum &lt;- sum + i } return(sum) } # case 2 bigo_case2 &lt;- function(n) { sum &lt;- 0 for (i in 1:5*n) { sum &lt;- sum + i } return(sum) } case 1: \\(\\mathcal{O}(n)\\) case 2: \\(\\mathcal{O}(5n) = 5\\mathcal{O}(n) = \\mathcal{O}(n)\\) 2. 합의 법칙 \\(f(x) = \\mathcal{O}(h(x))\\) 이고, \\(g(y) = \\mathcal{O}(p(x))\\) 이면, \\(f(x) + g(x) = O(h(x) + p(x))\\) 이다. 두 함수의 입력항이 동일한지를 파악하는 것이 중요: 두 함수의 입력항이 같다면 1의 규칙에 따라 단순화가 가능하지만, 다른 경우 따로 표시를 해줘야만 함 예제 1: \\(f(x) = 3x^2 + 5x + 3\\), \\(g(x) = 6x^2 + 20x + 45\\) 일때 \\(f(x) +g(x)\\)의 Big O를 구하시오. \\(f(x) + g(x) = \\mathcal{O}(3x^2 + 6x^2) = \\mathcal{O}(9x^2) = \\mathcal{O}(x^2)\\) 예제 2: \\(f(x) = 7x^4\\), \\(g(y) = 9y^2 + 6y + 1\\) 일때 \\(f(x) +g(y)\\)의 Big O를 구하시오. \\(f(x) + g(y) = \\mathcal{O}(7x^4) + \\mathcal{O}(6y^2) = 7\\mathcal{O}(x^4) + 6\\mathcal{O}(y^2) = \\mathcal{O}(x^4) + \\mathcal{O}(y^2) = \\mathcal{O}(x^4 + y^2)\\) 예제 3 다음 함수의 시간 복잡도를 구하시오. # case 3 bigo_case3 &lt;- function(n) { sum &lt;- 0 for (i in 1:n) { sum &lt;- sum + i } for (i in 1:5*n) { sum &lt;- sum + i } return(sum) } #case 4 bigo_case4 &lt;- function(n, m) { sum &lt;- 0 for (i in 1:n) { sum &lt;- sum + i } for (j in 1:m) { sum &lt;- sum + m } } case 3: \\(\\mathcal{O}(n) + \\mathcal{O}(5n) = \\mathcal{O}(6n) = \\mathcal{O}(n)\\) case 4: \\(\\mathcal{O}(n) + \\mathcal{O}(m) = \\mathcal{O}(n + m)\\) 3. 곱의 법칙 \\(f(x) = \\mathcal{O}(h(x))\\)이고 \\(g(x) = \\mathcal{O}(p(x))\\) 이면, \\(f(x)\\cdot g(x) = \\mathcal{O}(h(x)\\cdot p(x))\\) 이다. 이중 for 반복문이 대표적인 경우 bigo_case5 &lt;- function(n) { sum &lt;- 0 for (i in 1:n) { sum &lt;- sum + i for (j in 1:5*n) { sum &lt;- sum + j } } return(sum) } case 5: \\(\\mathcal{O}(n \\times 5n) = 5\\mathcal{O}(n^2) = \\mathcal{O}(n^2)\\) 4. 다항 법칙 \\(f(x)\\)가 \\(k\\)차 다항식이면 \\(f(x) = \\mathcal{O}(x^k)\\) 이다. 5. 전이 법칙 \\(f(x)\\)가 \\(\\mathcal{O}(g(x))\\) 이고 \\(g(x)\\) 가 \\(\\mathcal{O}(h(x))\\)이면, \\(f(x) = \\mathcal{O}(h(x))\\) 이다. "],["재귀함수recursive-function.html", "8.2 재귀함수(Recursive function)", " 8.2 재귀함수(Recursive function) 함수 자신을 다시 호출하는 함수로 직관적으로 이해하기 쉽고 간결함 재귀함수 작성 시 재귀호출을 탈출하는 조건을 명확히 하는 것이 관건 일반적 함수의 호출 및 리턴 과정 http://10bun.tv/beginner/episode-4/ 에서 발췌 main() 함수 안에서 함수 A가 호출되면, 코드 진행은 함수 A의 처음으로 옮겨짐. 마찬가지로 함수 A 내부에서 함수 B가 호출되면서 코드 진행은 함수 B의 처음으로 옮겨짐. 함수 B가 진행되면 중간에 함수 C가 호출되면서 함수 C의 처음으로 진행이 옮겨짐 함수 C가 모든 실행을 마치면 함수 B에서 C를 호출했던 다음 줄로 돌아감(return) 함수 B의 모든 실행을 마치면 함수 A에서 B를 호출했던 다음 줄로 돌아감(return) 함수 A의 모든 실행을 마치면 main() 함수에서 A를 호출했던 다음 줄로 돌아감(return) 재귀 함수의 호출 및 리턴 과정 http://10bun.tv/beginner/episode-4/ 에서 발췌 모든 재귀함수의 호출 시 새로운 작업공간(메모리)을 확보해 진행 동일한 코드가 작업공간만 옮겨 다니며 무한히 반복되는 구조이기 때문에 탈출조건이 필요 예제1: 재귀함수를 이용한 1부터 n 까지 합을 구하는 함수 recursive_sum &lt;- function(n) { if (n == 1) return(n) # 종료 조건 return(n + recursive_sum(n-1)) } recursive_sum(3) [1] 6 http://10bun.tv/beginner/episode-4/ 에서 발췌 recursive_sum(3) 실행 시 n이 1이 아니기 때문에 recursive_sum(2) 호출 recursive_sum(2) 실행 시 n이 1이 아니기 때문에 recursive_sum(1) 호출 recursive_sum(1) 이면 n == 1 을 만족하기 때문에 1 반환(return) recursive_sum(2)는 recursive_sum(1)에서 반환 받은 1과 n = 2을 더해서 3을 반환(return) recursive_sum(3)은 recursive_sum(2) 에서 반환 받은 3과 n = 3을 더해서 6을 반환 \\(\\rightarrow\\) 종료 예제2: 계승(factorial) 계산하기 \\[ n! = \\begin{cases} n \\times (n - 1)!, &amp; n=1, \\cdots \\\\ 1, &amp; n = 0 \\end{cases} \\] \\(f(n) = n!\\) 이라고 하면 \\(f(n)\\)은 아래와 같이 나타낼 수 있음. \\[ n! = \\begin{cases} n \\times f(n-1), &amp; n=1, \\cdots \\\\ 1, &amp; n = 0 \\end{cases} \\] 위 식을 이용해 \\(3!\\)을 구하는 과정: - \\(f(3) = 3\\times f(2) = 3\\times 2 \\times f(1) = 3 \\times 2\\times 1\\times f(0) = 3\\times 2\\times 1\\times 1 = 6\\) f(3) = 3*f(2) f(2) = 2 * f(1) f(1) = 1 위 과정을 함수로 구현 factorial_manual &lt;- function(n) { # browser() if (n == 0) return(1) return(n * factorial_manual(n-1)) } # test factorial_manual(3) [1] 6 factorial_manual(10) [1] 3628800 # R 내장함수로 검증 factorial(10) [1] 3628800 확장예제: 하노이 탑(tower of Hanoi) “인도 바라나시에 있는 한 사원에는 세상의 중심을 나타내는 큰 돔이 있고 그 안에 세 개의 다이아몬드 바늘이 동판 위에 세워져 있습니다. 바늘의 높이는 1 큐빗이고 굵기는 벌의 몸통만 합니다. 바늘 가운데 하나에는 신이 64개의 순금 원판을 끼워 놓았습니다. 가장 큰 원판이 바닥에 놓여 있고, 나머지 원판들이 점점 작아지며 꼭대기까지 쌓아 있습니다. 이것은 신성한 브라흐마의 탑입니다. 브라흐마의 지시에 따라 승려들은 모든 원판을 다른 바늘로 옮기기 위해 밤낮 없이 차례로 제단에 올라 규칙에 따라 원판을 하나씩 옮깁니다. 이 일이 끝날 때, 탑은 무너지고 세상은 종말을 맞이하게 됩니다.” Wikipedia 발췌 문제: 3개의 기둥 A, B, C가 있고, 기둥 A에 \\(N\\) 개의 원판이 크기 순서대로 쌓여져 있을 때(제일 밑에 원판이 가장 큼), 모든 원판을 기둥 C로 옮기기 조건 한 번에 하나의 원판만 옮길 수 있음 큰 원판이 작은 원판 위에 있으면 안됨 Figure 8.2: 하노이 탑 문제 Solution 원판의 크기가 제일 작은 것 부터 큰 것 까지 각각 1, 2, 3 번을 부여 했을 때 1 번 원판을 봉 A에서 C로 옮김 (A \\(\\rightarrow\\) C) 2 번 원판을 봉 A에서 B로 옮김 (A \\(\\rightarrow\\) B) 1 번 원판을 봉 C에서 B로 옮김 (C \\(\\rightarrow\\) B) 3 번 원판을 봉 A에서 C로 옮김 (A \\(\\rightarrow\\) C) 1 번 원판을 봉 B에서 A로 옮김 (B \\(\\rightarrow\\) A) 2 번 원판을 봉 B에서 C로 옮김 (B \\(\\rightarrow\\) C) 1 번 원판을 봉 A에서 C로 옮김 (A \\(\\rightarrow\\) C) 원판이 3개인 경우 총 7번의 이동이 필요 \\(\\rightarrow\\) \\(n\\)개의 원판이 있을 경우 \\(2^n - 1\\) 번의 이동이 필요 Figure 8.3: 하노이 탑 문제 알고리즘 구현 move_hanoi &lt;- function(k, from, to, via) { # browser() if (k == 1) { print(sprintf(&quot;%d 번 원판을 %s 에서 %s 로 이동&quot;, 1, from, to)) } else { move_hanoi(k - 1, from = from, to = via, via = to) print(sprintf(&quot;%d 번 원판을 %s 에서 %s 로 이동&quot;, from = k, to = from, via = to)) move_hanoi(k - 1, from = via, to = to, via = from) } } move_hanoi(3, &quot;A&quot;, &quot;C&quot;, &quot;B&quot;) [1] &quot;1 번 원판을 A 에서 C 로 이동&quot; [1] &quot;2 번 원판을 A 에서 B 로 이동&quot; [1] &quot;1 번 원판을 C 에서 B 로 이동&quot; [1] &quot;3 번 원판을 A 에서 C 로 이동&quot; [1] &quot;1 번 원판을 B 에서 A 로 이동&quot; [1] &quot;2 번 원판을 B 에서 C 로 이동&quot; [1] &quot;1 번 원판을 A 에서 C 로 이동&quot; move_hanoi(4, &quot;A&quot;, &quot;C&quot;, &quot;B&quot;) [1] &quot;1 번 원판을 A 에서 B 로 이동&quot; [1] &quot;2 번 원판을 A 에서 C 로 이동&quot; [1] &quot;1 번 원판을 B 에서 C 로 이동&quot; [1] &quot;3 번 원판을 A 에서 B 로 이동&quot; [1] &quot;1 번 원판을 C 에서 A 로 이동&quot; [1] &quot;2 번 원판을 C 에서 B 로 이동&quot; [1] &quot;1 번 원판을 A 에서 B 로 이동&quot; [1] &quot;4 번 원판을 A 에서 C 로 이동&quot; [1] &quot;1 번 원판을 B 에서 C 로 이동&quot; [1] &quot;2 번 원판을 B 에서 A 로 이동&quot; [1] &quot;1 번 원판을 C 에서 A 로 이동&quot; [1] &quot;3 번 원판을 B 에서 C 로 이동&quot; [1] &quot;1 번 원판을 A 에서 B 로 이동&quot; [1] &quot;2 번 원판을 A 에서 C 로 이동&quot; [1] &quot;1 번 원판을 B 에서 C 로 이동&quot; "],["선형이진-탐색linearbinary-search.html", "8.3 선형/이진 탐색(Linear/Binary search)", " 8.3 선형/이진 탐색(Linear/Binary search) 8.3.1 선형 탐색(Linear Search) 특정 값을 주어진 벡터 공간에서 찾기 위해 저장 공간을 순차적으로 비교하면서 찾는 방식 가장 단순하고 직관적인 검색 방법 Sequential search 선형탐색: https://chercher.tech/kotlin/linear-search-kotlin 에서 발췌 Pseudocode 찾고자 하는 값을 k 라고 할 때, for i 1 to n   if x[i] == k then return i 구현 # Linear search linear_search &lt;- function(target, vec) { for (i in seq_along(vec)) { if (vec[i] == target) return(i) } return(NULL) } set.seed(1) x &lt;- sample(1:30, 30) k &lt;- sample(1:30, 1) linear_search(target = k, vec = x) [1] 28 8.3.2 이진 탐색(Binary Search) 정렬된 벡터에서 특정 값을 탐색하기 위한 알고리즘 전체 탐색범위를 반으로 나눈 후 찾고자 하는 값이 없는 쪽을 버린 후 나머지 부분에서 값을 검색하는 과정을 반복 선형 탐색보다 대부분의 경우에서 효율적임(빠름). 이진탐색: https://mohtashims.wordpress.com/2010/07/02/searching/ 에서 발췌 Pseudocode: 자연어 주어진 배열의 가운데(중앙)에서 시작 찾고자 하는 목표값과 배열의 중앙 위치 값과 비교 만약 목표값과 중앙 위치값이 같다면 반복을 멈춤 목표값이 배열의 중앙 위치값 보다 작다면 가장 작은 인덱스에서 중앙 인덱스 보다 하나 작은 인덱스 까지 값(새로운 최대 인덱스)으로 범위를 측소 후 비교 목표값이 배열의 중앙 위치값 보다 크다면 중앙 인덱스에 1을 더한 인덱스 (새로운 최소 인덱스)부터 최대 인덱스 범위로 축소 후 비교 Pseudocode 배열 인덱스에 대한 중앙 인덱스(mid = (min + max)/2) 계산 while min &lt;= max     mid = floor((min + max)/2)     if vec[mid] == target then return(mid)     else if vec[mid] &gt; target     then update max &lt;- mid - 1     else update min &lt;- mid + 1 구현 # Binary search binary_search &lt;- function(target, ovec) { maxL &lt;- length(ovec) # 벡터의 길이 minL &lt;- 1L # 시작 while (minL &lt;= maxL) { midL &lt;- floor((minL + maxL)/2) if (ovec[midL] == target) { return(midL) } else if (ovec[midL] &gt; target) { maxL &lt;- midL - 1 } else { minL &lt;- midL + 1 } } return(NULL) } x &lt;- seq(1, 40000000, by = 3) set.seed(2) k &lt;- sample(x, 1) binary_search(target = k, ovec = x) [1] 5551055 재귀함수를 이용한 구현 # 재귀함수를 활용한 binary search rbinary_search &lt;- function(target, ovec, minL, maxL) { if (maxL &lt;= minL) return(NULL) midL &lt;- floor((minL + maxL)/2) if (ovec[midL] &gt; target) { rbinary_search(target, ovec, minL = minL, maxL = midL - 1) } else if (ovec[midL] &lt; target) { rbinary_search(target, ovec, minL = midL + 1, maxL = maxL) } else return(midL) } x &lt;- seq(1, 40, by = 3) set.seed(2) k &lt;- sample(x, 1) rbinary_search(target = k, ovec = x, minL = 1, maxL = length(x)) [1] 5 8.3.3 선형탐색과 이진탐색 비교 일반적인 경우: https://blog.penjee.com/binary-vs-linear-search-animated-gifs/ 에서 발췌 이진탐색이 안좋은 경우: https://blog.penjee.com/binary-vs-linear-search-animated-gifs/ 에서 발췌 이진탐색 성능이 가장 좋은 경우: https://blog.penjee.com/binary-vs-linear-search-animated-gifs/ 에서 발췌 두 탐색 알고리즘의 시간 복잡도 비교 선형 탐색: \\(\\mathcal{O}(n)\\) 이진 탐색 반복 1: \\(n\\) 반복 2: \\(n/2\\) 반복 3: \\(n/2^2\\) … 반복 k: \\(n/2^k\\) \\(\\rightarrow\\) \\(k\\) 번 까지 반복(나눔) 시 검색해야할 배열(벡터) 의 길이는 1임. 즉 최악의 경우 \\(n/2^k = 1\\) 이므로 양변에 밑이 2인 로그를 취하면 \\(\\log_2n = k\\log_2 2 = k\\) 이므로 이진 탐색의 시간 복잡도는 \\(\\mathcal{O}(\\log_2n)\\) 임. "],["정렬-알고리즘sorting-algorithms.html", "8.4 정렬 알고리즘(Sorting Algorithms)", " 8.4 정렬 알고리즘(Sorting Algorithms) 정렬 알고리즘은 특성에 따라 안정 정렬(stable sort)과 불안정 정렬(unstable sort) 로 구분 정렬의 안정적 특성: 정렬되지 않은 상태에서 중복값이 존재하는 경우 정렬 후에도 그 순서가 그대로 유지 안정 정렬(stable sort): 임의 배열(벡터)에 중복된 값이 존재하는 경우 정렬 후에도 입력 순서와 동일하게 정렬 불안정 정렬(unstable sort): 처음 입력된 중복된 값의 순서가 정렬 후에도 유지된다는 보장이 없음 다음부터 소개할 정렬 알고리즘은 모두 오름차순 정렬을 기준으로 설명 8.4.1 버블 정렬(Bubble Sort) 서로 인접한 두 원소를 비교해 정렬하는 알고리즘 인접한 두 개의 값을 비교해 크기가 순서대로 입력되어 있지 않다면 서로 교환 버블정렬 원리: 위키피디아에서 발췌 첫 번째 자료와 두 번째 자료, 두 번째 자료와 세 번째 자료, … 형태로 마지막 (n-1) 번째 자료와 마지막 자료를 비교해 교환하면서 자료 정렬 첫번 째 순회가 끝난 후 가장 큰 값은 맨 뒤로 이동 순회가 거듭될 때마다 정렬에서 제외되는 원소가 하나씩 증가 \\(\\rightarrow\\) 순회가 거듭될 때 마다 비교 횟수가 줄어듬 \\(\\rightarrow\\) 모든 원소를 방문할 필요가 없음 원소의 이동이 거품이 수면으로 올라오는 듯한 모습을 보이기 때문에 bubble sort라 명칭 버블정렬 애니메이션: 위키피디아 발췌 Pseudocode 데이터(벡터) 입력 주어진 벡터의 인덱스가 i=1부터 i + 1 번째 원소와 비교 i 번째 인덱스의 원소가 i+1 번째 인덱스 원소보다 크다면 서로 교환 (반대의 경우 서로 교환하지 않음) i를 증가하고 마지막 비교까지 2-3 단계 수행 이미 정렬된 마지막 인덱스는 무시 다시 인덱스 i=1 로 설정 후 2-5 단계 수행 구현 bubble_sort &lt;- function(x) { n &lt;- length(x) for(i in 1:(n-1)) { for (j in 1:(n - i)) { if (x[j] &gt; x[j + 1]) { # x[j]가 x[j + 1] 보다 큰 경우 교환 temp &lt;- x[j] x[j] &lt;- x[j + 1] x[j + 1] &lt;- temp } } } return(x) } set.seed(1234) x &lt;- sample(1:100, 100) x_sort &lt;- bubble_sort(x) 시간 복잡도 비교 횟수 한 번 순회를 마칠 때 마다 비교 대상이 하나씩 줄어듬. 즉 전체 원소의 개수가 \\(n\\) 일 때 총 \\(n-1\\) 번의 순회하면 정렬이 종료됨. 총 원소의 개수가 10개이면, \\(9 + 8 + \\cdot + 1 = 45\\) 번 비교가 수행됨. 즉, \\[ (n - 1) + (n - 2) + \\cdots + 1 = \\frac{n(n-1)}{2} \\] 자리 교환 횟수 최선의 경우: 이미 정렬된 벡터인 경우 자리 교환이 한 번도 이루어지지 않기 때문에 \\(\\mathcal{O}(1)\\) 임. 최악의 경우: 역순으로 정렬된 경우 원소를 비교할 때 마다 자리 교환을 수행해야 하기 때문에 \\(\\mathcal{O}(n^2)\\) 임. 즉 버블 정렬의 시간복잡도는 \\(\\mathcal{O}(n^2)\\) 장점 구현이 쉽고 직관적 정렬하고자 하는 벡터 안에서 교환하는 방식이기 때문에 메모리 공간이 일정함 안정 정렬 단점 시간 복잡도가 비효율적 \\(\\rightarrow\\) 치명적임!! 8.4.2 삽입 정렬(Insertion Sort) 손 안의 카드를 정렬하는 방법과 유사 새로운 카드를 기존의 정렬된 카드 사이에 삽입 새로 삽입될 카드의 수만큼 반복 후 전체 카드가 정렬 자료의 모든 원소를 앞부터 차례대로 이미 정렬된 원소 부분과 비교 매 순서마다 해당 원소를 삽입할 수 있는 위치를 탐색 두 번째 원소부터 시작해 앞(윈쪽)의 원소와 비교하면서 삽입 위치 지정 후 자료를 뒤로 옮기고 지정 위치(인덱스)에 원소를 삽입하면서 정렬 두 번째 자료는 첫 번째 자료, 세 번째 자료는 두 번째와 첫 번째 자료, 네 번째 자료는 세 번째, 두 번째, 첫 번째 원소와 비교 후 삽입 위치(인덱스) 탐색 원소가 삽입될 위치를 찾았다면 원소를 한 칸씩 뒤로 이동 삽입정렬 애니메이션: 위키피디아에서 발췌 예시: c(8, 5, 6, 2, 4) 오름차순 정렬 https://gmlwjd9405.github.io/ 에서 발췌 Pseudocode 벡터가 주어졌을 때, 두 번째 인덱스 i=2에 대응하는 원소를 키 값으로 저장 i 바로 앞 인덱스 j = i - 1 지정 j 가 0 보다 크고, j 번째 원소가 키 값보다 크다면 j + 1 번째 원소를 j 번째 원소와 교환 j를 1만큼 감소 4 ~ 6 반복 j + 1 번째 원소를 key 값으로 교환 2 - 8 반복 구현 insertion_sort &lt;- function(x) { n &lt;- length(x) for (i in 2:n) { key &lt;- x[i] j &lt;- i - 1 while(j &gt; 0 &amp;&amp; x[j] &gt; key) { x[j + 1] &lt;- x[j] j &lt;- j - 1 } x[j + 1] &lt;- key } return(x) } set.seed(12345) x &lt;- sample(1:100, 10) insertion_sort(x) [1] 14 24 51 58 75 80 88 90 92 93 시간복잡도 삽입 정렬을 이해하고 직접 구해보기!! 장점 알고리즘이 단순함 대부분 원소가 이미 정렬되어 있는 경우 매우 효율적임 안정 정렬 버블 정렬에 비해 효율적임 단점 대체로 비효율적(시간 복잡도 확인) 8.4.3 병합 정렬(Merge Sort) 분할 정복(Divide and Conquer) 크고 어려운 문제를 조금씩 쉽게 풀 수 있는 문제 단위로 나눠서 해결 후, 이를 병합해 문제를 해결하는 방식 가장 큰 특징 중 하나는 재귀적으로 호출을 통해 알고리즘 구현 알고리즘 기본설계 Divide (분할): 문제 분할이 가능한 경우 2개 이상의 문제로 나눔 Conquer (정복): 나누어진 문제가 여전히 분할 가능하면 다시 분할 수행. 그렇지 않은 경우 문제를 해결 Combine (결합): 정복한 문제들을 통합해 원래 문제의 답을 도출 분할 정복 알고리즘 구현 시 분할을 어떻게 하는지가 가장 중요함 재귀 호출로 인해 알고리즘의 효율성이 낮아질 수 있음 병합 정렬 주어진 벡터에서 가운데를 나누어 비슷한 크기의 벡터를 두 개로 만든 뒤 이를 재귀 호출을 이용해 각각 정렬 후 정렬된 배열을 하나로 합침. 병합 정렬 과정 벡터(배열)의 길이가 1 또는 2인 경우 이미 정렬이 된 것으로 간주. 그렇지 않은 경우 정렬되지 않은 벡터를 절반으로 나눈 후 비슷한 크기의 부분 벡터 생성 각 부분 벡터를 재귀적으로 병합 정렬 실시 두 개의 부분 벡터를 다시 하나의 벡터로 결합 추가적인 벡터가 필요 각 부분 벡터 정렬 시 합병 정렬을 재귀적으로 호출 합병 정렬 시 정렬이 이루어 지는 시점은 2개 리스트를 합병하는 단계임 구현 분할(merge_sort()) 벡터를 2개 부분으로 재귀적으로 나눔 \\(\\rightarrow\\) 벡터의 길이가 1이 될 때 까지 구현을 위해 필요한 요소 주어진 벡터의 첫 번째 인덱스 \\(\\rightarrow\\) 1 주어진 벡터의 마지막 인덱스 \\(\\rightarrow\\) n 주어진 벡터의 가운데 인덱스 \\(\\rightarrow\\) mid = ceiling(n/2) 나누어진 벡터의 왼쪽과 오른쪽 부분을 저장한 객체를 각각left, right로 정의 left: 주어진 벡터의 첫 번째 인덱스에서 mid 번째 인덱스에 해당하는 값을 저장 right: 주어진 벡터의 mid+1 번째 인덱스에서 n 번째 인덱스에 해당하는 값을 저장 이러한 구간을 분할 함수의 인자로 넘겨주는 작업을 재귀적으로 반복 Pseudocode 만약 벡터의 길이가 1보다 크다면, mid = ceiling(n/2) left = merge_sort(x[1:mid]) right = merge_sort(x[(mid + 1):n]) 병합(smerge()) 분할된 벡터를 정렬 후 병합하는 역할 수행 구현을 위해 필요한 요소 정렬한 벡터들을 임시로 저장할 공간(객체): temp 왼쪽과 오른쪽 부분 벡터의 길이 \\(\\rightarrow\\) n1, n2 왼쪽과 오른쪽 부분 벡터의 초기값 저장 \\(\\rightarrow\\) lstart = 1, rstart = 1 Pseudocode (자연어) 왼쪽 부분 벡터와 오른쪽 부분 벡터의 원소를 비교해 더 작은 값이 temp에 저장 만약 left 의 lstart 인덱스에 해당하는 값이 right의 rstart 인덱스에 해당하는 값보다 작다면 temp의 \\(i\\) 번째 인덱스에 left[lstart] 값 저장 후 astart 값을 하나씩 증가 반대의 경우 temp의 \\(i\\) 번째 인덱스에 right[rstart] 값 저장 후 bstart 값을 하나씩 증가 Pseudocode temp &lt;- numeric(length(left) + length(right)) n1 &lt;- length(left) n2 &lt;- length(right) astart &lt;- 1; bstart &lt;- 1 for (i in 1:length(temp))    if (left[lstart] &lt;= right[rstart])      temp[i] &lt;- left[lstart]      lstart = lstart + 1    else      temp[i] &lt;- right[rstart]      rstart = rstart + 1 합병 및 정렬 수행 예시: https://gmlwjd9405.github.io/ 에서 발췌 최종 코드 # 병합 정렬 ## 분할 merge_sort &lt;- function(x) { n &lt;- length(x) if (n &gt; 1) { mid &lt;- ceiling(n/2) left &lt;- merge_sort(x[1:mid]) right &lt;- merge_sort(x[(mid + 1):n]) smerge(left, right) } else { x } } ## 병합 및 정렬 smerge &lt;- function(left, right) { n1 &lt;- length(left) n2 &lt;- length(right) temp &lt;- numeric(n1 + n2) lstart &lt;- rstart &lt;- 1 for (i in 1:length(temp)) { if ((left[lstart] &lt;= right[rstart] &amp; lstart &lt;= length(left)) || rstart &gt; length(right)) { temp[i] &lt;- left[lstart] lstart &lt;- lstart + 1 } else { temp[i] &lt;- right[rstart] rstart &lt;- rstart + 1 } } temp } set.seed(12345) x &lt;- sample(1:100, 20) x_sort &lt;- merge_sort(x) 시간 복잡도 분할 단계(\\(n = 2^k\\)로 가정): 단계 1: \\(n/2\\) 단계 2: \\(n/2^2\\) \\(\\ldots\\) 단계 k: \\(n/2^k \\rightarrow k\\) 번까지 반복 \\(\\rightarrow\\) 최악의 경우 \\(n/2^k = 1\\) 이므로 양변에 로그를 취하면 \\(\\log_2n = k\\log_22 = k \\rightarrow \\mathcal{O}(\\log_2n)\\) 임. 병합단계 총 부분 벡터에 들어있는 원소의 개수가 \\(n\\) 개인 경우 데이터의 이동은 총 \\(2n\\) 번이 필요하고, 재귀호출의 깊이만큼을 곱해줘야 하기 때문에 병합 단계의 시간 복잡도는 \\(2n\\log_2n\\) 임. 총 시간복잡도는 \\(n\\log_2n + 2n\\log_2n = 3n\\log_2n \\rightarrow \\mathcal{O}(n\\log_2n)\\) 8.4.4 퀵 정렬(Quick Sort) "],["뉴튼-랩슨-알고리즘newton-rhapson-algorithm.html", "8.5 뉴튼-랩슨 알고리즘(Newton-Rhapson Algorithm)", " 8.5 뉴튼-랩슨 알고리즘(Newton-Rhapson Algorithm) 임의의 함수 \\(f(x)\\)가 주어졌을 때 \\(f(x) = 0\\) (\\(f(x)\\)의 해)를 만족하는 \\(x\\)를 반복적인 수치계산을 통해 찾는 방법 Newton-Raphson (N-R) 방법 적용 시 \\(f(x)\\)의 만족 조건 \\(x\\)의 특정 범위 내에서 \\(f(x) = 0\\)를 만족하는 유일한 실수값 존재 \\(f(x)\\)는 미분 가능한 함수 Newton-Raphson 알고리즘 예시 N-R 알고리즘(스케치) step 1: 초기치 \\(x_{old}\\)를 설정 step 2: \\(x_{old}\\)에서 \\(f(x_{old})\\) 값 계산 step 3: \\(x_{old}\\)에서 접선의 기울기(미분계수) \\(f&#39;(x_{old})\\) 계산 step 4: \\(f&#39;(x_{old})\\)의 접선이 \\(x\\)축과 만나는 점을 새로운 값 \\(x_{new}\\)로 업데이트 \\[ x_{new} = x_{old} - \\frac{f(x_{old})}{f&#39;(x_{old})} \\] step 5: 일정 조건을 만족할 때 까지 step 1 ~ step 4 반복 step 4에서 초기값 \\(x_0\\)이 주어졌을 때 \\(f(x_0)\\)의 접선은 \\(f&#39;(x_0)\\) 이고 \\((x_0, f(x_0))\\)를 통과하므로 접선의 식은 아래와 같음 \\[ f(x) = f&#39;(x_0)(x - x_0) + f(x_0) \\] \\(f(x) = 0\\) 일때 \\(x\\)의 값은 \\[ x = x_0 -\\frac{f(x_0)}{f&#39;(x_0)} \\] - 따라서 다음 단계에서 해의 근사치 \\(x_{1} = x_0 - f(x_0)/f&#39;(x_0)\\) 이고, 이를 조금 더 일반화 하면, \\[ x_{n+1} = x_n - \\frac{f(x_n)}{f&#39;(x_n)} \\] 위 식은 테일러 전개(Taylor expansion)를 통해 도출 가능(한 번 생각해 볼 것!!) N-R 알고리즘의 특징 현재 \\(x_{old}\\) 또는 \\(x_{n}\\)이 0을 만족할 경우, 더 이상 다음 단계로 가지 않음. 현재 함수값이 0에서 멀리 떨어져 있을수록 다음 스텝이 커지고, 미분계수의 절대값이 클수록 다음 스텝이 작아짐 미분계수의 절대값이 크다 \\(\\rightarrow\\) \\(x_n\\)을 조금만 움직여도 함수값이 크게 변한다는 의미 따라서 미분계수의 값을 다음 스텝에 반영해야 함. 다음 \\(x_{new}\\)의 방향은 \\(f(x_{old})/f&#39;(x_{old})\\) 부호와 반대방향으로 결정 수렴속도가 빠르지만 초기값에 따라 알고리즘의 성능이 달라짐 \\(f&#39;(x)\\)를 반복적으로 계산해야 하고, 경우에 따라 \\(f&#39;(x) = 0\\)이면 반복식 계산이 불가 반복 종료 조건 처음 설정한 최대 반복 횟수를 넘었을 때 더 이상 \\(x\\)의 값이 움직이지 않는다고 판단되었을 경우 함수의 값이 충분히 0에 가까워 졌을 경우 N-R 알고리즘 구현 알고리즘에 입력되어야 할 변수 초기값과 해를 찾을 범위 지정 \\(\\rightarrow\\) 만약 초기값이 해당 범위를 벗어난 값이 입력되었다면 함수 종료 함수 반복횟수 0과 충분히 가까운 상수(종료 시 필요) \\(\\rightarrow\\) tol 함수 내부 또는 함수 외부에서 1차 미분 함수가 요구 함수 인수로 입력 vs. 함수 내부에서 도함수 계산? 도함수 계산 시 위 예제에서 사용한 R 내장 함수 사용 vs. 미분식 사용? \\[ \\lim_{d \\rightarrow 0} \\frac{f(x + d) - f(x)}{d} \\] 반복 종료조건에 도달할 때 까지 반복이 필요 \\(\\rightarrow\\) while 문 사용 반복 조건: 반복이 최대 반복수보다 작고 \\(|f(x_{new})|\\) 값이 tol 값보다 클 때 까지 newton_raphson &lt;- function(FUN, # 함수 x0 = 1, # 초기값 max_iters = 5000, # 최대 반복 횟수 tol = 1.0e-9, range = c(-Inf, Inf), ...) { iters &lt;- 1; grads &lt;- deriv(as.expression(body(FUN)), &quot;x&quot;, function.arg = TRUE) # grads 반환값 중 &quot;gradient&quot; 값 = f&#39;(x0) gap &lt;- x0 - FUN(x0)/attr(grads(x0), &quot;gradient&quot;) while(iters &lt; max_iters &amp; abs(gap) &gt; tol) { # x_new 계산 x_new &lt;- x0 - FUN(x0)/attr(grads(x0), &quot;gradient&quot;) gap &lt;- FUN(x_new) # x_new 가 범위를 벗어난 경우 처리 if (x_new &lt;= range[1]) x_new &lt;- range[1] if (x_new &gt;= range[2]) x_new &lt;- range[2] iters &lt;- iters + 1 x0 &lt;- x_new # 초기값 업데이트 } if (x_new == range[1] | x_new == range[2]) warning(&quot;마지막 점이 x 범위의 경계선 상에 있습니다.&quot;) if (iters &gt; max_iters) warning(&quot;최대 반복 때 까지 해를 찾지 못했습니다.&quot;) cat(&quot;x 가&quot;, x_new, &quot;일 때 함수값:&quot;, FUN(x_new), &quot;\\n&quot;) return(list(solution = x_new, iteration = iters)) } ## test: 위 동영상과 동일한 해를 갖는지 확인 f &lt;- function(x) 5 * x^3 - 7 * x^2 - 40 * x + 100 newton_raphson(FUN = f, x0 = 1, range = c(-10, 10)) -&gt; sols x 가 -3.151719 일 때 함수값: -3.547029e-11 "],["references.html", "References", " References "]]
