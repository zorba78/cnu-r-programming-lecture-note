[
["data-type.html", "2 데이터 타입(Data Type)", " 2 데이터 타입(Data Type) 학습목표(2 주차): R의 데이터 차입 중 가장 기본이 되는 스칼라, 백터, 리스트에 대한 이해와 해당 객체를 생성하고, 이와 연관된 함수들을 익힌다. 학습 필요성 R언어는 타 프로그래밍 언어와 유사한 자료형(정수형, 실수형, 문자형 등)을 제공 R 언어가 다른 언어와 차이점 \\(\\rightarrow\\) 데이터 분석에 특화된 벡터(vector), 행렬(matrix), 데이터프레임(data frame), 리스트(list)와 같은 객체1 제공 R 패키지에서 제공되는 함수 사용 방법은 R의 데이터 타입(객체)에 따라 달라질 수 있음 R 언어를 원활히 다룰 수 있으려면 R에서 데이터 객체의 형태, 자료 할당 및 그 연산 방법에 대한 이해가 필수적으로 선행되어야 함 R 객체의 종류 스칼라(상수형, scalar 또는 atomic) 벡터(vector): R의 기본연산 단위 리스트(list) 행렬(matrix) 배열(array) 데이터프레임(data frame) 함수(function) 연산자(operator) … R 객체 중 scalar, vector, matrix, data.frame \\(\\rightarrow\\) 데이터 객체(object) 객체에 입력 가능한 값 수치형(numeric): 숫자(정수, 소수) 문자열(string): \"충남대학교\", \"R강의\" 논리형(logical): TRUE/FALSE 결측값(NA): 자료에서 발생한 결측 표현 공백(NULL): 지정하지 않은 값 요인(factor): 범주형 자료 표현(수치 + 문자 결합 형태로 이해하면 편함) 기타: 결측(NA), 숫자아님(NaN), 무한대(Inf) 등 R에서 사용자가 데이터 입력을 위해 생성 또는 읽어온 객체(object)는 종종 변수(variable)라는 말과 혼용. 본 문서에서는 최상위 데이터 저장장소를 객체라고 명명하며 데이터프레임과 같이 여러 종류의 데이터타입으로 이루어진 객체의 1차원 속성을 변수라고 칭함↩ "],
["scalar.html", "2.1 스칼라(scalar)", " 2.1 스칼라(scalar) 단일 차원의 값(하나의 값): \\(1 \\times 1\\) 백터로 표현 \\(\\rightarrow\\) R 데이터 객체의 기본은 벡터!! 데이터 객체의 유형은 크게 숫자형, 문자열, 논리형이 있음 스칼라를 입력시 R의 벡터 지정 함수인 c()(벡터 부분에서 상세 내용 학습)를 꼭 사용해서 입력할 필요가 없다. 단, 두 개 이상 스칼라면 벡터이므로 꼭 c()를 써야 한다. 2.1.1 선언 일반적으로 컴파일이 필요한 언어(예: C 언어)의 경우 변수 또는 객체를 사용 전에 선언이 필요 int x; x = 1; 위 코드에서 int x; 없이 x = 1을 입력 후 컴파일 하면 에러가 나타나지만 R 언어에서는 변수를 선언할 필요가 전혀 없음 z 가 어떤 데이터 타입인지 언급할 필요가 전혀 없음 \\(\\rightarrow\\) Python, Perl, Matlab 등과 같은 스크립트 언어의 특징. 아래 코드 참조 z &lt;- 3 z [1] 3 2.1.2 숫자형 정수형(integer)과 실수형(double)로 구분됨 정수형 구분시 숫자 뒤 L을 표시 # 정수형 구분자 사용 예시 # typeof(): R 객체의 데이터 타입 반환하는 함수 typeof(10L) [1] &quot;integer&quot; typeof(10) [1] &quot;double&quot; 수치연산(+, -, *, ^, **, /, %%, %/%) 가능: R은 함수형 언어이기 때문에 앞에 기술한 연산자도 하나의 함수로 인식함. 수치 연산자(operator) 및 기본 수학 함수 Table 2.1: R언어의 기본 수치 연산자 수치형 연산자 설명 +, -, *, / 사칙연산 n %% m n을 m 으로 나눈 나머지 n %/% m n을 m 으로 나눈 몫 n ^ m 또는 n ** m n 의 m 승 숫자형 스칼라 연산 적용 예시 # 숫자형 스칼라 a &lt;- 3 b &lt;- 10 a; b [1] 3 [1] 10 # 덧셈 c &lt;- a + b c [1] 13 # 덧셈을 함수로 입력 # &quot;+&quot;(a, b)로 입력한 결과 c &lt;- &quot;+&quot;(a, b) # 뺄셈 d &lt;- b - a d [1] 7 # 곱셈 m &lt;- a * b m [1] 30 # 나누기 dd &lt;- b/a dd [1] 3.333333 # 멱승 b^a [1] 1000 # 나누기의 나머지(remainder) 반환 r &lt;- b %% a r [1] 1 # 나누기의 몫(quotient) 반환 q &lt;- b %/% a q [1] 3 # 연산 우선 순위 nn &lt;- (3 + 5)*3 - 4**2/4 nn [1] 20 2.1.3 문자형 수치형이 아닌 문자 형식의 단일 원소 C와 같은 언어에서 볼수 있는 한개 문자에 대한 데이터 타입 존재하지 않음 수치연산 불가능 따옴표(\" 또는 ')로 문자를 묶어서 문자열 표시 문자열을 다루는 자세한 설명은 5주차에서 자세히 설명할 예정임 h1 &lt;- c(&quot;Hello CNU!!&quot;) h2 &lt;- c(&quot;R is not too difficult.&quot;) typeof(h1); typeof(h2) [1] &quot;character&quot; [1] &quot;character&quot; h1 [1] &quot;Hello CNU!!&quot; h2 [1] &quot;R is not too difficult.&quot; # 문자열의 문자 수 반환 nchar(h1); nchar(h2) [1] 11 [1] 23 # 문자열 연산 error 예시 h1 - h2 Error in h1 - h2: 이항연산자에 수치가 아닌 인수입니다 2.1.4 논리형 스칼라 참(TRUE, T) 또는 거짓(FALSE, F)를 나타내는 값 TRUE/FALSE: 예약어(reversed word) T/F: TRUE와 FALSE로 초기화된 전역 변수 T에 FALSE 또는 어떤 값도 할당 가능 \\(\\rightarrow\\) 가급적 TRUE/FALSE를 명시하는 것이 편함 논리형 연산자(logical operator) Table 2.2: R언어의 논리형 연산자 논리형 연산자 설명 &amp; AND (vectorized) &amp;&amp; AND (atomic) | OR (vectorized) || OR (atomic) ! NOT 비교 연산자를 적용할 경우 논리값을 반환 Table 2.3: R언어의 비교 연산자 비교 연산자 설명 &gt; 크다(greater-than) &lt; 작다(less-than) == 같다(equal) &gt;= 크거나 같다(greater than equal) &lt;= 작거나 같다(less than equal) != 같지 않다(not equal) Note: 기술한 비교 연산자는 수치형 및 논리형 데이터 타입 모두에 적용 가능 하지만, 문자형은 비교 연산은 ==, != 만 가능함 참고 논리형 스칼라도 숫자형 연산 가능 \\(\\rightarrow\\) 컴퓨터는 TRUE/FALSE를 1과 0의 숫자로 인식 수치 연산자는 스칼라 뿐 아니라 아래에서 다룰 벡터, 행렬, 리스트, 데이터프레임 객체의 연산에 사용 가능 &amp;/|와 &amp;&amp;/||는 동일하게 AND/OR를 의미하지만 연산 결과가 다름. &amp;의 연산 대상이 벡터인 경우 백터 구성 값 각각에 대해 &amp; 연산을 실행 하지만 &amp;&amp;는 하나의 값(스칼라)에만 논리 연산이 적용(아래 예시 참고) 논리형 스칼라의 논리 및 비교 연산 예시 typeof(TRUE) # TRUE의 데이터 타입 [1] &quot;logical&quot; TRUE &amp; TRUE # TRUE 반환 [1] TRUE TRUE &amp; FALSE # FALSE 반환 [1] FALSE # 아래 연산은 모두 TRUE 반환 TRUE | TRUE [1] TRUE TRUE | FALSE [1] TRUE # TRUE와 FALSE의 반대 !TRUE [1] FALSE !FALSE [1] TRUE # 전역변수 T에 FALSE 값 할당 T &lt;- FALSE T [1] FALSE T &lt;- TRUE # 원상복귀 # TRUE/FALSE에 값을 할당할 수 없음 TRUE &lt;- 1 Error in TRUE &lt;- 1: 대입에 유효하지 않은 (do_set) 좌변입니다 TRUE &lt;- FALSE Error in TRUE &lt;- FALSE: 대입에 유효하지 않은 (do_set) 좌변입니다 # &amp;(|)와 &amp;&amp;(||)의 차이 l.01 &lt;- c(TRUE, TRUE, FALSE, TRUE) # 논리형 값으로 구성된 벡터 l.02 &lt;- c(FALSE, TRUE, TRUE, TRUE) l.01 &amp; l.02 # l.01과 l.02 각 원소 별 &amp; 연산 [1] FALSE TRUE FALSE TRUE l.01 &amp;&amp; l.02 # l.01과 l.02의 첫 번째 원소에 대해 &amp; 연산 [1] FALSE # 비교 연산자 x &lt;- 9 y &lt;- 4 # x &gt; y 의 반환값 데이터 타입 typeof(x &gt; y) [1] &quot;logical&quot; # 논리형 값 반환 x &gt; y [1] TRUE x &lt; y [1] FALSE x == y [1] FALSE x != y [1] TRUE 2.1.5 결측값(missing value) 결측치 지정 상수: NA \\(\\rightarrow\\) R과 다른 언어의 가장 큰 차이점 중 하나 예를 들어 4명의 통계학과 학생 중 3명의 통계학 개론 중간고사 점수가 각각 80, 90, 75점이고 4번 째 학생의 점수가 없는 경우 NA로 결측값 표현 is.na() 함수를 이용해 해당 값이 결측을 포함하고 있는지 확인 one &lt;- 80; two &lt;- 90; three &lt;- 75; four &lt;- NA four [1] NA # &#39;is.na()&#39; 결측 NA가 포함되어 있으면 TRUE is.na(four) [1] TRUE is.na(object_name): 객체를 구성하고 있는 원소 중 NA를 포함하고 있는지 확인 \\(\\rightarrow\\) NA를 포함하면 TRUE, 아니면 FALSE 반환 참고: 자료에 NA가 포함된 경우 연산 결과는 모두 NA가 반환 NA + 1 [1] NA NA &amp; TRUE [1] NA NA &lt;= 3 [1] NA 2.1.6 NULL 값 NULL: 초기화 되지 않은 변수 또는 객체를 지칭함 is.null() 함수를 통해 객체가 NULL인지 판단 x &lt;- NULL # NULL 지정 is.null(x) # NULL 객체인지 판단 [1] TRUE x &lt;- 1 is.null(x) [1] FALSE NA와 NULL의 차이점: 자료의 공백을 의미한다는 점에서 유사한 측면이 있으나 아래 내용처럼 큰 차이가 있음 NULL: 값을 지정하지 않은 객체를 표현하는데 사용. 즉 아직 변수 또는 객체의 상태가 아직 미정인 상태를 나타냄 NA: 데이터 값이 결측임을 지정해주는 논리형 상수 # NA와 NULL은 다름 x &lt;- NA is.null(NA) [1] FALSE is.na(NULL) logical(0) # 데이터에서 NA와 NULL의 차이점 x &lt;- c(80, 90, 75, NA) x [1] 80 90 75 NA x &lt;- c(80, 90, 75, NULL) x [1] 80 90 75 2.1.7 무한대/무한소/숫자아님 Inf: 무한대(\\(+\\infty\\), \\(1/0\\)) -Inf: 무한소(\\(-\\infty\\), \\(-1/0\\)) NaN: 숫자아님(Not a Number, \\(0/0\\)) is.finite(), is.infinite(), is.nan() 함수를 통해 객체가 Inf 또는 NaN을 포함하는지 확인 x &lt;- Inf is.finite(x) [1] FALSE is.infinite(x) [1] TRUE x &lt;- 0/0 is.nan(x) [1] TRUE is.infinite(x) [1] FALSE 지금까지 요인형(factor)을 제외하고 R 언어에서 객체가 가질 수 있는 데이터 유형에 대해 알아봄. 요인형은 4주 차에 예정된 “R 자료형: 팩터, 테이블, 데이터 프레임”에서 상세하게 배울 예정임. "],
["vector.html", "2.2 벡터(vector)", " 2.2 벡터(vector) 타 프로그래밍 언어의 배열(array)의 개념으로 동일한 유형의 데이터 원소가 하나 이상(\\(n \\times 1\\), \\(n \\geq 1\\)) 으로 구성된 자료 형태 2.1 절에서 기술한 스칼라(scalar)는 사실 \\(1 \\times 1\\) 벡터임 수학적으로 벡터는 아래와 같이 나타낼 수 있음 \\[\\mathrm{\\mathbf x} = \\begin{bmatrix} x_1, x_2, x_3, \\ldots, x_n \\end{bmatrix}^T \\] 벡터는 앞의 예시에서 본 바와 같이 c() 함수를 사용해 생성 # 숫자형 벡터 x &lt;- c(2, 0, 2, 0, 0, 3, 2, 4) x [1] 2 0 2 0 0 3 2 4 # 문자형 벡터 y &lt;- c(&quot;Boncho Ku&quot;, &quot;R programming&quot;, &quot;Male&quot;, &quot;sophomore&quot;, &quot;2020-03-24&quot;) y [1] &quot;Boncho Ku&quot; &quot;R programming&quot; &quot;Male&quot; &quot;sophomore&quot; [5] &quot;2020-03-24&quot; 두 개 이상의 벡터는 c() 함수를 통해 결합 가능 # 두 벡터의 결합 x &lt;- 1:5 y &lt;- 10:6 z &lt;- c(x, y) x [1] 1 2 3 4 5 y [1] 10 9 8 7 6 z [1] 1 2 3 4 5 10 9 8 7 6 서로 다른 자료형으로 벡터를 구성한 경우 표현력이 높은 자료형으로 변환한 값 반환 예: 문자열 + 숫자로 구성된 벡터 \\(\\rightarrow\\) 문자형 벡터 벡터 각 원소에 이름 부여 가능 names() 함수를 이용해 원소 이름 지정 사용 프로토타입: names(x) &lt;- 문자열 벡터, 단 x와 이름에 입력할 문자열 벡터의 길이는 같아야 함. 벡터의 길이(차원) 확인 length() 또는 NROW() 사용 색인(indexing)을 통해 벡터의 원소에 접근 가능 x[i]: 벡터 x의 i번 째 요소 x[-i]: 벡터 x에서 i번 째 요소를 제외한 나머지 x[I]: I가 인덱싱 벡터라고 할 때 I에 지정된 요소를 얻어옴. 일반적으로 I는 백터의 행 순서 번호 또는 각 벡터 원소의 이름에 대응하는 문자열 벡터를 인덱싱 벡터로 사용할 수 있음. x[start:end]: x의 start부터 end까지 값 반환 "]
]
