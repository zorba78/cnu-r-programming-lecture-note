[
["ch-data-visualization.html", "5 데이터 시각화", " 5 데이터 시각화 학습 목표 R에서 기본으로 제공하는 그래프 생성 개념 및 관련 함수의 의미 및 사용 방법에 대해 학습한다. Grammar of graphics를 기반으로 개발된 ggplot2 패키지에 대해 알아보고 사용 방법을 학습힌다. “The simple graph has brought more information to the data analyst’s mind than any other device.” \\(\\rightarrow\\) John Tukey 그래프는 생각보다 더 많은 정보를 제공 데이터 분석 시 통계량 만으로 데이터의 속성을 결정하는 것은 매우 위험(예: Anscombe’s quartet 데이터 예제) x1 x2 x3 x4 y1 y2 y3 y4 9.000000 9.000000 9.000000 9.000000 7.500909 7.500909 7.500000 7.500909 x1 x2 x3 x4 y1 y2 y3 y4 3.316625 3.316625 3.316625 3.316625 2.031568 2.031657 2.030424 2.030579 Figure 5.1: Anscombe’s quartet: https://goo.gl/Ugv3Cz 에서 스크립트 발췌 시각화는 분석에 필요한 통계량 또는 분석 방법론에 대한 가이드를 제시 인간의 뇌 구조 상 추상적인 숫자나 문자 보다는 그림이나 도표를 더 빨리 이해 다른 통계 패키지(SPSS, SAS, STATA 등)와 비교할 수 없을 정도로 월등한 성능의 그래픽 도구 및 기능 제공 "],
["r-basic-graphics.html", "5.1 R 기본 그래프 함수", " 5.1 R 기본 그래프 함수 R의 그래픽은 그래픽 장치에 특정 그림(선, 점, 면 등)을 순차적으로 추가하는 명령(스크립트)을 통해 생성 그래픽 장치: R에서 그래프가 출력되는 장치 windows: R 프로그램 내에서 출력 graphic files: pdf, jpeg, tiff, png, bmp 등의 확장자를 갖는 이미지 파일 그래프 장치를 열기 위해 사용되는 함수 windows() 또는 win.graph(): 그래픽 장치를 열기 위해 사용하는 함수 dev.cur(): 현재 활성화된 그래프 장치 확인 dev.set(): 다수의 그래프 장치가 열려 있는 경우 which = 번호로 변경 dev.list(): 현재 열려 있는 그래픽 장치 목록 조회 dev.off(): 현재 작업 중인 그래픽 장치 중지 graphics.off(): 열려있는 모든 그래픽 장치 중지 R 그래프의 구조 Figure 5.2: R 그래프영역 Figure region: 범례(legend), x축, y축, 도표 등을 그래프가 표현하는 모든 구성요소를 포함하는 영역(plot region 포함) Plot region: 도표 부분 출력되는 영역 Figure margin: figure region 안에서 plot region의 여백 부분을 나타내며, x, y 축 레이블(label), 제목(title), 각 축의 tick 및 값 등이 주로 위치하는 영역 Outer margin: figure region 밖의 여백 부분 R 기본 그래프 함수에 대한 강의 내용은 주로 AIMS-R-users에서 참고를 함 그래프의 요소: 점(point), 선(line), 면(area), , 텍스트(text), 축(axis), 눈금(tick), 범례(legend) 등 저수준 그래프 함수(low level plotting function): 위의 그래프 요소들을 개별적으로 작업(좌표축 정의, 여백 정의)하기 위한 함수군 고수준 그래프 함수(high level plotting function): 그래프의 함수 기능(저수준 그래프 함수)를 모아서 하나의 완성된 도표(산점도, 막대도표, 히스토그램, 상자그림 등)를 생성할 수 있는 함수군 고수준 그래프 함수를 호출할 경우 자동으로 그래픽 장치가 열려서 win.graph() 등을 사용할 필요가 없으나, 이미 호출된 그래프는 사라짐 주의: 일반적으로 R 기본 그래픽 함수로 도표 작성 시 저수준 그래프 함수는 고수준 그래프 함수로 생성한 그래프에 부가적 기능을 추가하기 위해 사용됨. 따라서 저수준 그래프 함수군은 고수준 그래프 함수을 통해 먼저 생성한 그래프(주로 아래 설명할 plot() 함수) 위에 적용됨. "],
["high-level-graph.html", "5.2 고수준 그래프 함수", " 5.2 고수준 그래프 함수 5.2.1 plot() 함수 R의 가장 대표적인 2차원 고수준 그래프 출력 함수 plot()의 가장 일반적인 용도는 그래프 장치를 설정(축, 값의 범위 등) 후 저수준 그래프 함수(축, 선, 점, 면 등)를 그래프 장치에 적용 데이터가 저장되어 있는 객체(벡터, 행렬, 데이터 프레임 등) 하나 이상을 함수의 인수(argument)로 사용 데이터의 클래스에 따라 출력되는 그래프 결과가 다름 \\(\\rightarrow\\) methods(plot)을 통해 plot() 함수가 적용되는 클래스 확인 가능 #각 클래스에 적용되는 plot() 함수 리스트 methods(plot) [1] plot,ANY-method plot,color-method plot.acf* [4] plot.ACF* plot.augPred* plot.compareFits* [7] plot.data.frame* plot.decomposed.ts* plot.default [10] plot.dendrogram* plot.density* plot.ecdf [13] plot.factor* plot.formula* plot.function [16] plot.ggplot* plot.gls* plot.gtable* [19] plot.hcl_palettes* plot.hclust* plot.histogram* [22] plot.HoltWinters* plot.intervals.lmList* plot.isoreg* [25] plot.lm* plot.lme* plot.lmList* [28] plot.medpolish* plot.mlm* plot.nffGroupedData* [31] plot.nfnGroupedData* plot.nls* plot.nmGroupedData* [34] plot.pdMat* plot.ppr* plot.prcomp* [37] plot.princomp* plot.profile.nls* plot.R6* [40] plot.ranef.lme* plot.ranef.lmList* plot.raster* [43] plot.shingle* plot.simulate.lme* plot.spec* [46] plot.stepfun plot.stl* plot.table* [49] plot.trans* plot.trellis* plot.ts [52] plot.tskernel* plot.TukeyHSD* plot.Variogram* see &#39;?methods&#39; for accessing help and source code #예시 1: 객체 클래스가 데이터 프레임인 경우 # mtcars 데이터 예시 class(mtcars) [1] &quot;data.frame&quot; plot(mtcars) # 예시2: lm()으로 도출된 객체(list) ## 연비(mpg)를 종속 변수, 배기량(disp)을 독립변수로 한 회귀모형 ## lm() 함수 사용 -&gt; 객체 클래스는 lm mod &lt;- lm(mpg ~ disp, data = mtcars) class(mod) [1] &quot;lm&quot; par(mfrow = c(2, 2)) # 4개 도표를 한 화면에 표시(2행, 2열) plot(mod) dev.off() # 활성화된 그래프 장치 닫기 null device 1 # 예시3: 테이블 객체 class(Titanic) [1] &quot;table&quot; plot(Titanic) 객체의 클래스가 벡터나 행렬인 경우, 객체에 저장된 데이터를 2차원 평면(x-y 좌표)에 출력 # 예시1: 데이터 객체를 하나만 인수로 받는 경우 # -&gt; x축은 객체의 색인이고, x의 데이터는 y 좌표에 매핑 x &lt;- mtcars$disp y &lt;- mtcars$mpg plot(x); plot(y) # 두개의 객체를 인수로 받은 경우 # -&gt; 2차원 산점도 출력 plot(x, y) plot() 함수의 세부 옵션 plot( x, # x 축에 대응하는 데이터 객체 y, # y 축에 대응하는 데이터 객체 type, # 그래프 타입(예시 참조) main, # 제목 sub, # 부제목 xlim, ylim, # x, y 축 범위 지정 xlab, ylab, # x-y 축 이름 lty, # 선 모양 pch, # 점 모양 cex, # 점 및 텍스트 크기 lwd, # 선 굵기 col # 색상 ) type 인수: 그래프 타입 지정 # BOD 데이터셋 이용 x &lt;- BOD$Time; y &lt;- BOD$demand x; y [1] 1 2 3 4 5 7 [1] 8.3 10.3 19.0 16.0 15.6 19.8 ctype &lt;- c(&quot;p&quot;, &quot;l&quot;, &quot;b&quot;, &quot;o&quot;, &quot;c&quot;, &quot;h&quot;, &quot;s&quot;, &quot;n&quot;) type_desc &lt;- c(&quot;points&quot;, &quot;lines&quot;, &quot;both points and lines&quot;, &quot;overlapped points and plots&quot;, &quot;empty points joined by lines&quot;, &quot;histogram like vertical lines&quot;, &quot;stair steps&quot;, &quot;no lines and points&quot;) op &lt;- par(mfrow = c(2, 4)) for (i in 1:length(ctype)) { plot(x, y, type = ctype[i], main = paste(&quot;type =&quot;, &quot;&#39;&quot;, ctype[i], &quot;&#39;&quot;), sub = type_desc[i], cex.main = 1.5, cex.sub = 1.5, cex = 2) } par(op) xlim, ylim 인수: x, y 축의 범위 지정 op &lt;- par(mfrow = c(2, 3)) range &lt;- data.frame( x1 = rep(c(0, 1), each = 3), x2 = rep(c(10, 5), each = 3), y1 = rep(c(0, 5, 8), times = 2), y2 = rep(c(30, 20, 16), times = 2) ) for (i in 1:6) { plot(x, y, xlim = as.numeric(range[i, 1:2]), ylim = as.numeric(range[i, 3:4]), main = paste0(&quot;xlim = c(&quot;, paste(as.numeric(range[i, 1:2]), collapse = &quot;, &quot;), &quot;), &quot;, &quot;ylim = c(&quot;, paste(as.numeric(range[i, 3:4]), collapse = &quot;, &quot;), &quot;)&quot;) ) } par(op) xlab, ylab 인수: x축과 y축 이름 지정 x_lab &lt;- c(&quot; &quot;, &quot;Time (days)&quot;) y_lab &lt;- c(&quot;Demand&quot;, &quot;Oxygen demend (mg/l)&quot;) op &lt;- par(mfrow = c(2, 2)) lab_d &lt;- expand.grid(x_lab, y_lab) for (i in 1:4) { plot(x, y, xlab = lab_d[i, 1], ylab = lab_d[i, 2], main = paste0(&quot;xlab = &quot;, &quot;&#39;&quot;, lab_d[i, 1], &quot;&#39;&quot;, &quot;, &quot;, &quot;ylab = &quot;, &quot;&#39;&quot;, lab_d[i, 2], &quot;&#39;&quot;) ) } par(op); dev.off() null device 1 lty 인수: 선의 형태 지정 line_type &lt;- c(&quot;blank&quot;, &quot;solid&quot;, &quot;dashed&quot;, &quot;dotted&quot;, &quot;dotdash&quot;, &quot;longdash&quot;, &quot;twodash&quot;) plot(x = c(1:7), y = c(1:7), type=&quot;n&quot;, axes = FALSE, xlab = &quot;&quot;, ylab = &quot;&quot;, main = &quot;Basic Line Types&quot;, cex.main = 1.5) for (i in 1:length(line_type)) { lines(c(1, 5.2), c(i, i), lty = i - 1, lwd = 2) text(5.5, i, labels = paste0(&quot;lty = &quot;, i - 1, &quot; (&quot;, line_type[i], &quot;)&quot;), cex = 1.2, adj = 0) } Figure 5.3: lty 파라미터 값에 따른 선 형태 pch 인수: 점(point)의 모양을 지정 coord &lt;- expand.grid(x = 1:5, y = 1:5) plot(coord, type = &quot;n&quot;, xlim = c(0.8, 5.5), ylim = c(0.8, 5.5), xlab = &quot;&quot;, ylab = &quot;&quot;, main = &quot;Basic plotting characters&quot;, xaxt = &quot;n&quot;, yaxt = &quot;n&quot;) grid() points(coord, pch=1:25, cex = 2.5) text(coord + 0.2, labels = 1:25, cex = 1) Figure 5.4: R graphics 점 표현 기호 및 대응 번호 cex 인수: 텍스트 및 점의 크기 지정 cex.axis: 각 축의 눈금 레이블 크기 조정 cex.lab: x-y 축의 이름 크기 조정 cex.main: 그림 제목 크기 조정 cex.sub: 부제목 크기 조정 텍스트 cex 인수 적용 예시 par(mfrow = c(2, 3)) plot(BOD, type = &quot;p&quot;, cex = 2, main = &quot;cex = 2&quot;, sub = &quot;Subtitle&quot;) plot(BOD, type = &quot;p&quot;, cex.axis = 2, main = &quot;cex.axis = 2&quot;, sub = &quot;Subtitle&quot;) plot(BOD, type = &quot;p&quot;, cex.lab = 2, main = &quot;cex.lab = 2&quot;, sub = &quot;Subtitle&quot;) plot(BOD, type = &quot;p&quot;, cex.main = 2, main = &quot;cex.main = 2&quot;, sub = &quot;Subtitle&quot;) plot(BOD, type = &quot;p&quot;, cex.sub = 2, main = &quot;cex.sub = 2&quot;, sub = &quot;Subtitle&quot;) lwd 인수: 선의 두께 지정 점 cex 크기와 lwd 두께 coord &lt;- expand.grid(x = 1:5, y = 1:5) plot(coord, type=&quot;n&quot;, xlab = &quot;cex&quot;, ylab = &quot;lwd&quot;, xlim = c(0.5, 5.5), ylim = c(0.5, 5.5), main = &quot;pch and lwd size&quot;, cex.main = 2, cex.lab = 1.5) points(coord, pch=16, cex = 1:5, col = &quot;darkgray&quot;) for (i in 1:5) { points(1:5, coord$y[coord$y == i], pch=21, cex = 1:5, lwd = i, col = &quot;black&quot;) } col 인수: 그래프의 점, 면, 선의 색상 palette() 함수를 통해 그래픽 기본 색상 확인(총 8개) colors()를 통해 R에서 기본으로 제공하는 색상 확인 가능(총 657개) 내장 색상 팔레트: n 개의 색상을 반환하고, 색상의 투명도는 alpha 인수를 통해 조정 rainbow(n): Red \\(\\rightarrow\\) Violet heat.colors(n): White \\(\\rightarrow\\) Orange \\(\\rightarrow\\) Red terrain.colors(n): White \\(\\rightarrow\\) Brown \\(\\rightarrow\\) Green topo.colors(n): White \\(\\rightarrow\\) Brown \\(\\rightarrow\\) Green \\(\\rightarrow\\) Blue grey(n): White \\(\\rightarrow\\) Black R Color Chart 참고 5.2.2 주요 고수준 그래픽 함수 5.2.3 산점도 5.2.3.1 car::scatterplot() plot(x, y)를 통해 2차원 산점도를 그릴 수 있으나, car 패키지에 내장되어 있는 해당 함수를 이용해 보다 많은 정보(상자그림, 회귀곡선 등)를 포함 # car 패키지 설치 # install.packages(&quot;car&quot;) # require(car) car::scatterplot(mpg ~ disp, data = mtcars) plot() 함수의 인수 적용 가능 # help(scatterplot) 참고 car::scatterplot(mpg ~ disp, data = mtcars, regLine = list(method = lm, lty = 1, col = &quot;red&quot;), col = &quot;black&quot;, cex = 2, pch = 16) 5.2.3.2 pairs() pairs(): 산점도 행렬을 생성해주는 함수로, 객체의 클래스가 데이터 프레임인 경우 plot(dat)과 동일한 그래프를 반환 # iris dataset plot(iris) 5.2.3.3 car::scatterplotMatrix() R graphics 패키지의 pair()와 유사하나 각 변수 쌍별 회귀 곡선 및 분포 확인 가능 # iris dataset car::scatterplotMatrix(iris, col = &quot;black&quot;) # help(scatterplotMatrix) car::scatterplotMatrix(iris, col = c(&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;), smooth = FALSE, groups = iris$Species, by.groups = FALSE, regLine = list(method = lm, lwd = 1, col = &quot;gray&quot;), pch = (15:17)) 5.2.4 행렬 그래프 행렬 객체를 plot() 함수의 입력으로 사용한 경우 1-2 번째 열 데이터로 산점도를 출력 # 행렬을 plot() 함수의 입력으로 받은 경우 par(mfrow = c(1,2)) x &lt;- seq(-5, 5, 0.01) X &lt;- mapply(dnorm, list(a = x, b = x, c = x), c(0, 1, 2), c(1, 2, 4)) X &lt;- matrix(X, nrow = length(x), ncol = 3) head(X) [,1] [,2] [,3] [1,] 1.486720e-06 0.002215924 0.02156933 [2,] 1.562867e-06 0.002249385 0.02166383 [3,] 1.642751e-06 0.002283295 0.02175862 [4,] 1.726545e-06 0.002317658 0.02185368 [5,] 1.814431e-06 0.002352479 0.02194902 [6,] 1.906601e-06 0.002387763 0.02204463 # plot() 함수를 이용한 행렬 그래프 출력 plot(X, type = &quot;l&quot;, main = &quot;plot matrix (X) using plot()&quot;) text(0.2, 0.05, labels = &quot;plot(X, type = `l`)&quot;) plot(X[, 1], X[, 2], type = &quot;l&quot;, main = &quot;scatterplot between X[, 1] and X[, 2]&quot;) text(0.2, 0.05, labels = &quot;plot(X[,1], X[,2], type = `l`)&quot;) matplot() 객체의 클래스가 행렬(matrix) 형태로 이루어진 데이터에 대한 그래프 출력 열 기준으로 그래프 출력 x 가 주어지지 않은 경우, 행렬의 색인을 x 축으로 사용 # matplot 도표 par(mfrow = c(1, 2)) matplot(X, type = &quot;l&quot;, lwd = 2, main = &quot;matplot() without x&quot;) matplot(x, X, type = &quot;l&quot;, lwd = 2, main = &quot;matplot() with x&quot;) 5.2.5 히스토그램 hist() hist( x, # vector 객체 breaks, # 빈도 계산을 위한 구간 freq, # y축 빈도 또는 밀도(density) 여부 col, # 막대 색상 지정 border, # 막대 테두리 색 지정 labels, # 막대 위 y 값 레이블 출력 여부 ... ) # airquality 데이터 셋 # help(airquality) 참고 glimpse(airquality) Rows: 153 Columns: 6 $ Ozone &lt;int&gt; 41, 36, 12, 18, NA, 28, 23, 19, 8, NA, 7, 16, 11, 14, 18, 1... $ Solar.R &lt;int&gt; 190, 118, 149, 313, NA, NA, 299, 99, 19, 194, NA, 256, 290,... $ Wind &lt;dbl&gt; 7.4, 8.0, 12.6, 11.5, 14.3, 14.9, 8.6, 13.8, 20.1, 8.6, 6.9... $ Temp &lt;int&gt; 67, 72, 74, 62, 56, 66, 65, 59, 61, 69, 74, 69, 66, 68, 58,... $ Month &lt;int&gt; 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,... $ Day &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, ... temp &lt;- airquality$Temp hist(temp) hist() 함수의 반환값 h &lt;- hist(temp, plot = FALSE) # 그래프를 반환하지 않음 h $breaks [1] 55 60 65 70 75 80 85 90 95 100 $counts [1] 8 10 15 19 33 34 20 12 2 $density [1] 0.010457516 0.013071895 0.019607843 0.024836601 0.043137255 0.044444444 [7] 0.026143791 0.015686275 0.002614379 $mids [1] 57.5 62.5 67.5 72.5 77.5 82.5 87.5 92.5 97.5 $xname [1] &quot;temp&quot; $equidist [1] TRUE attr(,&quot;class&quot;) [1] &quot;histogram&quot; hist() 함수의 인수 사용(plot() 함수의 인수 거의 대부분 사용 가능) par(family = &quot;nanumgothic&quot;) hist(temp, main=&quot;La Guardia Airport 일중 최고 기온&quot;, xlab = &quot;온도&quot;, ylab = &quot;밀도&quot;, xlim = c(50,100), col = &quot;orange&quot;, freq = FALSE ) labels 인수를 통해 빈도값 출력 par(family = &quot;nanumgothic&quot;) hist(temp, main = &quot;La Guardia Airport 일중 최고 기온&quot;, xlab = &quot;온도&quot;, ylab = &quot;빈도&quot;, xlim = c(50,100), col = &quot;orange&quot;, labels = TRUE ) breaks 인수를 통해 막대 구간 조정 op &lt;- par(mfrow = c(1, 2)) hist(temp, breaks = 4, main = &quot;breaks = 4&quot;) hist(temp, breaks = 15, main = &quot;breaks = 15&quot;) par(op); dev.off() null device 1 5.2.6 막대 그래프 히스토그램(hist())은 연속형 데이터의 구간 별 빈도 또는 밀도를 나타냄 막대 도표(bar plot)는 해당 좌표의 값(value)를 나타냄 x = c(1,2,2,1,3,3,1,5) par(mfrow = c(1, 2)) hist(x); barplot(x) barplot() help(barplot) 을 통해 함수 사용 방법 확인 보통 요약통계량(예: 그룹별 빈도, 평군)의 시각화를 위해 많이 사용 ## Wool dataset: warpbreaks ## 제직 중 방적 횟수 ## 직조기 당 날실 파손 횟수 데이터 head(warpbreaks) count &lt;- with(warpbreaks, tapply(breaks, list(wool, tension), sum)) par(mfrow = c(1, 2)) barplot(count, legend = TRUE, xlab = &quot;Tension&quot;, ylab = &quot;Number of breaks&quot;, ylim = c(0, 700), cex.lab = 1.5) # stack 형태 barplot(count, legend = TRUE, beside = TRUE, xlab = &quot;Tension&quot;, ylab = &quot;Number of breaks&quot;, ylim = c(0, 450), cex.lab = 1.5) # 분리 형태 데이터 프레임을 대상으로 barplot() 실행 시 수식 표현 가능 막대도표 + 표준오차 mean_breaks &lt;- aggregate(breaks ~ wool + tension, data = warpbreaks, mean) se_breaks &lt;- aggregate(breaks ~ wool + tension, data = warpbreaks, FUN = function(x) sd(x)/sqrt(length(x))) barplot(breaks ~ wool + tension, data = mean_breaks, ylim = c(0, 55), beside = TRUE, legend = TRUE, # 범례 col = c(&quot;blue&quot;, &quot;skyblue&quot;) ) -&gt; bp cent &lt;- matrix(mean_breaks$breaks, 2, 3) sem &lt;- matrix(se_breaks$breaks, 2, 3) arrows(bp, cent - sem, bp, cent + sem, angle = 90, code = 3, length = 0.05) 5.2.7 상자 그림 다섯 개의 통계량(5 numbers summary: 최솟값, 1사분위수, 중앙값, 3사분위수, 최댓값)을 이용해 연속형 자료를 그래프로 표현한 도표 set.seed(20200522) x &lt;- rnorm(100) plab &lt;- c(&quot;min(x)&quot;, &quot;quantile(x, 0.25)&quot;, &quot;median(x)&quot;, &quot;quantile(x, 0.75)&quot;, &quot;max(x)&quot;) # x-axis 레이블 bxplt &lt;- boxplot(x, horizontal = TRUE, # x-y 축 회전 여부 axes = F, # x-y 축 출력 여부 main = &quot;Boxplot anatomy&quot;, cex.main = 2 ) # boxplot 수치 요약값 저장 axis(side = 1, at = bxplt$stats, labels = FALSE, las = 2) # x-axis 설졍 text(x = c(bxplt$stats), y = 0.4, labels = plab, xpd = TRUE, # 텍스트 출력 영역 범위 지정 srt = 25, # 레이블 로테이션 각도(degree) adj = 1.1, # 레이블 위치 조정 cex = 1.2 # 레이블 크기 조정 ) # x-axis 레이블 조정 abline(v = c(bxplt$stats), lty = 2, col = &quot;gray&quot;) # 수직 선 출력 arrows(x0 = c(bxplt$stats)[2], y0 = 1.3, x1 = c(bxplt$stats)[4], y1 = 1.3, code = 3, length = 0.1) # IQR 범위에 화살표 출력 text(x = -0.1, y = 1.3, labels = &quot;Interquartile range (IQR)&quot;, adj = 0.5, pos = 3) # boxplot() help(boxplot)을 통해 상세 함수 인수 내용 확인 boxplot(x, # boxplot 대상 객체 명 ... # 두 개 이상 객체(보통은 벡터) ) 또는 boxplot(formula, # 수식 표현 data, # 데이터 프레임 객체명 subset, # 부집단 선택 ... # help(boxplot)을 통해 인수 사용법 참고 ) 벡터, 행렬, 데이터 프레임, 리스트 객체에 적용 가능 데이터 프레임의 경우 수식 표현 가능 y ~ x: 변수 x (보통은 factor 형)에 따른 y y ~ x + y: 변수 x와 y의 조합에 따른 y par(mfrow = c(2, 2)) set.seed(20200522) y &lt;- rnorm(100, 2, 1) # vector 객체 boxplot boxplot(x, y, main = &quot;Boxplot for a vector object&quot;) axis(side = 1, at = 1:2, labels = c(&quot;x&quot;, &quot;y&quot;)) # 행렬 객체 boxplot head(X) [,1] [,2] [,3] [1,] 1.486720e-06 0.002215924 0.02156933 [2,] 1.562867e-06 0.002249385 0.02166383 [3,] 1.642751e-06 0.002283295 0.02175862 [4,] 1.726545e-06 0.002317658 0.02185368 [5,] 1.814431e-06 0.002352479 0.02194902 [6,] 1.906601e-06 0.002387763 0.02204463 boxplot(X, main = &quot;Boxplot for a matrix `X`&quot;) # 데이터 프레임 객체 boxplot boxplot(breaks ~ wool + tension, data = warpbreaks, main = &quot;Boxplot for a dataframe `warpbreaks`&quot;, col = topo.colors(6)) # 리스트 객체 boxplot ## list 생성: mapply set.seed(20200522) xl &lt;- mapply(rnorm, # 정규 난수 생성 함수 c(50, 100, 150, 200), # 첫번째 인수 n c(0, 2, 4, 6), # 두 번째 인수 mean c(1, 1, 1, 2)) # 세번째 인수 sd boxplot(xl, main = &quot;Boxplot for a list `xl`&quot;, col = &quot;lightgray&quot;) 5.2.8 바이올린 도표 상자그림과 유사하나, 가운데를 중심으로 왼쪽과 오른쪽에 데이터의 밀도(kernel density)를 표시 vioplot::viplot() boxplot()과 사용 방법이 유사 # install.packages(vioplot) # require(vioplot) ## generating bimodal distribution mu &lt;- 2; sigma &lt;- 1 set.seed(20200522) bimodal &lt;- c(rnorm(200, mu, sigma), rnorm(300, -mu, sigma)) # 두 정규분포 혼합 normal &lt;- rnorm(200, 2*mu, sigma) # 정규분포 unif &lt;- runif(200, -2, 2) # uniform 분포 (-2, 2) par(mfrow = c(2,2)) boxplot(bimodal, normal, unif, main = &quot;Boxplot for each distribution (vectors)&quot;) vioplot::vioplot(bimodal, normal, unif, main = &quot;Violin plot for each distribution (vectors)&quot;, col = &quot;skyblue&quot;) vioplot::vioplot(breaks ~ wool + tension, data = warpbreaks, main = &quot;Violin plot for a dataframe `warpbreaks`&quot;, col = heat.colors(6)) vioplot::vioplot(xl, data = warpbreaks, main = &quot;Violin plot for a list `xl`&quot;, col = rainbow(4)) 5.2.9 모자이크 도표 다변량 범주형 자료의 분포(빈도, frequency)를 시각화 하기 위한 그래프 전체 직사각형의 면적을 1이라고 할 때, 중첩되지 않는 각 셀의 빈도(행 기준)의 비율만큼 면적을 할당. 로그선형모형(log-linear model)에 대한 적합도 검정(goodness of fit test) 결과 출력 로그선형모형(log-linear model)은 다차원 교차표의 셀 빈도를 예측하기 위한 모형임. 해당 모형에 대한 기술은 본 강의의 범위 벗어나기 때문에 설명을 생략함. mosaicplot() R graphics 패키지(기본 그래픽 패키지)에 내장되어 있는 함수 기본적으로 table 객체(기본적으로 table()을 통해 생성된 객체)를 입력 데이터로 받음 수식 표현을 통해 모자이크 데이터 프레임(또는 리스트), 객체로부터 도출한 테이블로 도표 생성 가능(테이블 객체에도 수식 표현 가능) mosaicplot( x, # 테이블 객체 shade # goodness-of-test 결과 출력 여부 ... ) 또는 mosaicplot( formula, # 수식 표현식 data, # 데이터 프레임, 리스트 또는 테이블 shade ) 예시: 버클리 주립대 대학원 합격자 데이터 Simpson’s paradox를 설명하는 대표적인 예시로 많이 활용되는 데이터 dimnames(UCBAdmissions) $Admit [1] &quot;Admitted&quot; &quot;Rejected&quot; $Gender [1] &quot;Male&quot; &quot;Female&quot; $Dept [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; &quot;E&quot; &quot;F&quot; collapse_admin_tab &lt;- margin.table(UCBAdmissions, margin = c(1,2)) is.table(collapse_admin_tab) [1] TRUE par(mfrow = c(1, 2), mar = c(2, 0, 2, 0)) # figure margin 조정 # bottom, left, top, right mosaicplot(collapse_admin_tab, main = &quot;Student admissions at UC Berkeley&quot;, color = TRUE) mosaicplot(~ Dept + Admit + Gender, data = UCBAdmissions, color = TRUE) 각 학과 별 mosaic 도표(help(UCBAdmissions)의 예시 코드) par(mfrow = c(2, 3), oma = c(0, 0, 2, 0)) for (i in 1:6) { mosaicplot( UCBAdmissions[, , i], xlab = &quot;Admit&quot;, ylab = &quot;Sex&quot;, main = paste(&quot;Department&quot;, LETTERS[i]), color = TRUE ) } mtext( expression(bold(&quot;Student admissions at UC Berkeley&quot;)), outer = TRUE, cex = 1.2 ) "],
["low-level-graphic.html", "5.3 저수준 그래프 함수", " 5.3 저수준 그래프 함수 고수준 그래픽 함수(일반적으로 plot() 함수)를 통해 호출한 그래픽 장치 위에 추가적인 그래프 요소(점, 선, 면, 문자, 범례 등)를 수동으로 추가 그래프의 미학적 효과를 극대화 하기 위해, 최소한으로 그래픽 장치를 호출(공백, 크기, 레이아웃 축 정의) 후 저수준 그래픽 함수를 이용해 그래프 생성 5.2.1 절 plot() 함수에서 확인했던 다양한 그래픽 관련 인수(예: main, xlim, ylim, pch lty, col 등)들을 저수준 그래프 함수에서 사용 가능 명시적으로 포함되지 않은(help() 통해 확인) 인수들은 ...로 표현되고, par() 함수 내 파라미터 값으로 전달 5.3.1 par() 전체 그래픽 장치에 적용되는 여러가지 파라미터를 제어하며, 고수준 및 저수준 그래프의 모양 및 미학적 특성 설정 par() 함수를 통해 그래픽 파라미터 설정 및 조회 가능 # 그래프 파라미터 조회 # 처음 12개 파라미터들에 대해서만 조회 unlist(par()) %&gt;% head(12) xlog ylog adj ann ask &quot;FALSE&quot; &quot;FALSE&quot; &quot;0.5&quot; &quot;TRUE&quot; &quot;FALSE&quot; bg bty cex cex.axis cex.lab &quot;transparent&quot; &quot;o&quot; &quot;1&quot; &quot;1&quot; &quot;1&quot; cex.main cex.sub &quot;1.2&quot; &quot;1&quot; # 파라미터 이름으로 값 추출 par(&quot;mar&quot;) [1] 5.1 4.1 4.1 2.1 par() 함수 조정 파라미터 리스트 Table 5.1: Parameter 값 설명 din, fin, pin = c(width, height) 그래픽 장치(device), figure, plot 영역 크기(너비: width, 높이: height) 조정(인치 단위) fig =c(left, right, bottom, top) 장치 내 figure 영역의 4개 좌표 조정을 통해 figure 위치 및 크기 조정 mai, mar = c(bottom, left, top, right) Figure 영역의 각 4개 마진의 크기 조정(인치 또는 현재 폰트 사이즈 기준 텍스트 길이 단위) mfcol,mfrow = c(row, column) 그래프 화면 출력을 열 또는 행 기준으로 분할 mfg =c(rows, columns) mfcol 또는 mfrow로 분할된 그림에서 figure의 위치 조정 new =TRUE or =FALSE 현재 figure 영역을 새 그래프 장치로 인지(TRUE 이면 이미 출력된 그림 위에 새로운 고수준 그래프 함수가 생성) 여부 oma,omd,omi =c(bottom, left, top, right) Outer margin (여백) 각 영역별 크기 조정(인치 또는 설정 텍스트 크기 기준) R 그래픽 레이아웃(그림 5.2 참조) 조정 파라미터 Figure 5.5: 레이아웃 파라미터. AIMS-R-Users 에서 발췌 아래 par() 함수의 파라미터 값에 대한 도표 생성을 위한 R 스크립트는 Graphical parameters of R graphics package에서 참고 및 발췌 pin 현재 plot의 차원(너비와 높이) 조정 fin Figure 영역의 차원(너비와 높이) fig c(x1, x2, y1, y2) 형태의 숫자형 벡터를 인수로 받아 그래픽 디바이스의 디스플레이 영역에서 figure 영역의 좌표 지정 처음 디폴트 값은 c(0, 1, 0, 1) fig 파라미터 조정의 목적이 여러 개의 그림을 한 화면에 출력하는 것이 목적이라면 par() 파라미터 중 new 의 값을 TRUE로 설정 text_loc &lt;- seq(0, 0.25, by = 0.05) par_name &lt;- c(&quot;mar&quot;, &quot;mai&quot;, &quot;fig&quot;, &quot;fin&quot;, &quot;plt&quot;, &quot;pin&quot;) plot_dim &lt;- function(x, y, op, title, ...) { for (i in 1:length(text_loc)) { text(x, y + text_loc[i], paste0(par_name[i], &quot; = c(&quot;, paste(round(op[[par_name[i]]]), collapse = &quot;, &quot;), &quot;)&quot;), adj = 0, ...) } text(x, y + text_loc[i] + 0.05, title, adj = 0) } # 1. plot area available when internal margins are 0 par(op) par(mai = c(0, 0, 0, 0), xaxs = &#39;i&#39;, yaxs = &#39;i&#39;) plot.new() abline(h = c(0.4, 0.9), v = c(0.4, 0.9), lty = 4) rect(0.4, 0.4, 0.9, 0.9, border = &quot;red&quot;) par(op) # 2. Plot new fig newfig &lt;- c(0.4, 0.9, 0.4, 0.9) par(fig = newfig, new = TRUE) op_reduced &lt;- par(no.readonly = TRUE) set.seed(12345) plot(runif(10), runif(10), typ = &#39;p&#39;, xlab = &#39;X&#39;, ylab = &#39;Y&#39;, xlim = c(0, 1), ylim = c(0, 1)) par(op) par(mai = c(0, 0, 0, 0), xaxs = &#39;i&#39;, yaxs = &#39;i&#39;, new = TRUE) # 3. Info about dimensions plot.new() plot_dim(0.05, 0.5, op_reduced, &quot;New plot dimension on the right&quot;, cex = 0.9) plot_dim(0.5, 0.05, op, &quot;Default plot dimensions&quot;, cex = 0.8) Figure 5.6: fig 인수 조정 예시: Graphical parameters of R graphics package에서 발췌 mar c(bottom, left, top, left) 형태의 수치형 벡터를 값으로 갖음 plot 영역 밖의 여백(figure 영역)을 line 수로 지정(아래 그림 참고) 디폴트 값은 c(5, 4, 4, 2) + 0.1 임 Figure 5.7: Figure 영역에서 기본 여백: Graphical parameters of R graphics package 에서 발췌 mfcol, mfrow c(nrow, ncol) 형태의 2차원 수치형 벡터를 값으로 갖음 앞의 예제에서 확인한 바와 같이 각 행과 열 별로 행 기준 또는 열 기준으로 다중 그래프를 한 화면에 출력 정방형 그래프로 분할하며 c(2, 2)인 경우 텍스트 크기는 cex 값 기준 0.83배 감소 par(oma = c(0, 0, 3, 0), # 윗쪽 여백 크기 조정 mfrow = c(3, 2)) for (i in 1:6) { set.seed(12345) plot(rnorm(20), rnorm(20), main = paste(&quot;Plot&quot;, i)) box(&quot;figure&quot;) } # 윗쪽 여백(side=3)에 텍스트 출력 mtext(side = 3, line = 1, cex = 0.8, col = &quot;blue&quot;, &quot;Muptiple plots with mfrow = c(2, 3)&quot;, outer = TRUE) # outer 여백 사용 여부 par(oma = c(0, 0, 3, 0), mfcol = c(3, 2)) for (i in 1:6) { set.seed(12345) plot(rnorm(20), rnorm(20), main = paste(&quot;Plot&quot;, i)) box(&quot;figure&quot;) } mtext(side = 3, line = 1, cex = 0.8, col = &quot;blue&quot;, &quot;Muptiple plots with mfcol = c(3, 2)&quot;, outer = TRUE) mfg c(i, j) 형태의 숫자형 벡터의 값 mfcol 또는 mfrow 파라미터로 그림 배열이 정해진 상태에서 어떤 그림이 다음에 드려지는지를 지정 c(1,1)은 차원과 상관 없이 맨 처음 출력한 그래프가 생성 df_order &lt;- expand.grid(x = 1:2, y = 1:3) set.seed(123) idx &lt;- sample(2:6, nrow(df_order)-1) df_order &lt;- df_order[c(1,idx), ] par(mfrow = c(2, 3), oma = c(0, 0, 3, 0)) for (i in 0:5) { set.seed(123) par(mfg = as.numeric(df_order[i+1, ])) plot(rnorm(20), rnorm(20), main = paste(&quot;Plot&quot;, i+1)) box(&quot;figure&quot;) } mtext(side = 3, line = 1, cex = 0.8, col = &quot;blue&quot;, &quot;Multiple plots by row: order in mfrow changed by mfg parameter.&quot;, outer = TRUE) mfrow와 mfcol 유사함수: layout(), split.screen() layout(): 행렬 객체를 인수로 받아 화면 분할 # mtcars 데이터셋 graph_array &lt;- matrix(c(1, 1, 2, 3), nrow = 2, byrow = TRUE) par(oma = c(0, 0 , 3, 0)) layout(mat = graph_array) plot(mpg ~ disp, # 데이터 프레임인 경우 수식 표현도 가능 data = mtcars, main = &quot;layout 1&quot;) hist(mtcars$disp, main = &quot;layout 2&quot;) hist(mtcars$mpg, main = &quot;layout 3&quot;) mtext(side = 3, line = 1, cex = 1, col = &quot;blue&quot;, &quot;c(1, 1): scatter plot, c(2) = histogram: dsip, c(3) = histogram: mpg&quot;, outer = TRUE) split.screen(): layout()과 유사하게 그래프의 화면을 분할하고 더 많은 기능을 제공 screen(): 분할된 화면 지정 erase.screen(): 지정된 화면의 그래프 삭제 split.screen(fig = c(2, 2)) # 화면을 2 by 2로 분할 [1] 1 2 3 4 par(oma = c(0, 0, 3, 0)) screen(n = 4) vioplot::vioplot(mpg ~ cyl, data = mtcars, main = &quot;screen n = 4&quot;) screen(n = 1) hist(mtcars$mpg, main = &quot;screen n = 1&quot;) screen(n = 3) plot(mpg ~ wt, data = mtcars, main = &quot;screen n = 3&quot;) screen(n = 2) boxplot(mpg ~ gear, data = mtcars, main = &quot;screen n = 2&quot;) mtext(side = 3, line = 1, cex = 0.8, col = &quot;blue&quot;, &quot;Split using split.screen()&quot;, outer = TRUE) new 논리값(TRUE 또는 FALSE) 지정 디폴트 값은 FALSE 새로운 그래프를 이미 존재하는 그래프 장치에 출력 # boxplot + violin plot ## iris 데이터 셋 par(bty = &quot;n&quot;) # x-y 축 스타일 지정 boxplot(Sepal.Length ~ Species, data = iris) new_fig &lt;- c(0.05, 0.46, 0.4, 0.99) par(new = TRUE, fig = new_fig) vioplot::vioplot(Sepal.Length ~ Species, data = iris, col = &quot;skyblue&quot;, yaxt = &quot;s&quot;, ann = FALSE) oma c(bottom, left, top, right) 형태의 숫자형 벡터 값 사용 Outer 여백의 크기 조정(텍스트 라인 기준) 아래 예시는 oma = c(2, 3, 3, 1) 인 경우 여백 표시 Figure 5.8: Outer 여백 조정 파라미터(mar = c(2, 3, 3, 1)) Graphical parameters of R graphics package에서 발췌 5.3.2 points() 점을 그리는 저수준 그래프 함수로 이미 출력된 x-y 좌표 위에 지정한 점 문자 출력 x-y 좌표 지정은 plot() 함수와 동일 많이 사용되는 점 문자 기호(symbol)은 그림 5.4 참고 # cars 데이터셋 par(mfrow = c(1, 2)) plot(dist ~ speed, data = cars, type = &quot;n&quot;, bty = &quot;n&quot;, main = &quot;points() function example 1: cars dataset&quot;) points(cars$speed, cars$dist, pch = 16, col = &quot;darkgreen&quot;, cex = 1.5) shapes &lt;- 15:17 # pch 지정 plot(Petal.Length ~ Sepal.Length, data = iris, type = &quot;n&quot;, bty = &quot;n&quot;, main = &quot;points() function example 2: iris dataset&quot;) points(iris$Sepal.Length, iris$Petal.Length, pch = shapes[as.numeric(iris$Species)], # 각 Species에 대해 shapes 할당 col = as.numeric(iris$Species), cex = 1.5) 5.3.3 lines() x-y 좌표의 점을 이어 선을 만드는 함수 plot() 함수에서 type 인수에 “l”을 사용한 것과 유사 선의 모양(lty)과 굵기(lwd)를 지정할 수 있으며 그림 5.3와 그림 5.9를 참고 Figure 5.9: 선 두께(lwd) 파라미터: Graphical parameters of R graphics package 에서 발췌 line() 함수 사용 예시: 정규분포 분포 그리기 # 정규분포 평균=0, 분산=1 # 정규분포 평균=0, 분산=2 # 정규분포 평균=0, 분산=3 par(mar = c(3, 0, 3, 0)) x &lt;- seq(-5, 5, 0.01) y &lt;- mapply(dnorm, list(x, x, x), c(0, 0, 0), c(1, sqrt(2), sqrt(3))) plot(x, y[,1], type = &quot;n&quot;, bty = &quot;n&quot;, yaxt = &quot;n&quot;, ann = FALSE, xlim = c(-5, 5)) lines(c(0, 0), c(0, max(y[,1])), lty = 2, col = &quot;lightgray&quot;) lines(x, y[,1], lty = 1, lwd = 2, col = &quot;black&quot;) lines(c(0.3, 2), rep(max(y[,1]), 2), lty = 1, col = &quot;gray&quot;) text(2.1, max(y[,1]), expression(paste(mu == 0, &quot;,&quot; ~~ sigma == 1)), # 수식 표현 adj = 0) lines(x, y[,2], lty = 2, lwd = 2, col = &quot;blue&quot;) lines(c(0.3, 2), rep(max(y[, 2]), 2), lty = 1, col = &quot;gray&quot;) text(2.1, max(y[,2]), expression(paste(mu == 0, &quot;,&quot; ~~ sigma == 2)), # 수식 표현 adj = 0) lines(x, y[,3], lty = 3, lwd = 2, col = &quot;green&quot;) lines(c(0.3, 2), rep(max(y[,3]), 2), lty = 1, col = &quot;gray&quot;) text(2.1, max(y[,3]), expression(paste(mu == 0, &quot;,&quot; ~~ sigma == 3)), # 수식 표현 adj = 0) mtext(&quot;Normal distribution&quot;, side = 3, adj = 0.2, cex = 2) 5.3.4 ablines() x-y 좌표에 직선을 그리는 함수로 lines() 함수와 유사하나 y 절편과 x 기울기, 또는 x 절편(y 축과 평행한 직선, (x, 0))과 y 절편(x축과 평행한 직선, (0, y))을 이용해 직선을 그릴 수 있음 a: y 절편 b: x 기울기 h: x축과 수평선(y 값) v: x축과 수직선(y축과 수평선, x 값) # 회귀직선과 x, y의 평균선, 회귀직선으로부터 각 점 까지 거리를 직선 표시 ## mtcars 데이터 plot(mpg ~ hp, data = mtcars, type = &quot;n&quot;, bty = &quot;n&quot;, xlim = c(50, 350), ylim = c(5, 40), main = &quot;abline() examples with mtcars dataset&quot;, xlab = &quot;Horse power&quot;, ylab = &quot;Miles/gallon&quot;, cex.main = 1.5) m &lt;- lm(mpg ~ hp, data = mtcars) # 일변량 회귀모형 yhat &lt;- predict(m) # 회귀모형의 예측값 # 회귀직선으로부터 각 관측점 까지 거리(오차) 직선 표시 함수 dist_error &lt;- function(i) { lines(c(mtcars$hp[i], mtcars$hp[i]), c(mtcars$mpg[i], yhat[i]), col = &quot;green&quot;, lwd = 0.8, lty = 1) } for (i in 1:nrow(mtcars)) dist_error(i) with(mtcars, points(hp, mpg, pch = 16, cex = 1)) abline(m, lty = 1, lwd = 3, col = &quot;red&quot;) abline(h = mean(mtcars$mpg), lty = 2, col = &quot;darkgray&quot;) # mpg 평균 abline(v = mean(mtcars$hp), lty = 2, col = &quot;darkgray&quot;) # hp 평균 text(mean(mtcars$hp), 40, # text 수식 표현 참고 bquote(paste(bar(x) == .(sprintf(&quot;%.1f&quot;, mean(mtcars$hp))))), adj = 0, pos = 4) text(350, mean(mtcars$mpg), bquote(paste(bar(x) == .(sprintf(&quot;%.1f&quot;, mean(mtcars$mpg))))), pos = 3) Figure 5.10: abline(), lines() 함수를 이용한 회귀직선 및 오차 거리 표시 예제 5.3.5 arrows() 화살표를 그리는 함수 x0, y0, x1, y1 형태의 숫자를 값으로 사용 (x0, y0): 시작점 좌표 (x1, y1): 끝점 좌표 angle, length, code 인수 조정을 통해 화살표 스타일 지정 par(mar = rep(0, 4)) plot(1, 1, type = &#39;n&#39;, axes = FALSE, ann = FALSE, xaxs = &#39;i&#39;, yaxs = &#39;i&#39;, xlim = c(0,11), ylim = c(0,11)) text(5.5, 10.5, &quot;Type of arrows by values of angle, length, and codes&quot;, font = 2, # 2=bold, 3=italic, 4=bold italic adj = c(0.5, 0), cex = 1.5) angle_val &lt;- c(60, 90, 120) length_val &lt;- c(0.25, 0.1, 0.5) code_val &lt;- c(0, 1, 3) for (i in 1:3) { arrows(1, 9-i+1, 5, 9-i+1, length = length_val[i]) text(6, 9-i+1, pos = 4, sprintf(&quot;angle = 30, length = %.2f, code = 2&quot;, length_val[i])) } for (i in 1:3) { arrows(1, 6-i+1, 5, 6-i+1, length = 0.25, angle = angle_val[i]) text(6, 6-i+1, pos = 4, sprintf(&quot;angle = %d, length = 0.25, code = 2&quot;, angle_val[i])) } for (i in 1:3) { arrows(1, 3-i+1, 5, 3-i+1, length = 0.25, angle = 30, code = code_val[i]) text(6, 3-i+1, pos = 4, sprintf(&quot;angle = 30, length = 0.25, code = %d&quot;, code_val[i])) } Figure 5.11: arrows() 함수 주요 파라미터 변경에 따른 화살표 출력 결과 5.3.6 rect() x-y 좌표 위에 사각형을 그리는 함수 xleft: 사각형의 왼쪽 x 좌표 ybottom: 사각형의 아래쪽 y 좌표 xright: 사각형의 오른쪽 x 좌표 ytop: 사각형의 위쪽 y 좌표 # 길이와 높이가 5인 정사각형 그리기 plot(x = 1:10, y = 1:10, type = &quot;n&quot;, xlab = &quot;&quot;, ylab = &quot;&quot;, main = &quot;Rectangle coordinates used in rect()&quot;) rect(3, 3, 8, 8, density = 10, # 사각형 내부를 선으로 채움 angle = 315) # 내부 선의 기울기 각도(degree) text(3, 3, &quot;(xleft = 3, ybottom = 3)&quot;, adj = 0.5, pos = 1) text(8, 3, &quot;(xright = 8, ybottom = 3)&quot;, adj = 0.5, pos = 1) text(8, 8, &quot;(xright = 8, ytop = 8)&quot;, adj = 0.5, pos = 3) text(3, 8, &quot;(xleft = 3, ytop = 8)&quot;, adj = 0.5, pos = 3) grid() Figure 5.12: rect() 좌표 인수 5.3.7 polygon() x-y 좌표의 점을 연결해 폐 다각형을 만드는 함수 좌표 지정 방법은 plot() 함수와 동일 # polygon() 사용 예시 plot(x = 0:10, y = 0:10, type = &quot;n&quot;, bty = &quot;n&quot;, xaxt = &quot;n&quot;, yaxt = &quot;n&quot;, xlab = &quot;&quot;, ylab = &quot;&quot;, main = &quot;Polygon examples&quot;) # Pentagon theta1 &lt;- seq(-pi, pi, length = 6) x &lt;- cos(theta1 + 0.5*pi) # cosine 함수 y &lt;- sin(theta1 + 0.5*pi) x1 &lt;- 2*x + 2; y1 &lt;- -2*y + 7 polygon(x1, y1) text(2, 9.2, &quot;Pentagon&quot;, adj = 0.5, pos = 3, cex = 1.5) # Octagon theta2 &lt;- seq(-pi, pi, length = 9) x &lt;- cos(theta2) # cosine 함수 y &lt;- sin(theta2) x2 &lt;- 2*x + 7; y2 &lt;- -2*y + 7 polygon(x2, y2, col = &quot;#05B8FF&quot;, bolder = &quot;black&quot;, lwd = 4) Warning in polygon(x2, y2, col = &quot;#05B8FF&quot;, bolder = &quot;black&quot;, lwd = 4): &quot;bolder&quot;는 그래픽 매개변수가 아닙니다 text(7, 9.2, &quot;Octagon&quot;, adj = 0.5, pos = 3, cex = 1.5) # 별표시 x2 &lt;- c(2, 4/3, 0, 2/3, 0, 4/3, 2, 8/3, 4, 10/3, 4, 8/3) y2 &lt;- c(4, 3.0, 3, 2.0, 1, 1.0, 0, 1.0, 1, 2.0, 3, 3.0) polygon(x2, y2, density = 20, angle = 135, lty = 1, lwd = 2) text(2, 4.1, &quot;Star (Jewish)&quot;, adj = 0.5, pos = 3, cex = 1.5) # Triangle (perpendicular) x3 &lt;- c(5, 9, 5) y3 &lt;- c(0, 0, 4) polygon(x3, y3, lwd = 3, col = &quot;gray&quot;) x4 &lt;- c(5, 5.3, 5.3, 5) y4 &lt;- c(0, 0.0, 0.3, 0.3) polygon(x4, y4, lwd = 3) # 직각표시 text(7, 4.1, &quot;Triangle (perpendicular)&quot;, adj = 0.5, pos = 3, cex = 1.5) 확률분포 아래 면적 표시 \\(Z ~ \\stackrel{i.i.d}{\\sim} N(0, 1)\\) 라고 할 때 \\(P(-1.5 &lt; Z &lt; 0.7)\\)에 해당하는 부분 표시 # 표준정규분포 곡선 하 면적 표시 x &lt;- seq(-3, 3, by = 0.01) z &lt;- dnorm(x) plot(x, z, type = &quot;n&quot;, bty = &quot;n&quot;, xlab = expression(bold(Z)), ylab = &quot;Density&quot;, main = &quot;Standard normal distribution&quot;) idx &lt;- x &gt; -1.5 &amp; x &lt; 0.7 # 해당 구간 index 설정 polygon(c(-1.5, x[idx], 0.7), c(0, z[idx], 0), col = &quot;green&quot;, border = &quot;green&quot;) lines(x, z, lty = 1, lwd = 2) text(x = 0.5, y = 0.15, bquote(P({-1.5 &lt; Z} &lt; 0.7 ) == .(sprintf(&quot;%.3f&quot;, pnorm(0.7) - pnorm(-1.5)))), # pnorm = P(Z &lt;= c), 평균=0, 분산=1 인 경우 adj = 1) Figure 5.13: polygon()을 이용한 확률밀도함수 곡선 아래 면적 표시 예시 5.3.8 text(), mtext() text(): x-y 좌표에 문자열을 입력하는 함수 text(x, # x-좌표값 y, # y-좌표값 label, # 입력할 텍스트 문자열 adj, # 원점 좌표를 기준으로 텍스트 문자열 자리 맞춤 # 0 - 1 사이 값은 수평 맞추기 지정 # 0=오른쪽, 0.5=가운데 정렬, 1=왼쪽 정렬 (원점 기준) pos, # adj를 단순화하여 텍스트 자리 맞춤 # 1=bottom, 2=left, 3=top, 4=right, srt # 문자열 회전(in degree) ... ) Figure 5.14: text() 함수에서 adj 파라미터 값에 따른 텍스트 위치: AIMS-R-users 에서 발췌 Figure 5.15: text() 함수에서 pos 파라미터 값에 따른 텍스트 위치: AIMS-R-users 에서 발췌 Figure 5.16: text() 함수에서 srt 파라미터 값에 따른 텍스트 위치: AIMS-R-users 에서 발췌 mtext(): plot 여백 또는 outer 여백 상에 문자를 출력하는 함수 mtext( text, # 입력할 텍스트 문자열 side, # 텍스트 문자열이 출력되는 여백 지정 # 1=bottom, 2=left, 3=top, 4=right line, # 지정 여백에서 텍스트 출력 위치 지정 outer, # outer 여백 사용 여부 at, # line 내에서 텍스트 열 위치(좌표축 기준) 지정 adj, # text() 함수의 adj 파라미터와 동일 ... ) par(mar = c(4, 4, 4, 4), oma = c(4, 0, 0, 0)) set.seed(1345) plot(rnorm(20), type = &quot;o&quot;, xlab = &quot;&quot;, ylab = &quot;&quot;) # side = 3 (top), line=0, 1, 2, 3 변경 for (i in 0:4) { mtext(paste(&quot;Side = 3, line =&quot;, i), side = 3, line = i) } # side = 3 (top), outer 여백 사용, line=0, 1, 2, 3 변경 for (i in 0:4) { mtext(paste(&quot;Side = 1, outer = TRUE, line =&quot;, i), side = 1, line = i, outer = TRUE) } # adj 인수 조정 adj_par &lt;- c(0, 0.5, 1) for (i in 1:3) { mtext(sprintf(&quot;Side = 1, line = %d, adj = %.1f&quot;, i, adj_par[i]), side = 1, line = i, adj = adj_par[i]) } # side = 2 (left) for (i in 1:3) { mtext(sprintf(&quot;Side = 2, line = %d, adj = %.1f&quot;, i, adj_par[i]), side = 2, line = i, adj = adj_par[i]) } # side = 4 (right), at 조정 at_val &lt;- c(-1, 0, 1) for (i in 1:3) { mtext(sprintf(&quot;Side = 4, line = %d, at = %.1f&quot;, i, adj_par[i]), side = 4, line = i, at = at_val[i]) } mtext(&quot;mtext parameter check&quot;, col = &quot;blue&quot;, cex = 0.8, line = 0, adj = 0) 5.3.9 legend() 범례(legend)를 생성하는 함수로 그래프에 표시된 점, 선, 또는 색에 해당되는 정보를 설명하기 위해 이용 legend() 함수에서 범례 위치 지정 방법 x-y 좌표 이용 위치를 나타내는 문자 이용: bottomright, right, topright, top, topleft, left, bottomleft, bottom plot(Petal.Length ~ Sepal.Length, data = iris, type = &quot;n&quot;, bty = &quot;n&quot;, main = &quot;points() function example 2: iris dataset&quot;) points(iris$Sepal.Length, iris$Petal.Length, pch = shapes[as.numeric(iris$Species)], # 각 Species에 대해 shapes 할당 col = as.numeric(iris$Species), cex = 1.5) legend(&quot;bottomright&quot;, legend = unique(iris$Species), pch = 15:17, col = 1:3) legend(4.5, 6, legend = unique(iris$Species), pch = 15:17, col = 1:3) legend(&quot;top&quot;, legend = unique(iris$Species), pch = 15:17, col = 1:3, pt.cex = 3, # legend 점 크기 조정 ncol = 3) # # legend 영역 열 개수 지정 5.3.10 수식 표현 그래프 상 수식은 expression(), bquote(), substitute() 함수로 표현 가능 TeX1과 유사한 수식 형태를 표현하기 위해 복잡한 표현식들이 사용됨 \\(\\rightarrow\\) 아래 표 참고(demo(plotmath)를 통해 동일한 표 출력 가능) Figure 5.17: R expression() 함수 내 수식 표현 방법 Greek letters Figure 5.18: R 그리스 문자 표현 expression(): 문자 TeX 형태와 유사한 기호 및 표현을 이용해 수식 표현 bquote(): .() 안에 있는 표현을 먼저 평가 한 후 그 값을 변환해 수식 표현식 안에 들어가는 값으로 사용 \\(\\rightarrow\\) 그림 5.10, 그림 5.13 예시 및 스크립트 참고 두 함수 모두 paste() 함수와 같이 사용 하는 것이 일반적인 수식과 문자 표현 방법임. # 수식 표현 예시 expression() + paste() par(cex = 1.5 , cex.lab = 1.2) set.seed(202005) x &lt;- rnorm(10, 25, 3) y &lt;- rnorm(10, 25, 3) plot(x, y, type = &quot;p&quot;, axes = TRUE, ann = FALSE, bty = &quot;n&quot;) mtext(expression(paste(&quot;Temperature&quot;, ~(degree*C))), side = 1, line = 3, cex = 1.5) mtext(expression(paste(&quot;Respiration&quot;, ~(mL ~O[2] ~ h^-1))), side = 2, line = 3, cex = 1.5) par(cex = 1.5) plot(0:6, 0:6, type = &quot;n&quot;, bty = &quot;o&quot;, xaxt = &quot;n&quot;, yaxt = &quot;n&quot;, ann = FALSE) text(0.3, 5.8, &quot;Normal distribution:&quot;, adj = 0) text(0.3, 4.8, expression(paste(f, &quot;(&quot;, x, &quot;;&quot;, list(mu, sigma), &quot;)&quot; == frac(1, sigma*sqrt(2*pi))*~~exp * bgroup(&#39;(&#39;, -frac((x-mu)^2, 2*sigma^2), &#39;)&#39;) )), adj = 0) text(4, 5.8, &quot;Binomial distribution:&quot;, adj = 0) text(4, 4.8, expression(paste(f, &quot;(&quot;, x, &quot;;&quot;, list(n, p), &quot;)&quot; == bgroup(&quot;(&quot;, atop(n, x) ,&quot;)&quot;) *p^x*(1-p)^{n-x})), adj = 0) text(0.3, 3.5, &quot;Matrix:&quot;, adj = 0) text(0.3, 2.5, expression(bold(X) == bgroup(&quot;[&quot;, atop(1 ~~ 2 ~~ 3, 4 ~~ 5 ~~ 6), &quot;]&quot;)), adj = 0) text(2, 3.5, &quot;Multiple regression formula:&quot;, adj = 0) text(2, 2.5, expression(paste(y[i] == beta[0] + beta[1]*x[1] + beta[2]*x[2] + epsilon[i]~~ &quot;where&quot;, ~~i == list(1, ldots, n))), adj = 0) text(2, 1.5, &quot;Regression equation:&quot;, adj = 0) text(2, 0.5, expression(hat(bold(beta)) == bgroup(&quot;(&quot;, bold(X)^T*bold(X), &quot;)&quot;)^-1*bold(X)^T*bold(y)), adj = 0) Figure 5.19: R 그래픽 수식 표현 예시 5.3.11 R 기본 그래프 이미지 파일로 저장 5.1 절 R 기본 그래프 함수에서 언급한 그래픽 파일에 해당하는 함수로 그래픽 장치를 먼저 연 다음 그래프 생성 후 저장 # save-example.png에 cars 산점도 저장 png(&quot;figures/save-example.png&quot;) plot(cars) dev.off() pdf 2 도널드 커누스가 만든 문서 조판 프로그램으로, 수학, 통계학, 물리학 등 자연과학 및 공학 분야에서 논문, 책자, 슬라이드 등 다양한 형태의 문서 작성을 위해 사용됨. 특히 수식 표현에 있어 다른 워드 프로세서와 비교할 수 없을 정도로 강력하며, 구조적 문서 작성을 강제함.↩ "],
["ggplot2-package.html", "5.4 ggplot2", " 5.4 ggplot2 Prerequisites: tidyverse 패키지 또는 ggplot2 패키지 읽어오기: require(tidyverse) 또는 require(ggplot2) 실행 데이터에 대한 그래프는 데이터의 속성(수치형, 범주형)과 시각적 속성(점, x-y 좌표 위치, 선, 색상, 막대의 높이) 간에 대응 또는 매핑(mapping) 으로 이루어짐 R 에서 가장 유명한 데이터 시각화 패키지 중 하나로 2005년 Hadley Wickham이 개발 및 배포 Leland Wilkinson 의 grammar of graphics (Wilkinson 2012) 를 구현 Grammar of graphics: 그래프를 구현하기 위한 일관적인 체계로 그래프를 데이터, 스케일, 레이어, 좌표 등과 같은 의미론적 요소(sementic components) 로 나눔 ggplot의 grammar of graphics Figure 5.20: ggplot의 grammar of graphics 주요 구성 요소 R 기본 graphics 패키지의 경우 데이터 속성을 시각적 속성으로 매핑 시 매 경우가 고유한 작업이고, 매핑이 변경될 경우 데이터를 재구성하거나 완전히 다른 plotting 함수를 적용해야 함. R base graphics와 ggplot의 비교 # R 기본 데이터셋: ToothGrowth ToothGrowth %&gt;% group_by(supp, dose) %&gt;% summarise(mean = mean(len)) %&gt;% mutate(dose = factor(dose, ordered = TRUE))-&gt; tg_long `summarise()` regrouping output by &#39;supp&#39; (override with `.groups` argument) tg_long %&gt;% spread(supp, mean) %&gt;% column_to_rownames(&quot;dose&quot;) %&gt;% # 열 값을 열이름으로 변환(in tibble 패키지) as.matrix -&gt; tg_mat # R graphics: barplot() 사용 barplot(tg_mat, beside = TRUE) Figure 5.21: R 기본 barplot() 생성 그래프 dose 별 OJ와 VC 막대도표: dose로 그룹화를 하기 위해 데이터 구조 변경(전치) 필요 # tg_mat 행렬 전치 barplot(t(tg_mat), beside = TRUE) Figure 5.22: R 기본 barplot() 생성 그래프: 데이터 전치 막대 대신 선(line)으로 표현 plot(tg_mat[,1], type=&quot;l&quot;, col = &quot;blue&quot;) lines(tg_mat[,2], type=&quot;l&quot;, col = &quot;black&quot;) Figure 5.23: R 기본 선 그래프: plot(), lines() 함수 사용 plot() 함수 호출 시 y 축 범위가 첫 번째 선에 대해서만 설정 x 축이 범주 대신 번호가 사용 ggplot 사용: 데이터 프레임에만 적용 가능(데이터 구조는 long-format) # require(ggplot2) ggplot(data = tg_long, aes(y = mean)) -&gt; gmap # 기본 mapping 유지를 위해 # ggplot 클래스 객체 저장 gmap + geom_bar(aes(x = supp, fill = dose), stat = &quot;identity&quot;, # 데이터 고유값을 막대 높이로 사용 position = &quot;dodge&quot;) # 막대 위치 조정(beside 조건과 유사) Figure 5.24: ggplot()과 geom_bar()을 이용한 막대 도표 데이터 구조를 변경하지 않고 ggplot의 매핑 변수 변경 gmap + geom_bar(aes(x = dose, fill = supp), stat = &quot;identity&quot;, position = &quot;dodge&quot;) Figure 5.25: x와 fill의 mapping 변경 ggplot을 이용한 선 도표 생성 gmap + geom_line(aes(x = dose, group = supp, color = supp), size = 1) Figure 5.26: geom_line()을 이용한 선 그래프 생성 기본 그래프 함수를 이용해 막대도표 대신 선 도표 생성 시 완전히 다른 명령 사용 선 그래프 생성 시 기본 그래프는 하나씩 도표를 추가한 반면, geom_line()의 경우 모든 선이 한번에 그려짐 5.4.1 기본 문법 ggplot(data = &lt;DATA&gt;) + &lt;GEOM_FUNCTION&gt;(mapping = aes(&lt;MAPPINGS&gt;)) + &lt;SCALE_FUNCTION&gt; + &lt;LABEL or GUIDES&gt; + &lt;ANNOTATION&gt; + &lt;THEME&gt; 용어(terminology) data: 시각화의 대상으로 관측값과 변수(열)로 이루어짐 geom: 데이터의 값을 시각적으로 보여주기 위한 레이어로 막대, 선, 점과 같은 기하학적 객체 aesthetic: geom의 시각적 속성을 정의하며, x, y 위치, 선 색상, 점 모양 등을 정의 mapping: 데이터 값을 asthetic에 매핑 scale: asthetic에 매핑 시 세부 값들을 제어 guide: 그래프 해석에 도움을 주는 속성으로 x-y 축의 눈금, 레이블, 범례(legend)를 포함 annotation: 생성한 그래프 위에 추가적인 정보(선, 화살표, 텍스트, 도형 등) 추가 theme: 그래프의 비데이터적 요소(제목, 레이블, 글꼴, 배경색, 격자, 범례 등) 제어를 통해 그래프의 미적 효과 극대화 ggplot 계열 함수에서 범주형 변수(categorical variable)은 이산형(discrete), 수치형 변수(numeric variable)을 연속형(continuous)이라고 명칭함. ggplot 그래프 생성 기본 단계(각 단계(layer)는 + 연산자로 덧붙혀짐) ggplot()으로 ggplot 객체 초기화 aes() 함수로 x-y 축 지정 geom 계열 함수로 데이터를 시각적 요소로 매핑. 이때 aes() 함수와 같이 색상, 크기 등 지정 scale 계열 함수를 이용해 asthetic의 세부 값을 조정 축 제목, 레이블, 범례 설정 조정 필요 시 theme 조정을 통해 시각적 요소 가미 ggplot(): ggplot 객체를 생성하는 함수로 시각화할 데이터가 무엇인지, 그리고 데이터에 포함된 변수들이 어떤 asthetic에 매핑되는지를 선언 aes(): 데이터 내 변수들이 어떤 geoms 레이어에서 어떤 시각적 속성을 갖는지를 지정해주는 함수로 ggplot() 함수 내, 혹은 독립적인 레이어로 추가 가능 ggplot에서 지정한 데이터 내에서 평가되기 때문에 변수명 지정 시 원래 데이터셋 참조할 필요 없음(예: ggplot(data = car, aes(x = speed))) # ggplot()을 이용한 ggplot 생성 # 표현식 1 ggplot(data = &lt;DATA&gt;, # 데이터 프레임, 티블 객체 mapping = aes(x = &lt;X-axis&gt;, y = &lt;Y-axis&gt;, color = &lt;색 속성을 부여할 변수 이름&gt;, fill = &lt;면의 색 속성을 부여할 변수 이름&gt;, group = &lt;group 변수 지정&gt; # 보통 선 그래프 작성 시 이을 선에 대한 # 그룹을 지정하기 위해 사용 group ...)) + &lt;GEOM_FUNCTION&gt; # 표현식 2 ggplot(data = &lt;DATA&gt;) + aes(...) + &lt;GEOM_FUNCTION&gt;(mapping = aes(...)) # 표현식 3 ggplot(data = &lt;DATA&gt;) + &lt;GEOM_FUNCTION&gt;(mapping = aes(x, y, ...)) # 표현식 4 &lt;GGPLOT_OBJECT&gt; &lt;- ggplot(data = &lt;DATA&gt;) &lt;GGPLOT_OBJECT&gt; + &lt;GEOM_FUNCTION&gt;(mapping = aes(...)) # cars 데이터셋 ## ggplot() 내에 aes() 지정 ggplot(data = cars, aes(x = speed, y = dist)) + geom_point() ## aesthetic을 ggplot() 함수 밖에서 지정 ggplot(data = cars) + aes(x = speed, y = dist) + geom_point() ## geom 계열 함수 내에서 asthetic 지정 ggplot(data = cars) + geom_point(aes(x = speed, y = dist)) ## ggplot 객체 생성 gp &lt;- ggplot(data = cars); gp gp &lt;- gp + aes(x = speed, y = dist); gp gp + geom_point() ## 참고: R 기본 plot()의 결과는 객체로 저장되지 않음 grph &lt;- plot(cars); grph 주요 aesthetics x, y: x-y 축에 해당하는 변수명. x와 y의 이름은 생략 가능(예: ggplot(data = car, aes(speed, dist)로도 사용 가능)) color: 점, 선, 텍스트 색상 fill: 면(막대, 상자, 도형 등) 색상 alpha: 색상의 투명도 group: 시각화에 사용할 데이터의 그룹 size: 점, 선, 텍스트의 크기 또는 굵기 shape: 점의 모양(그림 5.4 참고). R 기본 그래픽 파라미터 pch와 호환 linetype: 선의 형태 지정하며 그림 5.4 의 선 형태 지정 방법 준용(숫자, 문자열 모두 사용 가능) 색상 관련 aesthetics: color, fill, alpha aes() 함수 내부 또는 외부에서 인수 조정 가능(함수 내부: 변수명으로 지정, 함수 외부: 특정 값으로 지정) # 막대도표 예시 # `aes()` 함수 외부에서 사용 시 단일 값을 입력 gpcol &lt;- ggplot(data = mpg, aes(x = class)) gpcol + geom_bar() + labs(title = &quot;Default geom_bar()&quot;) # 그래프 제목 지정 gpcol + geom_bar(fill = &quot;navy&quot;) + labs(title = &quot;fill = &#39;navy&#39;&quot;) # 막대도표 예시 gpcol + geom_bar(color = &quot;red&quot;) + labs(title = &quot;color = &#39;red&#39;&quot;) gpcol + geom_bar(color = &quot;red&quot;, fill = &quot;white&quot;)+ labs(title = &quot;color = &#39;red&#39;, fill = &#39;white&#39;&quot;) # 연료 타입에 따라 면 색 지정 gpcol + geom_bar(aes(fill = fl)) + labs(title = &quot;Filled by fuel types (fl)&quot;) # 연료 타입에 따라 막대 선 색 지정 gpcol + geom_bar(aes(color = fl)) + labs(title = &quot;Colored by fuel types (fl)&quot;) # alpha: 0-1 사이 값을 갖고 투명도 지정 # 주로 aes() 함수 밖에서 사용됨 set.seed(20200605) df1 &lt;- tibble( x = rnorm(5000), y = rnorm(5000) ) gpalpha &lt;- ggplot(data = df1, aes(x, y)) gpalpha + geom_point() + labs(title = &quot;alpha = 1&quot;) gpalpha + geom_point(alpha = 0.1) + labs(title = &quot;alpha = 0.1&quot;) 그룹(group) aesthetic 기본적으로 aes() 내부에서 aesthetic에 대응하는 변수가 이산형(범주형) 변수로 정해짐 보통은 color, shape, linetype 으로 그룹 지정이 가능하지만 충분하지 않은 경우 group 인수 값 지정 # 다중 집단에 하나의 aesthetic만 적용한 경우 ## gapminder 데이터셋 gapm &lt;- read_csv(&quot;dataset/gapminder/gapminder_filter.csv&quot;) gapm_filter &lt;- gapm %&gt;% filter(grepl(&quot;Asia&quot;, region)) gpgroup &lt;- ggplot(data = gapm_filter, aes(x = year, y = life_expectancy)) gpgroup + geom_line(size = 0.5, alpha = 0.2) gpgroup_l &lt;- gpgroup + geom_line(aes(group = country), size = 0.5, alpha = 0.2) gpgroup_l # 전체 아시아 국가의 평균 추세선 ## geom_line과 geom_smooth 모두 group을 country로 지정 gpgroup_l + geom_smooth(aes(group = country), method = &quot;loess&quot;, size = 0.5, color = &quot;blue&quot;, se = FALSE) ## 모든 국가에 가장 적합한 하나의 곡선으로 fitting gpgroup_l + geom_smooth(aes(group = 1), method = &quot;loess&quot;, size = 1, color = &quot;blue&quot;, se = FALSE) 크기(size), 점 모양(shape), 선모양(linetype) aesthetic # size 지정 gpsize &lt;- ggplot(data = mtcars, aes(disp, mpg)) gpsize + geom_point(size = 4) gpsize + geom_point(aes(size = hp), alpha = 0.5) gpshape &lt;- ggplot(data = mtcars, aes(hp, mpg)) gpshape + geom_point(shape = 5) # # 실린더 개수에 따라 점 모양 지정 gpshape + geom_point(aes(shape = factor(cyl)), size = 4) ## pch를 인수로 사용해도 동일한 그래프 출력 # gpshape + # geom_point(aes(pch = factor(cyl)), # size = 4) # linetype 지정 ## economics_long 데이터셋 gplty &lt;- ggplot(data = economics_long, aes(x = date, y = value01)) gplty + geom_line(aes(group = variable, color = variable), size = 0.5, linetype = 6) # 실린더 개수에 따라 점 모양 지정 gplty + geom_line(aes(linetype = variable, color = variable), size = 0.5) 5.4.2 Geoms: 선 관련 geometric geom_line(): x축에 대응한 변수의 순서대로 관측값을 선으로 연결 geom_path(): 관측치가 데이터셋에 나타난 순서대로 선으로 연결 geom_abline(slope, intercept): 기울기(slope) 절편(intercept)에 대한 직선 \\(\\rightarrow\\) R 기본 그래픽 함수 abline(a=value, b=value)와 유사 geom_vline(xintercept): x축에 수직(y 축에 수평)인 직선 생성 geom_hline(yintecept): x축에 수평(y 축에 수직)인 직선 생성 # gap-minder 데이터 gpline &lt;- ggplot(data = gapm_filter, aes(y = gdp_cap)) # geom_line gpline + geom_line(aes(x = year, group = country), size = 0.5, alpha = 0.3, linetype = &quot;solid&quot;) -&gt; gpline gpline # geom_path highlight_country &lt;- c(&quot;South Korea&quot;, &quot;China&quot;, &quot;Japan&quot;, &quot;India&quot;, &quot;Taiwan&quot;, &quot;Singapore&quot;) # dplyr 패키지 체인과 ggplot 함수 연결 가능 gppath &lt;- gapm %&gt;% filter(year &gt;= 2000, country %in% highlight_country) %&gt;% ggplot(aes(x = gdp_cap, y = life_expectancy)) gppath + geom_path(aes(group = country)) # 선 굵기 및 색상 조정 gppath + geom_path(aes(color = country), size = 4, alpha = 0.5) -&gt; gppath # 선과 점 동시에 출력 gppath + geom_point(aes(shape = country), size = 2) # geom_abline, geom_hline, geom_vline ## abline m &lt;- lm(gdp_cap ~ year, data = gapm_filter) gpline + geom_abline(slope = coef(m)[2], intercept = coef(m)[1], size = 2, color = &quot;blue&quot;) -&gt; gplines gplines ## hline gplines + geom_hline(yintercept = mean(gapm_filter$gdp_cap, na.rm = TRUE), color = &quot;red&quot;, size = 1) -&gt; gplines gplines + ggtitle(&quot;Addling a horizontal line: mean of gdp_cap&quot;) ## vline gplines + geom_vline(xintercept = mean(gapm_filter$year, na.rm = TRUE), color = &quot;red&quot;, size = 1) + ggtitle(&quot;Adding a vertical line: mean of year&quot;) 5.4.3 Geoms: 점 geometrics geom_point(): ggplot 객체에 지정된 aesthetic (x-y에 대응하는 변수)에 대한 산점도를 생성 geom_jitter(): 각 점의 위치에 random noise를 추가해 overplotting 처리 \\(\\rightarrow\\) geom_point(position = \"jitter\")의 축약 버전 # geom_point ## 갭마인더 데이터: 2015년 기대수명 vs. 일인당 국민소득 산점도 gppoint &lt;- gapm %&gt;% mutate(continent = gsub(&quot;(.+\\\\s)&quot;, &quot;&quot;, region) %&gt;% # region 변수에서 공백 앞 문자 모두 제거 factor) %&gt;% filter(year == 2015) %&gt;% ggplot(aes(x = life_expectancy, y = gdp_cap)) gppoint + geom_point(size = 1) ## 점의 크기는 해당 국가 인구수(log10 변환) 에 비례 ## 각 대륙에 따라 색 구분 ## 투명도는 0.3 ## --&gt; Bubble plot gppoint + geom_point(aes(size = log(population, base=10), color = continent), alpha = 0.3) ## mpg 데이터 셋 ## cylinder 개수에 따른 시내 연비 gppoint2 &lt;- ggplot(data = mpg, aes(x = cyl, y = cty)) gppoint2 + geom_point(size = 3) # geom_jitter ## geom_point에서 position 인수 조정 gppoint2 + geom_point(position = &quot;jitter&quot;) + ggtitle(&quot;geom_point() with position = &#39;jitter&#39;&quot;) ## geom_jitter: jittering 크기는 0.3 ## class로 색 조정 gppoint2 + geom_jitter(aes(color = class), width = 0.3) + ggtitle(&quot;Jittering using geom_jitter()&quot;) 5.4.4 Geoms: 막대 geometrics geom_bar(): 범주형(factor 또는 문자열) 변수에 대응하는 케이스의 수를 막대의 높이로 나타냄. 기본적으로 stat_count()를 통해 각 집단 별 케이스 수가 그래프에 표현 함수 내 stat 인수 값을 “identity”로 설정 시 데이터 값 표현 가능 geom_col(): 데이터 값 자체를 높이로 표현 stat_identity()를 사용 # geom_bar(), geom_col() 주요 함수 인수 &lt;MAPPING&gt; = aes() 함수를 통해 수행 geom_bar()의 경우 aes() 내 x 위치에 대응하는 변수명만 입력해도 되지만, geom_col()의 경우, x, y 에 대응하는 변수 모두 입력 &lt;ARGUMENTS&gt; - width: 상자의 너비 조정 - positon: 문자열 또는 위치 조정 관련 함수 호출 가능 두 개 이상의 범주가 한 그래프에 표현된 경우, 디폴트 값은 &quot;stack&quot; (position_stack() 호출). 5.4.4.1 geom_bar() 5.4.4.2 geom_errorbar() 5.4.4.3 geom_text() 5.4.4.4 geom_histogram() 5.4.4.5 geom_boxplot() 5.4.4.6 geom_density() 5.4.4.7 geom_smooth() References "]
]
