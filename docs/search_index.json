[
["data-manipulation.html", "4 데이터 관리(Data Management)", " 4 데이터 관리(Data Management) 학습 목표 Hadely Weckam이 개발한 데이터의 전처리 및 시각화를 위해 각광받는 tidyverse 패키지에 대해 알아본다 데이터를 읽고, 저장하고, 목적에 맞게 가공하고, tidyverse 하에서 반복 계산 방법에 대해 알아본다. 데이터 분석과정 데이터를 R 작업환경(workspace)에 불러오고(import), 불러온 데이터를 가공하고(data management, data preprocessing), 가공한 데이터를 분석(analysis, modeling) 및 시각화(visualization) 후, 분석 결과를 저장(save) 및 외부 파일로 내보낸(export) 후, 이를 통해 전문가와 소통(communicate) Figure 4.1: Data 분석의 과정. Wickham and Grolemund (2016) 에서 발췌 R의 데이터 가공(관리) 방법 기본 R을 활용: 지금까지 배워온 방법으로 분석을 위한 데이터 가공(색인, 필터, 병합 등) tidyverse 패키지 활용 직관적 코드 작성 가능 빠른 실행속도 data.table 패키지 활용(본 강의에서는 다루지 않음) 빠른 실행속도 다양한 통계 함수와 최신 분석에 대한 여러 패키지 및 함수를 R 언어를 통해 활용 가능함에도 불구하고, 타 통계 소프트웨어(SAS, SPSS, Stata, Minitab 등)에 비해 데이터 가공 및 처리가 직관적이지 않고 불편했던 점은 R이 갖고 있던 큰 단점 중 하나임. RStudio의 수석 데이터 과학자인 Hadely Wickham의 tidyverse는 이러한 단점을 최대한 보완했고, 현재는 R을 통한 데이터 분석에서 핵심적인 도구로 자리매김 하고 있음. Tidyverse의 철학은 R 언어의 생태계에 혁신적인 변화를 가져왔을 뿐 아니라 지속적으로 진화하고 있기 때문에 해당 패키지들이 제공하는 언어 형태를 이해할 필요가 있음. References "],
["ch4-prerequi.html", "4.1 Prerequisites", " 4.1 Prerequisites 4.1.1 외부데이터 불러오기 및 저장 R 기본 함수를 이용해서 데이터 저장 파일의 가장 기본적인 형태인 텍스트 파일을 읽고 저장하는 방법에 대해 먼저 살펴봄. Base R에서 외부 데이터를 읽고 저장을 위한 함수는 매우 다양하지만 가장 많이 사용되고 있는 함수들에 대해 살펴볼 것임 기본 R(base R)에서 제공하는 함수를 이용해 외부 데이터를 읽고, 내보내고, 저장하는 방법에 대해 살펴봄. 가장 일반적인 형태의 데이터는 보통 텍스트 파일 형태로 저장되어 있음, 일반적으로 첫 번째 줄: 변수명 두 번째 줄 부터: 데이터 입력 id sex age edulev height 1 Male 65 12 168 2 Female 74 9 145 3 Male 61 12 171 4 Male 85 6 158 5 Female 88 0 134 데이터의 자료값과 자료값을 구분하는 문자를 구분자(separator)라고 하며 주로 공백(), 콤마(,), tab 문자(\\t) 등이 사용됨 주로 확장자 명이 *.txt 이며, 콤마 구분자인 경우 보통은 *.csv (comma separated values)로 저장 #titanic3.csv 파일 일부 &quot;pclass&quot;,&quot;survived&quot;,&quot;name&quot;,&quot;sex&quot;,&quot;age&quot;, 1,1,&quot;Allen, Miss. Elisabeth Walton&quot;,&quot;female&quot; 1,1,&quot;Allison, Master. Hudson Trevor&quot;,&quot;male&quot; 1,0,&quot;Allison, Miss. Helen Loraine&quot;, &quot;female&quot; 1,0,&quot;Allison, Mr. Hudson Joshua Creighton&quot;,&quot;male&quot; 1,0,&quot;Allison, Mrs. Hudson J C (Bessie Waldo Daniels)&quot;,&quot;female&quot; 텍스트 파일 입출력 외부 데이터를 불러온다는 것은 외부에 저장되어 있는 파일을 R 작업환경으로 읽어온다는 의미이기 때문에, 현재 작업공간의 작업 디렉토리(working directory) 확인이 필요. read.table()/write.table(): 가장 범용적으로 외부 텍스트 데이터를 R 작업공간으로 데이터 프레임으로 읽고 저장하는 함수 텍스트 파일의 형태에 따라 구분자 지정 가능 # read.table(): 텍스트 파일 읽어오기 read.table( file, # 파일명. 일반적으로 폴더명 구분자 # 보통 folder/파일이름.txt 형태로 입력 header = FALSE, # 첫 번째 행을 헤더(변수명)으로 처리할 지 여부 sep = &quot;&quot;, # 구분자 &quot;,&quot;, &quot;\\t&quot; 등의 형태로 입력 comment.char = &quot;#&quot;, # 주석문자 지정 stringsAsFactors = TRUE, # 문자형 변수를 factor으로 변환할 지 여부 encoding = &quot;unknown&quot; # 텍스트의 encoding 보통 CP949 또는 UTF-8 # 한글이 입력된 데이터가 있을 때 사용 ) read.table() 예시 예시에 사용된 데이터들은 Clinical trial data analysis using R (Chen and Peace 2010)에서 제공되는 데이터임. # tab 구분자 데이터 불러오기 # dataset 폴더에 저장되어 있는 DBP.txt 파일 읽어오기 dbp &lt;- read.table(&quot;dataset/DBP.txt&quot;, sep = &quot;\\t&quot;, header = TRUE) str(dbp) &#39;data.frame&#39;: 40 obs. of 9 variables: $ Subject: int 1 2 3 4 5 6 7 8 9 10 ... $ TRT : chr &quot;A&quot; &quot;A&quot; &quot;A&quot; &quot;A&quot; ... $ DBP1 : int 114 116 119 115 116 117 118 120 114 115 ... $ DBP2 : int 115 113 115 113 112 112 111 115 112 113 ... $ DBP3 : int 113 112 113 112 107 113 100 113 113 108 ... $ DBP4 : int 109 103 104 109 104 104 109 102 109 106 ... $ DBP5 : int 105 101 98 101 105 102 99 102 103 97 ... $ Age : int 43 51 48 42 49 47 50 61 43 51 ... $ Sex : chr &quot;F&quot; &quot;M&quot; &quot;F&quot; &quot;F&quot; ... # 문자형 값들을 factor로 변환하지 않는 경우 dbp2 &lt;- read.table(&quot;dataset/DBP.txt&quot;, sep = &quot;\\t&quot;, header = TRUE, stringsAsFactors = FALSE) str(dbp2) &#39;data.frame&#39;: 40 obs. of 9 variables: $ Subject: int 1 2 3 4 5 6 7 8 9 10 ... $ TRT : chr &quot;A&quot; &quot;A&quot; &quot;A&quot; &quot;A&quot; ... $ DBP1 : int 114 116 119 115 116 117 118 120 114 115 ... $ DBP2 : int 115 113 115 113 112 112 111 115 112 113 ... $ DBP3 : int 113 112 113 112 107 113 100 113 113 108 ... $ DBP4 : int 109 103 104 109 104 104 109 102 109 106 ... $ DBP5 : int 105 101 98 101 105 102 99 102 103 97 ... $ Age : int 43 51 48 42 49 47 50 61 43 51 ... $ Sex : chr &quot;F&quot; &quot;M&quot; &quot;F&quot; &quot;F&quot; ... # 데이터 형태 파악 head(dbp) # 콤마 구분자 데이터 불러오기 # dataset 폴더에 저장되어 있는 diabetes_csv.txt 파일 읽어오기 diab &lt;- read.table(&quot;dataset/diabetes_csv.txt&quot;, sep = &quot;,&quot;, header = TRUE) str(diab) &#39;data.frame&#39;: 403 obs. of 19 variables: $ id : int 1000 1001 1002 1003 1005 1008 1011 1015 1016 1022 ... $ chol : int 203 165 228 78 249 248 195 227 177 263 ... $ stab.glu: int 82 97 92 93 90 94 92 75 87 89 ... $ hdl : int 56 24 37 12 28 69 41 44 49 40 ... $ ratio : num 3.6 6.9 6.2 6.5 8.9 ... $ glyhb : num 4.31 4.44 4.64 4.63 7.72 ... $ location: chr &quot;Buckingham&quot; &quot;Buckingham&quot; &quot;Buckingham&quot; &quot;Buckingham&quot; ... $ age : int 46 29 58 67 64 34 30 37 45 55 ... $ gender : chr &quot;female&quot; &quot;female&quot; &quot;female&quot; &quot;male&quot; ... $ height : int 62 64 61 67 68 71 69 59 69 63 ... $ weight : int 121 218 256 119 183 190 191 170 166 202 ... $ frame : chr &quot;medium&quot; &quot;large&quot; &quot;large&quot; &quot;large&quot; ... $ bp.1s : int 118 112 190 110 138 132 161 NA 160 108 ... $ bp.1d : int 59 68 92 50 80 86 112 NA 80 72 ... $ bp.2s : int NA NA 185 NA NA NA 161 NA 128 NA ... $ bp.2d : int NA NA 92 NA NA NA 112 NA 86 NA ... $ waist : int 29 46 49 33 44 36 46 34 34 45 ... $ hip : int 38 48 57 38 41 42 49 39 40 50 ... $ time.ppn: int 720 360 180 480 300 195 720 1020 300 240 ... head(diab) # Encoding이 다른 경우(한글데이터 포함): # 한약재 사전 데이터 (CP949 encoding으로 저장) # tab 구분자 데이터 사용 # UTF-8로 읽어오기 herb &lt;- read.table(&quot;dataset/herb_dic_sample.txt&quot;, sep = &quot;\\t&quot;, header = TRUE, encoding = &quot;UTF-8&quot;, stringsAsFactors = FALSE) head(herb) # CP949로 읽어오기 herb &lt;- read.table(&quot;dataset/herb_dic_sample.txt&quot;, sep = &quot;\\t&quot;, header = TRUE, encoding = &quot;CP949&quot;, stringsAsFactors = FALSE) head(herb) read.table() + textConnection(): 웹사이트나 URL에 있는 데이터를 Copy + Paste 해서 읽어올 경우 유용하게 사용 textConnection(): 텍스트에서 한 줄씩 읽어 문자형 벡터처럼 인식할 수 있도록 해주는 함수 # Plasma 데이터: http://lib.stat.cmu.edu/datasets/Plasma_Retinol input1 &lt;- (&quot;64 2 2 21.4838 1 1298.8 57 6.3 0 170.3 1945 890 200 915 76 2 1 23.87631 1 1032.5 50.1 15.8 0 75.8 2653 451 124 727 38 2 2 20.0108 2 2372.3 83.6 19.1 14.1 257.9 6321 660 328 721 40 2 2 25.14062 3 2449.5 97.5 26.5 0.5 332.6 1061 864 153 615 72 2 1 20.98504 1 1952.1 82.6 16.2 0 170.8 2863 1209 92 799 40 2 2 27.52136 3 1366.9 56 9.6 1.3 154.6 1729 1439 148 654 65 2 1 22.01154 2 2213.9 52 28.7 0 255.1 5371 802 258 834 58 2 1 28.75702 1 1595.6 63.4 10.9 0 214.1 823 2571 64 825 35 2 1 23.07662 3 1800.5 57.8 20.3 0.6 233.6 2895 944 218 517 55 2 2 34.96995 3 1263.6 39.6 15.5 0 171.9 3307 493 81 562&quot;) input2 &lt;- (&quot;AGE: Age (years) SEX: Sex (1=Male, 2=Female). SMOKSTAT: Smoking status (1=Never, 2=Former, 3=Current Smoker) QUETELET: Quetelet (weight/(height^2)) VITUSE: Vitamin Use (1=Yes, fairly often, 2=Yes, not often, 3=No) CALORIES: Number of calories consumed per day. FAT: Grams of fat consumed per day. FIBER: Grams of fiber consumed per day. ALCOHOL: Number of alcoholic drinks consumed per week. CHOLESTEROL: Cholesterol consumed (mg per day). BETADIET: Dietary beta-carotene consumed (mcg per day). RETDIET: Dietary retinol consumed (mcg per day) BETAPLASMA: Plasma beta-carotene (ng/ml) RETPLASMA: Plasma Retinol (ng/ml)&quot;) plasma &lt;- read.table(textConnection(input1), sep = &quot;\\t&quot;, header = F) codebook &lt;- read.table(textConnection(input2), sep = &quot;:&quot;, header = F) varname &lt;- gsub(&quot;^\\\\s+&quot;, &quot;&quot;, codebook$V1) # 변수명 지정 names(plasma) &lt;- varname head(plasma) write.table(): R의 객체(벡터, 행렬, 데이터 프레임)를 저장 후 외부 텍스트 파일로 내보내기 위한 함수 # write.table() R 객체를 텍스트 파일로 저장하기 write.table( data_obj, # 저장할 객체 이름 file, # 저장할 위치 및 파일명 또는 # 또는 &quot;파일쓰기&quot;를 위한 연결 명칭 sep, # 저장 시 사용할 구분자 row.names = TRUE # 행 이름 저장 여부 ) 예시 # 위에서 읽어온 plasma 객체를 dataset/plasma.txt 로 내보내기 # 행 이름은 생략, tab으로 데이터 구분 write.table(plasma, &quot;dataset/plasma.txt&quot;, sep = &quot;\\t&quot;, row.names = F) 파일명 대신 Windows clipboard 로 내보내기 가능 # clipboard로 복사 후 excel 시트에 해당 데이터 붙여넣기 # Ctrl + V write.table(plasma, &quot;clipboard&quot;, sep = &quot;\\t&quot;, row.names = F) read.csv()/write.csv(): read.table() 함수의 wrapper 함수로 구분자 인수 sep이 콤마(,)로 고정(예시 생략) R 바이너리(binary) 파일 입출력 R 작업공간에 존재하는 한 개 이상의 객체들을 저장하고 읽기 위한 함수 R 데이터 관련 바이너리 파일은 한 개 이상의 객체가 저장된 바이너리 파일인 경우 *.Rdata 형태를 갖고, 단일 객체를 저장할 경우 보통 *.rds 파일 확장자로 저장 *.Rdata 입출력 함수 load(): *.Rdata 파일 읽어오기 save(): 한 개 이상 R 작업공간에 존재하는 객체를 .Rdata 파일로 저장 save.image(): 현재 R 작업공간에 존재하는 모든 객체를 .Rdata 파일로 저장 # 현재 작업공간에 존재하는 모든 객체를 &quot;output&quot; 폴더에 저장 # output 폴더가 존재하지 않는 경우 아래 명령 실행 # dir.create(&quot;output&quot;) ls() [1] &quot;codebook&quot; &quot;dbp&quot; &quot;dbp2&quot; &quot;def.chunk.hook&quot; [5] &quot;diab&quot; &quot;herb&quot; &quot;hook_output&quot; &quot;input1&quot; [9] &quot;input2&quot; &quot;plasma&quot; &quot;varname&quot; save.image(file = &quot;output/all_obj.Rdata&quot;) rm(list = ls()) ls() character(0) # 저장된 binary 파일(all_obj.Rdata) 불러오기 load(&quot;output/all_obj.Rdata&quot;) ls() [1] &quot;codebook&quot; &quot;dbp&quot; &quot;dbp2&quot; &quot;def.chunk.hook&quot; [5] &quot;diab&quot; &quot;herb&quot; &quot;hook_output&quot; &quot;input1&quot; [9] &quot;input2&quot; &quot;plasma&quot; &quot;varname&quot; # dnp, plasma 데이터만 output 폴더에 sub_obj.Rdata로 저장 save(dbp, plasma, file = &quot;output/sub_obj.Rdata&quot;) rm(list = c(&quot;dbp&quot;, &quot;plasma&quot;)) ls() [1] &quot;codebook&quot; &quot;dbp2&quot; &quot;def.chunk.hook&quot; &quot;diab&quot; [5] &quot;herb&quot; &quot;hook_output&quot; &quot;input1&quot; &quot;input2&quot; [9] &quot;varname&quot; # sub_obj.Rdata 파일 불러오기 load(&quot;output/sub_obj.Rdata&quot;) ls() [1] &quot;codebook&quot; &quot;dbp&quot; &quot;dbp2&quot; &quot;def.chunk.hook&quot; [5] &quot;diab&quot; &quot;herb&quot; &quot;hook_output&quot; &quot;input1&quot; [9] &quot;input2&quot; &quot;plasma&quot; &quot;varname&quot; *.rds 입출력 함수 readRDS()/ saveRDS(): 단일 객체가 저장된 *.rds 파일을 읽거나 저장 대용량 데이터를 다룰 때 유용함 read.table() 보다 데이터를 읽는 속도가 빠르며, 다른 확장자 명의 텍스트 파일보다 높은 압축율을 보임 # 대용량 파일 dataset/pulse.csv 불러오기 # system.time(): 명령 실행 시가 계산 함수 system.time(pulse &lt;- read.csv(&quot;dataset/pulse.csv&quot;, header = T)) 사용자 시스템 elapsed 28.89 0.08 29.19 # saveRDS()함수를 이용해 output/pulse.rds 파일로 저장 saveRDS(pulse, &quot;output/pulse.rds&quot;) rm(pulse); ls() [1] &quot;codebook&quot; &quot;dbp&quot; &quot;dbp2&quot; &quot;def.chunk.hook&quot; [5] &quot;diab&quot; &quot;herb&quot; &quot;hook_output&quot; &quot;input1&quot; [9] &quot;input2&quot; &quot;plasma&quot; &quot;varname&quot; system.time(pulse &lt;- readRDS(&quot;output/pulse.rds&quot;)) 사용자 시스템 elapsed 0.12 0.00 0.12 References "],
["tidyverse.html", "4.2 Tidyverse", " 4.2 Tidyverse “Tidy” + “Universe”의 조어로 “tidy data”의 기본 설계 철학, 문법 및 데이터 구조를 공유하는 RStudio 수석 과학자인 Hadley Wickham이 개발한 패키지 묶음(번들) 또는 메타 패키지로, 데이터 과학(data science)을 위한 R package를 표방 (Wickham 2019b) 데이터 분석 과정 중 가장 긴 시간을 할애하는 데이터 전처리(data preprocessing, data management, data wrangling, data munging 등으로 표현)를 위한 다양한 함수들을 제공하며, 특히 파이프(pipe) 연산자로 지칭되는 %&gt;%를 통한 코드의 간결성 및 가독성을 최대화 하는 것이 tidyverse 패키지들의 특징 Hadley Wickham이 주창한 Tidy Tools Manifesto에 따르면, tidyverse가 추구하는 프로그래밍 인터페이스에 대한 4 가지 원칙을 제시 기존 데이터의 구조를 재사용 파이프 연산자를 이용한 최대한 간결한 함수 작성 R의 특징 중 하나인 functional programming 수용 사람이 읽기 쉬운 프로그램으로 설계 Tidyverse를 구성하는 주요 패키지(알파벳 순) dplyr: 가장 일반적인 데이터 가공 및 처리 해결을 위한 “동사”(함수)로 구성된 문법 제공 forcat: 범주형 변수 처리를 위해 Rdml factor와 관련된 일반적인 문제 해결을 위한 함수 제공 ggplot2: 그래픽 문법을 기반으로 2차원 그래픽을 생성하기 위해 고안된 시스템 purrr: 함수 및 벡터의 반복 작업을 수행할 수 있는 도구를 제공 readr: base R에서 제공하는 파일 입출력 함수보다 효율적인 성능을 갖는 입출력 함수로 구성 stringr: 가능한 한 쉬운 방법으로 문자열을 다룰 수 있는 함수 제공 tibble: Tidyverse에서 재해석한 데이터 프레임 형태로 tidyverse에서 다루는 데이터의 기본 형태 tidyr: 데이터를 정리하고 “tidy data”를 도출하기 위한 일련의 함수 제공 그 밖에 유용한 tidyverse에 소속되어 있는 패키지 haven: 타 통계 프로그램(SAS, SPSS, Stata)의 데이터 포멧 입출력 함수 제공 readxl: Excel 파일 입력 함수 제공 lubridate: 시간(년/월/일/시/분) 데이터 가공 및 연산 함수 제공 magrittr: Tidyverse의 문법(함수)를 연결 시켜주는 파이프 연산자 제공. 예전에는 독립적인 패키지였으나 지금은 모든 tidyverse 패키지에 내장되어 있음 References "],
["readr.html", "4.3 readr 패키지", " 4.3 readr 패키지 기본적으로 4.1.1 절에서 학습했던 read.table(), read.csv()와 거의 동일하게 작동하지만, 읽고 저장하는 속도가 base R에서 제공하는 기본 입출력 함수보다 월등히 뛰어남. 최근 readr 패키지에서 제공하는 입출력 함수보다 더 빠르게 데이터 입출력이 가능한 feather 패키지 (Wickham 2019a) 제공 데이터를 읽는 동안 사소한 문제가 있는 경우 해당 부분에 경고 표시 및 행, 관측 정보를 표시해줌 \\(\\rightarrow\\) 데이터 디버깅에 유용 주요 함수1 read_table(), write_table() read_csv(), write_csv() readr vignette을 통해 더 자세한 예시를 살펴볼 수 있음 read_csv( file, # 파일 명 col_names = TRUE, # 첫 번째 행를 변수명으로 처리할 것인지 여부 # read.table(), read.csv()의 header 인수와 동일 col_types = NULL, # 열(변수)의 데이터 형 지정 # 기본적으로 데이터 유형을 자동으로 감지하지만, # 입력 텍스트의 형태에 따라 데이터 유형을 # 잘못 추측할 수 있기 때문에 간혹 해당 인수 입력 필요 # col_* 함수 또는 campact string으로 지정 가능 # c=character, i=integer, n=number, d=double, # l=logical, f=factor, D=date, T=date time, t=time # ?=guess, _/- skip column progress, # 데이터 읽기/쓰기 진행 progress 표시 여부 ) 예시 # dataset/titanic3.csv 불러오기 titanic &lt;- read_csv(&quot;dataset/titanic3.csv&quot;) Parsed with column specification: cols( pclass = col_double(), survived = col_double(), name = col_character(), sex = col_character(), age = col_double(), sibsp = col_double(), parch = col_double(), ticket = col_character(), fare = col_double(), cabin = col_character(), embarked = col_character(), boat = col_character(), body = col_double(), home.dest = col_character() ) titanic # read.csv와 비교 head(read.csv(&quot;dataset/titanic3.csv&quot;, header = T), 10) # column type을 변경 titanic2 &lt;- read_csv(&quot;dataset/titanic3.csv&quot;, col_types = &quot;iicfdiicdcfcic&quot;) titanic2 # 특정 변수만 불러오기 titanic3 &lt;- read_csv(&quot;dataset/titanic3.csv&quot;, col_types = cols_only( pclass = col_integer(), survived = col_integer(), sex = col_factor(), age = col_double() )) titanic3 # 대용량 데이터셋 읽어올 때 시간 비교 # install.packages(&quot;feather&quot;) # feather package require(feather) 필요한 패키지를 로딩중입니다: feather system.time(pulse &lt;- read.csv(&quot;dataset/pulse.csv&quot;, header = T)) 사용자 시스템 elapsed 29.74 0.03 29.82 write_feather(pulse, &quot;dataset/pulse.feather&quot;) system.time(pulse &lt;- readRDS(&quot;output/pulse.rds&quot;)) 사용자 시스템 elapsed 0.13 0.00 0.12 system.time(pulse &lt;- read_csv(&quot;dataset/pulse.csv&quot;)) Parsed with column specification: cols( .default = col_double() ) See spec(...) for full column specifications. 사용자 시스템 elapsed 20.47 0.04 20.60 system.time(pulse &lt;- read_feather(&quot;dataset/pulse.feather&quot;)) 사용자 시스템 elapsed 0.28 0.00 0.28 4.3.1 Excel 파일 입출력 R에서 기본적으로 제공하는 파일 입출력 함수는 대부분 텍스트 파일(*.txt, *.csv, *.tsv2)을 대상으로 하고 있음 readr 패키지에서도 이러한 원칙은 유지됨 Excel 파일을 R로 읽어오기(과거 방법) *.xls 또는 *.xlsx 파일을 엑셀로 읽은 후 해당 데이터를 위 텍스트 파일 형태로 내보낸 후 해당 파일을 R로 읽어옴 xlsx 패키지 등을 이용해 엑셀 파일을 직접 읽어올 수 있으나, Java 기반으로 개발된 패키지이기 때문에 Java Runtime Environment를 운영체제에 설치해야만 작동 최근 tidyverse 중 하나인 readxl 패키지를 이용해 간편하게 R 작업환경에 엑셀 파일을 읽어오는 것이 가능(Hadley Wickham이 개발…) tidyverse의 한 부분임에도 불구하고 tidyverse 패키지 번들에는 포함되어 있지 않기 때문에 별도 설치 필요 readxl 패키지 구성 주요 함수 read_xls(), read_xlsx(), read_excel: 엑셀 파일을 읽어오는 함수로 각각 Excel 97 ~ 2003, Excel 2007 이상, 또는 버전 상관 없이 저장된 엑셀 파일에 접근함 excel_sheets(): 엑셀 파일 내 시트 이름 추출 \\(\\rightarrow\\) 한 엑셀 파일의 복수 시트에 데이터가 저장되어 있는 경우 활용 예시: 2020년 4월 23일 COVID-19 유병률 데이터 (Our World in Data) read_xlsx( path, # Excel 폴더 및 파일 이름 sheet = NULL, # 불러올 엑셀 시트 이름 # default = 첫 번째 시트 col_names = TRUE, # read_csv()의 인수와 동일한 형태 입력 col_types = NULL # read_csv()의 인수와 동일한 형태 입력 ) # 2020년 4월 21일자 COVID-19 국가별 유별률 및 사망률 집계 자료 # dataset/owid-covid-data.xlsx 파일 불러오기 # install.packages(&quot;readxl&quot;) require(readxl) 필요한 패키지를 로딩중입니다: readxl covid19 &lt;- read_xlsx(&quot;dataset/covid-19-dataset/owid-covid-data.xlsx&quot;) covid19 # 여러 시트를 동시에 불러올 경우 # dataset/datR4CTDA.xlsx 의 모든 시트 불러오기 path &lt;- &quot;dataset/datR4CTDA.xlsx&quot; sheet_name &lt;- excel_sheets(path) dL &lt;- lapply(sheet_name, function(x) read_xlsx(path, sheet = x)) names(dL) &lt;- sheet_name # Tidyverse 에서는? (맛보기) path %&gt;% excel_sheets %&gt;% set_names %&gt;% map(~read_xlsx(path = path, sheet = .x)) -&gt; dL2 4.3.2 tibble 패키지 readr 또는 readxl 패키지에서 제공하는 함수를 이용해 외부 데이터를 읽어온 후, 확인할 때 기존 데이터 프레임과 미묘한 차이점이 있다는 것을 확인 프린트된 데이터의 맨 윗 부분을 보면 A tibble: 데이터 차원 이 표시된 부분을 볼 수 있음 tibble은 tidyverse 생태계에서 사용되는 데이터 프레임 \\(\\rightarrow\\) 데이터 프레임을 조금 더 빠르고 사용하기 쉽게 수정한 버전의 데이터 프레임 tibble 생성하기 기본 R 함수에서 제공하는 as.* 계열 함수 처럼 as_tibble() 함수를 통해 기존 일반적인 형태의 데이터 프레임을 tibble 로 변환 가능 head(iris) as_tibble(iris) 개별 벡터로부터 tibble 생성 가능 방금 생성한 변수 참조 가능 문자형 변수가 입력된 경우 데이터 프레임과 다르게 별다른 옵션이 없어도 강제로 factor로 형 변환을 하지 않음 # 벡터로부터 tibble 객체 생성 tibble(x = letters, y = rnorm(26), z = y^2) # 데이터 프레임으로 위와 동일하게 적용하면? data.frame(x = letters, y = rnorm(26), z = y^2) Error in data.frame(x = letters, y = rnorm(26), z = y^2): 객체 &#39;y&#39;를 찾을 수 없습니다 # 벡터의 길이가 다른 경우 # 길이가 1인 벡터는 재사용 가능 tibble(x = 1, y = rep(0:1, each = 4), z = 2) # 데이터 프레임과 마찬가지로 비정상적 문자를 변수명으로 사용 가능 # 역따옴표(``) tibble(`2000` = &quot;year&quot;, `:)` = &quot;smile&quot;, `:(` = &quot;sad&quot;) tribble() 함수 사용: transposed (전치된) tibble의 약어로 데이터를 직접 입력 시 유용 tribble( ~x, ~y, ~z, &quot;M&quot;, 172, 69, &quot;F&quot;, 156, 45, &quot;M&quot;, 165, 73, ) tibble()과 data.frame()의 차이점 가장 큰 차이점은 데이터 처리의 속도 및 데이터의 프린팅 tibble이 데이터 프레임 보다 간결하고 많은 정보 확인 가능 str()에서 확인할 수 있는 데이터 유형 확인 가능 head(iris) dd &lt;- as_tibble(iris) dd References "],
["dplyr.html", "4.4 dplyr 패키지", " 4.4 dplyr 패키지 dplyr에서 제공하는 “동사”(함수)로 데이터(데이터 프레임) 전처리 방법에 대해 익힌다. dplyr은 tidyverse 에서 데이터 전처리를 담당하는 패키지로 데이터 전처리 과정을 쉽고 빠르게 수행할 수 있는 함수로 구성된 패키지임. 데이터 핸들링을 위해 Hadley Wickham이 개발한 plyr 패키지를 최적화한 패키지로 C++ 로 코딩되어 성능이 plyr에 비해 월등히 우수함. base R에 존재하는 함수만으로도 전처리는 충분히 가능하나, dplyr은 아래와 같은 장점을 가짐 파이프 연산자(%&gt;%)로 코드의 가독성 극대화 코드 작성이 쉬움 전통적인 R의 데이터 처리에서 사용되는 [, [[, $와 같은 색인 연산자 최소화 dplyr은 몇 가지 “동사”를 조합하여 사용 RStudio를 사용할 경우 코드 작성이 빨라짐 접근 방법이 SQL 문과 유사함 dplyr은 초기 데이터 프레임만을 다루지만, purrr 패키지를 통해 행렬, 배열, 리스트 등에도 적용 가능 dplyr에서 제공하는 가장 기본 “동사”는 다음과 같음 filter(): 각 행(row)을 조건에 따라 선택 arrange(): 선택한 변수(column)에 해당하는 행(row)을 기준으로 정렬 select(): 변수(column) 선택 mutate(): 새로운 변수를 추가하거나 이미 존재하는 변수를 변환 summarize() 또는 summarise(): 변수 집계(평균, 표준편차, 최댓값, 최솟값, …) group_by() : 위 열거한 모든 동사들을 그룹별로 적용 base R 제공 함수와 비교 Table 4.1: dplyr 패키지 함수와 R base 패키지 함수 비교 동사(함수) 내용 R base 패키지 함수 filter() 행 추출 subset() arrange() 내림차순/오름차순 정렬 order(), sort() select() 열 선택 data[, c(‘var_name01’, ‘var_name03’)] mutate() 열 추가 및 변환 transform() summarise() 집계 aggregate() group_by() 그룹별 집계 및 함수 적용 dplyr 기본 동사와 연동해서 사용되는 주요 함수 slice(): 행 색인을 이용한 추출 \\(\\rightarrow\\) data[n:m, ]과 동일 distinct(): 행 레코드 중 중복 항복 제거 \\(\\rightarrow\\) base R 패키지의 unique() 함수와 유사 sample_n(), sample_frac(): 데이터 레코드를 랜덤하게 샘플링 rename(): 변수명 변경 inner_join, right_join(), left_join(), full_join : 두 데이터셋 병합 \\(\\rightarrow\\) merge() 함수와 유사 tally(), count(), n(): 데이터셋의 행의 길이(개수)를 반환하는 함수로 (그룹별) 집계에 사용: length(), nrow()/NROW() 함수와 유사 *_all,, *_at, *_if: dplyr에서 제공하는 기본 동사(group_by() 제외) 사용 시 적용 범위를 설정해 기본 동사와 동일한 기능을 수행하는 함수 R에서 데이터 전처리 및 분석을 수행할 때, 간혹 동일한 이름의 함수명들이 중복된 채 R 작업공간에 읽어오는 경우가 있는데, 이 경우 가장 마지막에 읽어온 패키지의 함수를 작업공간에서 사용한다. 예를 들어 R base 패키지의 filter() 함수는 시계열 데이터의 노이즈를 제거하는 함수이지만, tidyverse 패키지를 읽어온 경우, dplyr 패키지의 filter() 함수와 이름이 중복되기 때문에 R 작업공간 상에서는 dplyr 패키지의 filter()가 작동을 함. 만약 stats 패키지의 filter() 함수를 사용하고자 하면 stats::filter()를 사용. 이를 더 일반화 하면 현재 컴퓨터 상에 설치되어 있는 R 패키지의 특정 함수는 :: 연산자를 통해 접근할 수 있으며, package_name::function_name() 형태로 접근 가능함. 4.4.1 파이프 연산자: %&gt;% Tidyverse 세계에서 tidy를 담당하는 핵심적인 함수 여러 함수를 연결(chain)하는 역할을 하며, 이를 통해 불필요한 임시변수를 정의할 필요가 없어짐 function_1(x) %&gt;% function_2(y) = function_2(function_1(x), y): function_1(x)에서 반환한 값을 function_2()의 첫 번째 인자로 사용 x %&gt;% f(y) %&gt;% g(z)= ? 기존 R 문법과 차이점 기존 R: 동사(목적어, 주변수, 나머지 변수) Pipe 연결 방식: 목적어 %&gt;% 동사(주변수, 나머지 변수) 예시 # base R 문법 적용 print(head(iris, 4)) Sepal.Length Sepal.Width Petal.Length Petal.Width Species 1 5.1 3.5 1.4 0.2 setosa 2 4.9 3.0 1.4 0.2 setosa 3 4.7 3.2 1.3 0.2 setosa 4 4.6 3.1 1.5 0.2 setosa # %&gt;% 연산자 이용 iris %&gt;% head(4) %&gt;% print Sepal.Length Sepal.Width Petal.Length Petal.Width Species 1 5.1 3.5 1.4 0.2 setosa 2 4.9 3.0 1.4 0.2 setosa 3 4.7 3.2 1.3 0.2 setosa 4 4.6 3.1 1.5 0.2 setosa # setosa 종에 해당하는 변수들의 평균 계산 apply(iris[iris$Species == &quot;setosa&quot;, -5], 2, mean) Sepal.Length Sepal.Width Petal.Length Petal.Width 5.006 3.428 1.462 0.246 # tidyverse의 pipe 연산자 이용 # require(tidyverse) iris %&gt;% filter(Species == &quot;setosa&quot;) %&gt;% select(-Species) %&gt;% summarise_all(mean) # Homework #3 b-c 풀이를 위한 pipe 연산 적용 # df &lt;- within(df, { # am &lt;- factor(am, levels = 0:1, # labels = c(&quot;automatic&quot;, &quot;manual&quot;)) # }) # ggregate(cbind(mpg, disp, hp, drat, wt, qsec) ~ am, # data = df, # mean) # aggregate(cbind(mpg, disp, hp, drat, wt, qsec) ~ am, # data = df, # sd) mtcars %&gt;% mutate(am = factor(vs, levels = 0:1, labels = c(&quot;automatic&quot;, &quot;manual&quot;))) %&gt;% group_by(am) %&gt;% summarise_at(vars(mpg, disp:qsec), list(mean = mean, sd = sd)) 4.4.2 filter() 행(row, case, observation) 조작 동사 데이터 프레임(또는 tibble)에서 특정 조건을 만족하는 레코드(row) 추출 Figure 4.2: filter() 함수 다이어그램 R base 패키지의 subset() 함수와 유사하게 작동하지만 성능이 더 좋음(속도가 더 빠르다). 추출을 위한 조건은 2.1.4 절 논리형 스칼라에서 설명한 비교 연산자를 준용함. 단 filter() 함수 내에서 and (&amp;) 조건은 ,(콤마, comma)로 표현 가능 filter()에서 가능한 불린(boolean) 연산 Figure 4.3: 가능한 모든 boolean 연산 종류: x는 좌변, y는 우변을 의미하고 음영은 연산 이후 선택된 부분을 나타냄. # filter() 동사 prototype dplyr::filter(x, # 데이터 프레임 또는 티블 객체 condition_01, # 첫 번째 조건 condition_02, # 두 번째 조건 # 두 번째 인수 이후 조건들은 # condition_1 &amp; condition 2 &amp; ... &amp; condition_n 임 ...) 예시 1: mpg 데이터(ggplot2 패키지 내장 데이터) mpg 데이터 코드북 데이터 구조 확인을 위해 dplyr 패키지에서 제공하는 glimpse() 함수(str() 유사) 사용 Table 4.2: mpg 데이터셋 설명(코드북) 변수명 변수설명(영문) 변수설명(국문) manufacturer manufacturer name 제조사 model model name 모델명 displ engine displacement, in litres 배기량 (리터) year year of manufacture 제조년도 cyl number of cylinders 엔진 기통 수 trans type of transmission 트렌스미션 drv the type of drive train, where f = front-wheel drive, r = rear wheel drive, 4 = 4wd 구동 유형: f = 전륜구동, r = 후륜구동, 4 = 4륜 구동 cty city miles per gallon 시내 연비 hwy highway miles per gallon 고속 연비 fl fuel type: e = E85, d = diesel, r = regular, p = premium, c = CNG 연료: e = 에탄올 85, r = 가솔린, p = 프리미엄, d = 디젤, c = CNP class ‘type’ of car 자동차 타입 glimpse(mpg) Rows: 234 Columns: 11 $ manufacturer &lt;chr&gt; &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;... $ model &lt;chr&gt; &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4 quattro&quot;... $ displ &lt;dbl&gt; 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0,... $ year &lt;int&gt; 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1999, ... $ cyl &lt;int&gt; 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 8, ... $ trans &lt;chr&gt; &quot;auto(l5)&quot;, &quot;manual(m5)&quot;, &quot;manual(m6)&quot;, &quot;auto(av)&quot;, &quot;a... $ drv &lt;chr&gt; &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;4&quot;, &quot;4&quot;, &quot;4&quot;, &quot;4&quot;,... $ cty &lt;int&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17... $ hwy &lt;int&gt; 29, 29, 31, 30, 26, 26, 27, 26, 25, 28, 27, 25, 25, 25... $ fl &lt;chr&gt; &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;,... $ class &lt;chr&gt; &quot;compact&quot;, &quot;compact&quot;, &quot;compact&quot;, &quot;compact&quot;, &quot;compact&quot;,... # 현대 차만 추출 ## 기본 문법 사용 # mpg[mpg$manufacturer == &quot;hyundai&quot;, ] # subset(mpg, manufacturer == &quot;hyundai&quot;) ## filter() 함수 사용 # filter(mpg, manufacturer == &quot;hyundai&quot;) ## pipe 연산자 사용 mpg %&gt;% filter(manufacturer == &quot;hyundai&quot;) # 시내 연비가 20 mile/gallon 이상이고 타입이 suv 차량 추출 ## 기본 문법 사용 # mpg[mpg$cty &gt;= 20 &amp; mpg$class == &quot;suv&quot;, ] # subset(mpg, cty &gt;= 20 &amp; class == &quot;suv&quot;) ## filter() 함수 사용 # filter(mpg, cty &gt;= 20, class == &quot;suv&quot;) ## pipe 연산자 사용 mpg %&gt;% filter(cty &gt;= 20, class == &quot;suv&quot;) # 제조사가 audi 또는 volkswagen 이고 고속 연비가 30 miles/gallon 인 차량만 추출 mpg %&gt;% filter(manufacturer == &quot;audi&quot; | manufacturer == &quot;volkswagen&quot;, hwy &gt;= 30) 4.4.3 arrange() 행(row, case, observation) 조작 동사 지정한 열을 기준으로 데이터의 레코드(row)를 오름차순(작은 값부터 큰 값)으로 정렬 내림차순(큰 값부터 작은 값) 정렬 시 desc() 함수 이용 Figure 4.4: arrange() 함수 다이어그램 arrange(data, # 데이터 프레임 또는 티블 객체 var1, # 기준 변수 1 var2, # 기준 변수 2 ...) 예시 1: mpg 데이터셋 # 시내 연비를 기준으로 오름차순 정렬 ## R 기본 문법 사용 # mpg[order(mpg$cty), ] ## arrange 함수 사용 # arrange(mpg, cty) ## pipe 사용 mpg_asc &lt;- mpg %&gt;% arrange(cty) mpg_asc %&gt;% print # A tibble: 234 x 11 manufacturer model displ year cyl trans drv cty hwy fl class &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; 1 dodge dakota p~ 4.7 2008 8 auto(~ 4 9 12 e pick~ 2 dodge durango ~ 4.7 2008 8 auto(~ 4 9 12 e suv 3 dodge ram 1500~ 4.7 2008 8 auto(~ 4 9 12 e pick~ 4 dodge ram 1500~ 4.7 2008 8 manua~ 4 9 12 e pick~ 5 jeep grand ch~ 4.7 2008 8 auto(~ 4 9 12 e suv 6 chevrolet c1500 su~ 5.3 2008 8 auto(~ r 11 15 e suv 7 chevrolet k1500 ta~ 5.3 2008 8 auto(~ 4 11 14 e suv 8 chevrolet k1500 ta~ 5.7 1999 8 auto(~ 4 11 15 r suv 9 dodge caravan ~ 3.3 2008 6 auto(~ f 11 17 e mini~ 10 dodge dakota p~ 5.2 1999 8 manua~ 4 11 17 r pick~ # ... with 224 more rows # 시내 연비는 오름차순, 차량 타입은 내림차순(알파벳 역순) 정렬 ## R 기본 문법 사용 ### 문자형 벡터의 순위 계산을 위해 rank() 함수 사용 mpg_sortb &lt;- mpg[order(mpg$cty, -rank(mpg$class)), ] ## arrange 함수 사용 mpg_sortt &lt;- mpg %&gt;% arrange(cty, desc(class)) mpg_sortt %&gt;% print # A tibble: 234 x 11 manufacturer model displ year cyl trans drv cty hwy fl class &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; 1 dodge durango ~ 4.7 2008 8 auto(~ 4 9 12 e suv 2 jeep grand ch~ 4.7 2008 8 auto(~ 4 9 12 e suv 3 dodge dakota p~ 4.7 2008 8 auto(~ 4 9 12 e pick~ 4 dodge ram 1500~ 4.7 2008 8 auto(~ 4 9 12 e pick~ 5 dodge ram 1500~ 4.7 2008 8 manua~ 4 9 12 e pick~ 6 chevrolet c1500 su~ 5.3 2008 8 auto(~ r 11 15 e suv 7 chevrolet k1500 ta~ 5.3 2008 8 auto(~ 4 11 14 e suv 8 chevrolet k1500 ta~ 5.7 1999 8 auto(~ 4 11 15 r suv 9 dodge durango ~ 5.2 1999 8 auto(~ 4 11 16 r suv 10 dodge durango ~ 5.9 1999 8 auto(~ 4 11 15 r suv # ... with 224 more rows # 두 데이터 셋 동일성 여부 identical(mpg_sortb, mpg_sortt) [1] TRUE 4.4.4 select() 열(변수) 조작 동사 데이터셋을 구성하는 열(column, variable)을 선택하는 함수 Figure 4.5: select() 함수 다이어그램 select( data, # 데이터 프레임 또는 티블 객체 var_name1, # 변수 이름 (따옴표 없이도 가능) var_name2, ... ) # 제조사(manufacturer), 모델명(model), 배기량(displ) # 제조년도(year), 시내연비 (cty)만 추출 ## 기본 R 문법 이용한 변수 추출 glimpse(mpg[, c(&quot;manufacturer&quot;, &quot;model&quot;, &quot;displ&quot;, &quot;year&quot;, &quot;cty&quot;)]) Rows: 234 Columns: 5 $ manufacturer &lt;chr&gt; &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;... $ model &lt;chr&gt; &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4 quattro&quot;... $ displ &lt;dbl&gt; 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0,... $ year &lt;int&gt; 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1999, ... $ cty &lt;int&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17... # glimpse(mpg[, c(1:4, 8)]) # glimpse(mpg[, names(mpg) %in% c(&quot;manufacturer&quot;, &quot;displ&quot;, &quot;model&quot;, # &quot;year&quot;, &quot;cty&quot;)]) ## select() 함수 이용 ### 아래 스크립트는 모두 동일한 결과를 반환 # mpg %&gt;% select(1:4, 8) # # mpg %&gt;% # select(c(&quot;manufacturer&quot;, &quot;model&quot;, &quot;displ&quot;, &quot;year&quot;, &quot;cty&quot;)) mpg %&gt;% select(&quot;manufacturer&quot;, &quot;model&quot;, &quot;displ&quot;, &quot;year&quot;, &quot;cty&quot;) %&gt;% glimpse Rows: 234 Columns: 5 $ manufacturer &lt;chr&gt; &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;... $ model &lt;chr&gt; &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4 quattro&quot;... $ displ &lt;dbl&gt; 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0,... $ year &lt;int&gt; 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1999, ... $ cty &lt;int&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17... R 기본 문법과 차이점 선택하고자 하는 변수 입력 시 따옴표가 필요 없음 : 연산자를 이용해 선택 변수의 범위 지정 가능 - 연산자를 이용해 선택 변수 제거 # 제조사(manufacturer), 모델명(model), 배기량(displ) # 제조년도(year), 시내연비 (cty)만 추출 ## select() 따옴표 없이 변수명 입력 mpg %&gt;% select(manufacturer, model, displ, year, cty) %&gt;% glimpse Rows: 234 Columns: 5 $ manufacturer &lt;chr&gt; &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;... $ model &lt;chr&gt; &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4 quattro&quot;... $ displ &lt;dbl&gt; 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0,... $ year &lt;int&gt; 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1999, ... $ cty &lt;int&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17... ## : 연산자로 변수 범위 지정 mpg %&gt;% select(manufacturer:year, cty) %&gt;% glimpse Rows: 234 Columns: 5 $ manufacturer &lt;chr&gt; &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;... $ model &lt;chr&gt; &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4 quattro&quot;... $ displ &lt;dbl&gt; 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0,... $ year &lt;int&gt; 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1999, ... $ cty &lt;int&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17... ## 관심 없는 열을 -로 제외 가능 mpg %&gt;% select(-cyl, -trans, -drv, -hwy, -fl, -class) %&gt;% glimpse Rows: 234 Columns: 5 $ manufacturer &lt;chr&gt; &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;... $ model &lt;chr&gt; &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4 quattro&quot;... $ displ &lt;dbl&gt; 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0,... $ year &lt;int&gt; 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1999, ... $ cty &lt;int&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17... ## 조금 더 간결하게 (`:`와 `-` 연산 조합) mpg %&gt;% select(-cyl:-drv, -hwy:-class) %&gt;% glimpse Rows: 234 Columns: 5 $ manufacturer &lt;chr&gt; &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;... $ model &lt;chr&gt; &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4 quattro&quot;... $ displ &lt;dbl&gt; 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0,... $ year &lt;int&gt; 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1999, ... $ cty &lt;int&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17... ### 동일한 기능: -는 괄호로 묶을 수 있음 mpg %&gt;% select(-(cyl:drv), -(hwy:class)) %&gt;% glimpse Rows: 234 Columns: 5 $ manufacturer &lt;chr&gt; &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;... $ model &lt;chr&gt; &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4 quattro&quot;... $ displ &lt;dbl&gt; 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0,... $ year &lt;int&gt; 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1999, ... $ cty &lt;int&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17... # select() 함수를 이용해 변수명 변경 가능 mpg %&gt;% select(city_mpg = cty) %&gt;% glimpse Rows: 234 Columns: 1 $ city_mpg &lt;int&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17, 15... select()와 조합 시 유용한 선택 함수 starts_with(\"abc\"): “abc”로 시작하는 변수 선택 ends_with(\"xyz\"): “xyz”로 끝나는 변수 선택 contains(\"def\"): “def”를 포함하는 변수 선택 matches(\"^F[0-9]\"): 정규표현식과 일치하는 변수 선택. “F”와 한 자리 숫자로 시작하는 변수 선택 everything(): select() 함수 내에서 미리 선택한 변수를 제외한 모든 변수 선택 # &quot;m&quot;으로 시작하는 변수 제거 ## 기존 select() 함수 사용 mpg %&gt;% select(-manufacturer, -model) %&gt;% glimpse Rows: 234 Columns: 9 $ displ &lt;dbl&gt; 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0, 2.8, 2... $ year &lt;int&gt; 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1999, 2008, 2... $ cyl &lt;int&gt; 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 8, 8, 8, 8... $ trans &lt;chr&gt; &quot;auto(l5)&quot;, &quot;manual(m5)&quot;, &quot;manual(m6)&quot;, &quot;auto(av)&quot;, &quot;auto(l5)... $ drv &lt;chr&gt; &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;4&quot;, &quot;4&quot;, &quot;4&quot;, &quot;4&quot;, &quot;4&quot;, &quot;... $ cty &lt;int&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17, 15, 1... $ hwy &lt;int&gt; 29, 29, 31, 30, 26, 26, 27, 26, 25, 28, 27, 25, 25, 25, 25, 2... $ fl &lt;chr&gt; &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;... $ class &lt;chr&gt; &quot;compact&quot;, &quot;compact&quot;, &quot;compact&quot;, &quot;compact&quot;, &quot;compact&quot;, &quot;compa... ## select() + starts_with() 함수 사용 mpg %&gt;% select(-starts_with(&quot;m&quot;)) %&gt;% glimpse Rows: 234 Columns: 9 $ displ &lt;dbl&gt; 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0, 2.8, 2... $ year &lt;int&gt; 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1999, 2008, 2... $ cyl &lt;int&gt; 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 8, 8, 8, 8... $ trans &lt;chr&gt; &quot;auto(l5)&quot;, &quot;manual(m5)&quot;, &quot;manual(m6)&quot;, &quot;auto(av)&quot;, &quot;auto(l5)... $ drv &lt;chr&gt; &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;4&quot;, &quot;4&quot;, &quot;4&quot;, &quot;4&quot;, &quot;4&quot;, &quot;... $ cty &lt;int&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17, 15, 1... $ hwy &lt;int&gt; 29, 29, 31, 30, 26, 26, 27, 26, 25, 28, 27, 25, 25, 25, 25, 2... $ fl &lt;chr&gt; &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;... $ class &lt;chr&gt; &quot;compact&quot;, &quot;compact&quot;, &quot;compact&quot;, &quot;compact&quot;, &quot;compact&quot;, &quot;compa... # &quot;l&quot;로 끝나는 변수 선택: ends_with() 함수 사용 mpg %&gt;% select(ends_with(&quot;l&quot;)) %&gt;% glimpse Rows: 234 Columns: 4 $ model &lt;chr&gt; &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4 quattro&quot;, &quot;a4 q... $ displ &lt;dbl&gt; 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0, 2.8, 2... $ cyl &lt;int&gt; 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 8, 8, 8, 8... $ fl &lt;chr&gt; &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;... # dplyr 내장 데이터: starwars에서 이름, 성별, &quot;color&quot;를 포함하는 변수 선택 ## contains() 함수 사용 starwars %&gt;% select(name, gender, contains(&quot;color&quot;)) %&gt;% head # 다시 mpg 데이터... ## 맨 마지막 문자가 &quot;y&quot;로 끝나는 변수 선택(제조사, 모델 포함) ## matches() 사용 mpg %&gt;% select(starts_with(&quot;m&quot;), matches(&quot;y$&quot;)) %&gt;% glimpse Rows: 234 Columns: 4 $ manufacturer &lt;chr&gt; &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;... $ model &lt;chr&gt; &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4 quattro&quot;... $ cty &lt;int&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17... $ hwy &lt;int&gt; 29, 29, 31, 30, 26, 26, 27, 26, 25, 28, 27, 25, 25, 25... # cty, hwy 변수를 각각 1-2 번째 열에 위치 mpg %&gt;% select(matches(&quot;y$&quot;), everything()) %&gt;% glimpse Rows: 234 Columns: 11 $ cty &lt;int&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17... $ hwy &lt;int&gt; 29, 29, 31, 30, 26, 26, 27, 26, 25, 28, 27, 25, 25, 25... $ manufacturer &lt;chr&gt; &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;... $ model &lt;chr&gt; &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4 quattro&quot;... $ displ &lt;dbl&gt; 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0,... $ year &lt;int&gt; 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1999, ... $ cyl &lt;int&gt; 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 8, ... $ trans &lt;chr&gt; &quot;auto(l5)&quot;, &quot;manual(m5)&quot;, &quot;manual(m6)&quot;, &quot;auto(av)&quot;, &quot;a... $ drv &lt;chr&gt; &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;4&quot;, &quot;4&quot;, &quot;4&quot;, &quot;4&quot;,... $ fl &lt;chr&gt; &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;,... $ class &lt;chr&gt; &quot;compact&quot;, &quot;compact&quot;, &quot;compact&quot;, &quot;compact&quot;, &quot;compact&quot;,... 4.4.5 mutate() 열(변수) 조작 동사: 새로운 열을 추가하는 함수로 기본 R 문법의 data$new_variable &lt;- value 와 유사한 기능을 함 주어진 데이터 셋(데이터 프레임)에 이미 존재하고 있는 변수를 이용해 새로운 값 변환 시 유용 새로 만든 열을 mutate() 함수 내에서 사용 가능 \\(\\rightarrow\\) R base 패키지에서 재공하는 transform() 함수는 mutate() 함수와 거의 동일한 기능을 하지만, transform() 함수 내에서 생성한 변수의 재사용이 불가능 Figure 4.6: mutate() 함수 다이어그램 # mpg 데이터 셋의 연비 단위는 miles/gallon으로 입력 -&gt; kmh/l 로 변환 mile &lt;- 1.61 #km gallon &lt;- 3.79 #litres kpl &lt;- mile/gallon ## 기본 R 문법 glimpse(transform(mpg, cty_kpl = cty * kpl, hwy_kpl = hwy * kpl)) Rows: 234 Columns: 13 $ manufacturer &lt;chr&gt; &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;... $ model &lt;chr&gt; &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4 quattro&quot;... $ displ &lt;dbl&gt; 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0,... $ year &lt;int&gt; 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1999, ... $ cyl &lt;int&gt; 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 8, ... $ trans &lt;chr&gt; &quot;auto(l5)&quot;, &quot;manual(m5)&quot;, &quot;manual(m6)&quot;, &quot;auto(av)&quot;, &quot;a... $ drv &lt;chr&gt; &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;4&quot;, &quot;4&quot;, &quot;4&quot;, &quot;4&quot;,... $ cty &lt;int&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17... $ hwy &lt;int&gt; 29, 29, 31, 30, 26, 26, 27, 26, 25, 28, 27, 25, 25, 25... $ fl &lt;chr&gt; &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;,... $ class &lt;chr&gt; &quot;compact&quot;, &quot;compact&quot;, &quot;compact&quot;, &quot;compact&quot;, &quot;compact&quot;,... $ cty_kpl &lt;dbl&gt; 7.646438, 8.920844, 8.496042, 8.920844, 6.796834, 7.64... $ hwy_kpl &lt;dbl&gt; 12.319261, 12.319261, 13.168865, 12.744063, 11.044855,... ## tidyverse 문법 mpg %&gt;% mutate(cty_kpl = cty*kpl, hwy_kpl = hwy*kpl) %&gt;% glimpse Rows: 234 Columns: 13 $ manufacturer &lt;chr&gt; &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;... $ model &lt;chr&gt; &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4 quattro&quot;... $ displ &lt;dbl&gt; 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0,... $ year &lt;int&gt; 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1999, ... $ cyl &lt;int&gt; 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 8, ... $ trans &lt;chr&gt; &quot;auto(l5)&quot;, &quot;manual(m5)&quot;, &quot;manual(m6)&quot;, &quot;auto(av)&quot;, &quot;a... $ drv &lt;chr&gt; &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;4&quot;, &quot;4&quot;, &quot;4&quot;, &quot;4&quot;,... $ cty &lt;int&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17... $ hwy &lt;int&gt; 29, 29, 31, 30, 26, 26, 27, 26, 25, 28, 27, 25, 25, 25... $ fl &lt;chr&gt; &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;,... $ class &lt;chr&gt; &quot;compact&quot;, &quot;compact&quot;, &quot;compact&quot;, &quot;compact&quot;, &quot;compact&quot;,... $ cty_kpl &lt;dbl&gt; 7.646438, 8.920844, 8.496042, 8.920844, 6.796834, 7.64... $ hwy_kpl &lt;dbl&gt; 12.319261, 12.319261, 13.168865, 12.744063, 11.044855,... # 새로 생성한 변수를 이용해 변환 변수를 원래 단위로 바꿔보기 ## R 기본 문법: transform() 사용 glimpse(transform(mpg, cty_kpl = cty * kpl, hwy_kpl = hwy * kpl, cty_raw = cty_kpl/kpl, hwy_raw = hwy_kpl/kpl, )) Error in eval(substitute(list(...)), `_data`, parent.frame()): 객체 &#39;cty_kpl&#39;를 찾을 수 없습니다 ## Tidyverse 문법 mpg %&gt;% mutate(cty_kpl = cty*kpl, hwy_kpl = hwy*kpl, cty_raw = cty_kpl/kpl, hwy_raw = hwy_kpl/kpl) %&gt;% glimpse Rows: 234 Columns: 15 $ manufacturer &lt;chr&gt; &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;... $ model &lt;chr&gt; &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4 quattro&quot;... $ displ &lt;dbl&gt; 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0,... $ year &lt;int&gt; 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1999, ... $ cyl &lt;int&gt; 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 8, ... $ trans &lt;chr&gt; &quot;auto(l5)&quot;, &quot;manual(m5)&quot;, &quot;manual(m6)&quot;, &quot;auto(av)&quot;, &quot;a... $ drv &lt;chr&gt; &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;4&quot;, &quot;4&quot;, &quot;4&quot;, &quot;4&quot;,... $ cty &lt;int&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17... $ hwy &lt;int&gt; 29, 29, 31, 30, 26, 26, 27, 26, 25, 28, 27, 25, 25, 25... $ fl &lt;chr&gt; &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;,... $ class &lt;chr&gt; &quot;compact&quot;, &quot;compact&quot;, &quot;compact&quot;, &quot;compact&quot;, &quot;compact&quot;,... $ cty_kpl &lt;dbl&gt; 7.646438, 8.920844, 8.496042, 8.920844, 6.796834, 7.64... $ hwy_kpl &lt;dbl&gt; 12.319261, 12.319261, 13.168865, 12.744063, 11.044855,... $ cty_raw &lt;dbl&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17... $ hwy_raw &lt;dbl&gt; 29, 29, 31, 30, 26, 26, 27, 26, 25, 28, 27, 25, 25, 25... 4.4.6 transmute() 열(변수) 조작 동사: mutate()와 유사한 기능을 하지만 추가 또는 변환된 변수만 반환 `연비` &lt;- mpg %&gt;% transmute(cty_kpl = cty*kpl, hwy_kpl = hwy*kpl, cty_raw = cty_kpl/kpl, hwy_raw = hwy_kpl/kpl) `연비` %&gt;% print # A tibble: 234 x 4 cty_kpl hwy_kpl cty_raw hwy_raw &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 7.65 12.3 18 29 2 8.92 12.3 21 29 3 8.50 13.2 20 31. 4 8.92 12.7 21 30 5 6.80 11.0 16 26 6 7.65 11.0 18 26 7 7.65 11.5 18 27 8 7.65 11.0 18 26 9 6.80 10.6 16 25 10 8.50 11.9 20 28 # ... with 224 more rows 4.4.7 summarise() 변수 요약 및 집계: 변수를 집계하는 함수로 R stat 패키지(R 처음 실행 시 기본으로 불러오는 패키지 중 하나)의 aggregate() 함수와 유사한 기능을 함 보통 mean(), sd(), var(), median(), min(), max() 등 요약 통계량을 반환하는 함수와 같이 사용 데이터 프레임(티블) 객체 반환 변수의 모든 레코드에 집계 함수를 적용하므로 summarise()만 단일로 사용하면 1개의 행만 반환 Figure 4.7: summarise() 함수 다이어그램 # cty, hwy의 평균과 표준편차 계산 mpg %&gt;% summarise(mean_cty = mean(cty), sd_cty = sd(cty), mean_hwy = mean(hwy), sd_hwy = sd(hwy)) 4.4.8 group_by() 행(row, case, observation) 그룹화 보통 summarise() 함수는 aggregate()함수와 유사하게 그룹 별 요약 통계량을 계산할 때 주로 사용됨 group_by()는 “주어진 그룹에 따라(by group)”, 즉 지정한 그룹(변수) 별 연산을 지정 Figure 4.8: group_by() 함수 다이어그램 # 모델, 년도에 따른 cty, hwy 평균 계산 by_mpg &lt;- group_by(mpg, model, year) ## 그룹 지정 check by_mpg %&gt;% head %&gt;% print # A tibble: 6 x 11 # Groups: model, year [2] manufacturer model displ year cyl trans drv cty hwy fl class &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; 1 audi a4 1.8 1999 4 auto(l5) f 18 29 p compa~ 2 audi a4 1.8 1999 4 manual(m5) f 21 29 p compa~ 3 audi a4 2 2008 4 manual(m6) f 20 31 p compa~ 4 audi a4 2 2008 4 auto(av) f 21 30 p compa~ 5 audi a4 2.8 1999 6 auto(l5) f 16 26 p compa~ 6 audi a4 2.8 1999 6 manual(m5) f 18 26 p compa~ ## 통계량 계산 by_mpg %&gt;% summarise(mean_cty = mean(cty), mean_hwy = mean(hwy)) %&gt;% print # A tibble: 76 x 4 # Groups: model [38] model year mean_cty mean_hwy &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; 1 4runner 4wd 1999 15.2 19 2 4runner 4wd 2008 15 18.5 3 a4 1999 18.2 27.5 4 a4 2008 19.7 29.3 5 a4 quattro 1999 16.5 25.2 6 a4 quattro 2008 17.8 26.2 7 a6 quattro 1999 15 24 8 a6 quattro 2008 16.5 24 9 altima 1999 20 28 10 altima 2008 21 29 # ... with 66 more rows ## by_group() chain 연결 mean_mpg &lt;- mpg %&gt;% group_by(model, year) %&gt;% summarise(mean_cty = mean(cty), mean_hwy = mean(hwy)) group_by() 이후 적용되는 동사는 모두 그룹 별 연산 수행 # 제조사 별 시내연비가 낮은 순으로 정렬 audi &lt;- mpg %&gt;% group_by(manufacturer) %&gt;% arrange(cty) %&gt;% filter(manufacturer == &quot;audi&quot;) audi %&gt;% print # A tibble: 18 x 11 # Groups: manufacturer [1] manufacturer model displ year cyl trans drv cty hwy fl class &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; 1 audi a4 quat~ 2.8 1999 6 auto(l~ 4 15 25 p comp~ 2 audi a4 quat~ 3.1 2008 6 manual~ 4 15 25 p comp~ 3 audi a6 quat~ 2.8 1999 6 auto(l~ 4 15 24 p mids~ 4 audi a4 2.8 1999 6 auto(l~ f 16 26 p comp~ 5 audi a4 quat~ 1.8 1999 4 auto(l~ 4 16 25 p comp~ 6 audi a6 quat~ 4.2 2008 8 auto(s~ 4 16 23 p mids~ 7 audi a4 quat~ 2.8 1999 6 manual~ 4 17 25 p comp~ 8 audi a4 quat~ 3.1 2008 6 auto(s~ 4 17 25 p comp~ 9 audi a6 quat~ 3.1 2008 6 auto(s~ 4 17 25 p mids~ 10 audi a4 1.8 1999 4 auto(l~ f 18 29 p comp~ 11 audi a4 2.8 1999 6 manual~ f 18 26 p comp~ 12 audi a4 3.1 2008 6 auto(a~ f 18 27 p comp~ 13 audi a4 quat~ 1.8 1999 4 manual~ 4 18 26 p comp~ 14 audi a4 quat~ 2 2008 4 auto(s~ 4 19 27 p comp~ 15 audi a4 2 2008 4 manual~ f 20 31 p comp~ 16 audi a4 quat~ 2 2008 4 manual~ 4 20 28 p comp~ 17 audi a4 1.8 1999 4 manual~ f 21 29 p comp~ 18 audi a4 2 2008 4 auto(a~ f 21 30 p comp~ 그룹화된 데이터셋을 다시 그룹화 하지 않은 원래 데이터셋으로 변경할 때 ungroup() 함수를 사용 4.4.9 dplyr 관련 유용한 함수 데이터 핸들링 시 dplyr 기본 함수와 같이 사용되는 함수 모음 slice() 행(row, case, observation) 조작 동사: filter()의 특별한 케이스로 데이터의 색인을 직접 설정하여 원하는 row 추출 # 1 ~ 8행에 해당하는 데이터 추출 slice_mpg &lt;- mpg %&gt;% slice(1:8) slice_mpg %&gt;% print # A tibble: 8 x 11 manufacturer model displ year cyl trans drv cty hwy fl class &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; 1 audi a4 1.8 1999 4 auto(l~ f 18 29 p compa~ 2 audi a4 1.8 1999 4 manual~ f 21 29 p compa~ 3 audi a4 2 2008 4 manual~ f 20 31 p compa~ 4 audi a4 2 2008 4 auto(a~ f 21 30 p compa~ 5 audi a4 2.8 1999 6 auto(l~ f 16 26 p compa~ 6 audi a4 2.8 1999 6 manual~ f 18 26 p compa~ 7 audi a4 3.1 2008 6 auto(a~ f 18 27 p compa~ 8 audi a4 quat~ 1.8 1999 4 manual~ 4 18 26 p compa~ # 각 모델 별 첫 번째 데이터만 추출 slice_mpg_grp &lt;- mpg %&gt;% group_by(model) %&gt;% slice(1) %&gt;% arrange(model) slice_mpg_grp %&gt;% print # A tibble: 38 x 11 # Groups: model [38] manufacturer model displ year cyl trans drv cty hwy fl class &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; 1 toyota 4runner~ 2.7 1999 4 manua~ 4 15 20 r suv 2 audi a4 1.8 1999 4 auto(~ f 18 29 p compa~ 3 audi a4 quat~ 1.8 1999 4 manua~ 4 18 26 p compa~ 4 audi a6 quat~ 2.8 1999 6 auto(~ 4 15 24 p midsi~ 5 nissan altima 2.4 1999 4 manua~ f 21 29 r compa~ 6 chevrolet c1500 s~ 5.3 2008 8 auto(~ r 14 20 r suv 7 toyota camry 2.2 1999 4 manua~ f 21 29 r midsi~ 8 toyota camry s~ 2.2 1999 4 auto(~ f 21 27 r compa~ 9 dodge caravan~ 2.4 1999 4 auto(~ f 18 24 r miniv~ 10 honda civic 1.6 1999 4 manua~ f 28 33 r subco~ # ... with 28 more rows top_n() 행(row, case, observation) 조작 동사: 선택한 변수를 기준으로 상위 n 개의 데이터(행)만 추출 # mpg 데이터에서 시내 연비가 높은 데이터 5개 추출 mpg %&gt;% top_n(5, cty) %&gt;% arrange(desc(cty)) distinct() 행(row, case, observation) 조작 동사: 선택한 변수를 기준으로 중복 없는 유일한(unique)한 행 추출 시 사용 R base 패키지의 unique() 또는 unqiue.data.frame()과 유사하게 작동하지만 처리 속도 면에서 뛰어남 # mpg 데이터에서 중복데이터 제거 (모든 열 기준) mpg_uniq &lt;- mpg %&gt;% distinct() mpg_uniq %&gt;% print # A tibble: 225 x 11 manufacturer model displ year cyl trans drv cty hwy fl class &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; 1 audi a4 1.8 1999 4 auto(l~ f 18 29 p comp~ 2 audi a4 1.8 1999 4 manual~ f 21 29 p comp~ 3 audi a4 2 2008 4 manual~ f 20 31 p comp~ 4 audi a4 2 2008 4 auto(a~ f 21 30 p comp~ 5 audi a4 2.8 1999 6 auto(l~ f 16 26 p comp~ 6 audi a4 2.8 1999 6 manual~ f 18 26 p comp~ 7 audi a4 3.1 2008 6 auto(a~ f 18 27 p comp~ 8 audi a4 quat~ 1.8 1999 4 manual~ 4 18 26 p comp~ 9 audi a4 quat~ 1.8 1999 4 auto(l~ 4 16 25 p comp~ 10 audi a4 quat~ 2 2008 4 manual~ 4 20 28 p comp~ # ... with 215 more rows # model을 기준으로 중복 데이터 제거 mpg_uniq2 &lt;- mpg %&gt;% distinct(model, .keep_all = TRUE) %&gt;% arrange(model) mpg_uniq2 %&gt;% head(6) %&gt;% print # A tibble: 6 x 11 manufacturer model displ year cyl trans drv cty hwy fl class &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; 1 toyota 4runner ~ 2.7 1999 4 manual~ 4 15 20 r suv 2 audi a4 1.8 1999 4 auto(l~ f 18 29 p comp~ 3 audi a4 quatt~ 1.8 1999 4 manual~ 4 18 26 p comp~ 4 audi a6 quatt~ 2.8 1999 6 auto(l~ 4 15 24 p mids~ 5 nissan altima 2.4 1999 4 manual~ f 21 29 r comp~ 6 chevrolet c1500 su~ 5.3 2008 8 auto(l~ r 14 20 r suv # 위 그룹별 slice(1) 예제와 비교 identical(slice_mpg_grp %&gt;% ungroup, mpg_uniq2) [1] TRUE sample_n()/sample_frac() 행(row, case, observation) 조작 동사: 데이터의 행을 랜덤하게 추출하는 함수 sample_(n): 전체 \\(N\\) 행에서 \\(n\\) 행을 랜덤하게 추출 sample_frac(p): 전체 \\(N\\) 행에서 비율 \\(p\\) (\\(0\\leq p \\leq1\\)) 만큼 추출 # 전체 234개 행에서 3개 행을 랜덤하게 추출 mpg %&gt;% sample_n(3) # 전체 234개 행의 5%에 해당하는 행을 랜덤하게 추출 mpg %&gt;% sample_frac(0.05) rename() 열(변수) 조작 동사: 변수의 이름을 변경하는 함수 rename(new_variable_name = old_variable_name) 형태로 변경 # 변수명 변셩 ## R 기본 문법으로 변수명 변경 varn_mpg &lt;- names(mpg) # 원 변수명 저장 names(mpg)[5] &lt;- &quot;cylinder&quot; # cyl을 cylinder로 변셩 names(mpg) &lt;- varn_mpg # ## Tidyverse 문법: rename() 사용 mpg %&gt;% rename(cylinder = cyl) %&gt;% head %&gt;% print # A tibble: 6 x 11 manufacturer model displ year cylinder trans drv cty hwy fl class &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; 1 audi a4 1.8 1999 4 auto(l5) f 18 29 p comp~ 2 audi a4 1.8 1999 4 manual(~ f 21 29 p comp~ 3 audi a4 2 2008 4 manual(~ f 20 31 p comp~ 4 audi a4 2 2008 4 auto(av) f 21 30 p comp~ 5 audi a4 2.8 1999 6 auto(l5) f 16 26 p comp~ 6 audi a4 2.8 1999 6 manual(~ f 18 26 p comp~ ## cty를 city_mpg, hwy를 hw_mpg로 변경 mpg %&gt;% rename(city_mpg = cty, hw_mpg = hwy) %&gt;% print # A tibble: 234 x 11 manufacturer model displ year cyl trans drv city_mpg hw_mpg fl class &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; 1 audi a4 1.8 1999 4 auto~ f 18 29 p comp~ 2 audi a4 1.8 1999 4 manu~ f 21 29 p comp~ 3 audi a4 2 2008 4 manu~ f 20 31 p comp~ 4 audi a4 2 2008 4 auto~ f 21 30 p comp~ 5 audi a4 2.8 1999 6 auto~ f 16 26 p comp~ 6 audi a4 2.8 1999 6 manu~ f 18 26 p comp~ 7 audi a4 3.1 2008 6 auto~ f 18 27 p comp~ 8 audi a4 qu~ 1.8 1999 4 manu~ 4 18 26 p comp~ 9 audi a4 qu~ 1.8 1999 4 auto~ 4 16 25 p comp~ 10 audi a4 qu~ 2 2008 4 manu~ 4 20 28 p comp~ # ... with 224 more rows Count 관련 동사(함수) 데이터셋의 행 개수를 집계하는 함수들로 데이터 요약 시 유용하게 사용 tally() 총계, 행의 개수를 반환하는 함수3 데이터 프레임(티블) 객체 반환 # 전체 행 개수 (nrow(data))와 유사 mpg %&gt;% tally %&gt;% print # A tibble: 1 x 1 n &lt;int&gt; 1 234 # 제조사, 년도별 데이터 개수 mpg %&gt;% group_by(manufacturer, year) %&gt;% tally %&gt;% ungroup %&gt;% print # A tibble: 30 x 3 manufacturer year n &lt;chr&gt; &lt;int&gt; &lt;int&gt; 1 audi 1999 9 2 audi 2008 9 3 chevrolet 1999 7 4 chevrolet 2008 12 5 dodge 1999 16 6 dodge 2008 21 7 ford 1999 15 8 ford 2008 10 9 honda 1999 5 10 honda 2008 4 # ... with 20 more rows count() tally() 함수와 유사하나 개수 집계 전 group_by()와 집계 후 ungroup()을 실행 # 제조사, 년도별 데이터 개수: tally() 예시와 비교 mpg %&gt;% count(manufacturer, year) %&gt;% print # A tibble: 30 x 3 manufacturer year n &lt;chr&gt; &lt;int&gt; &lt;int&gt; 1 audi 1999 9 2 audi 2008 9 3 chevrolet 1999 7 4 chevrolet 2008 12 5 dodge 1999 16 6 dodge 2008 21 7 ford 1999 15 8 ford 2008 10 9 honda 1999 5 10 honda 2008 4 # ... with 20 more rows n() 위에서 소개한 함수와 유사하게 행 개수를 반환하지만, 기본 동사(summarise(), mutate(), filter()) 내에서만 사용 # 제조사, 년도에 따른 배기량, 시내연비의 평균 계산(그룹 별 n 포함) mpg %&gt;% group_by(manufacturer, year) %&gt;% summarise( N = n(), mean_displ = mean(displ), mean_hwy = mean(cty)) %&gt;% print # A tibble: 30 x 5 # Groups: manufacturer [15] manufacturer year N mean_displ mean_hwy &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; 1 audi 1999 9 2.36 17.1 2 audi 2008 9 2.73 18.1 3 chevrolet 1999 7 4.97 15.1 4 chevrolet 2008 12 5.12 14.9 5 dodge 1999 16 4.32 13.4 6 dodge 2008 21 4.42 13.0 7 ford 1999 15 4.45 13.9 8 ford 2008 10 4.66 14.1 9 honda 1999 5 1.6 24.8 10 honda 2008 4 1.85 24 # ... with 20 more rows # mutate, filter에서 사용하는 경우 mpg %&gt;% group_by(manufacturer, year) %&gt;% mutate(N = n()) %&gt;% filter(n() &lt; 4) %&gt;% print # A tibble: 18 x 12 # Groups: manufacturer, year [9] manufacturer model displ year cyl trans drv cty hwy fl class &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; 1 jeep gran~ 4 1999 6 auto~ 4 15 20 r suv 2 jeep gran~ 4.7 1999 8 auto~ 4 14 17 r suv 3 land rover rang~ 4 1999 8 auto~ 4 11 15 p suv 4 land rover rang~ 4.2 2008 8 auto~ 4 12 18 r suv 5 land rover rang~ 4.4 2008 8 auto~ 4 12 18 r suv 6 land rover rang~ 4.6 1999 8 auto~ 4 11 15 p suv 7 lincoln navi~ 5.4 1999 8 auto~ r 11 17 r suv 8 lincoln navi~ 5.4 1999 8 auto~ r 11 16 p suv 9 lincoln navi~ 5.4 2008 8 auto~ r 12 18 r suv 10 mercury moun~ 4 1999 6 auto~ 4 14 17 r suv 11 mercury moun~ 4 2008 6 auto~ 4 13 19 r suv 12 mercury moun~ 4.6 2008 8 auto~ 4 13 19 r suv 13 mercury moun~ 5 1999 8 auto~ 4 13 17 r suv 14 pontiac gran~ 3.1 1999 6 auto~ f 18 26 r mids~ 15 pontiac gran~ 3.8 1999 6 auto~ f 16 26 p mids~ 16 pontiac gran~ 3.8 1999 6 auto~ f 17 27 r mids~ 17 pontiac gran~ 3.8 2008 6 auto~ f 18 28 r mids~ 18 pontiac gran~ 5.3 2008 8 auto~ f 16 25 p mids~ # ... with 1 more variable: N &lt;int&gt; 4.4.10 부가 기능 위에서 소개한 dplyr 패키지의 기본 동사 함수를 조금 더 효율적으로 사용(예: 특정 조건을 만족하는 두 개 이상의 변수에 함수 적용)하기 위한 범위 지정 함수로서 아래와 같은 부사(adverb), 접속사 또는 전치사가 본 동사 뒤에 붙음 *_all: 모든 변수에 적용 *_at: vars() 함수를 이용해 선택한 변수에 적용 *_if: 조건식 또는 조건 함수로 선택한 변수에 적용 여기서 * = {filter, arrange, select, rename, mutate, transmute, summarise, group_by} 적용할 변수들은 대명사(pronoun)로 지칭되며, .로 나타냄 vars()는 *_at 계열 함수 내에서 변수를 선택해주는 함수로 select() 함수와 동일한 문법으로 사용 가능(단독으로는 사용하지 않음) filter_all(), filter_at(), filter_if() filter_all():all_vars() 또는 any_vars() 라는 조건 함수와 같이 사용되며, 해당 함수 내에 변수는 대명사 .로 나타냄 filter_at(): 변수 선택 지시자 vars()와 vars()에서 선택한 변수에 적용할 조건식 또는 조건 함수를 인수로 받음. 조건식 설정 시 vars() 에 포함된 변수들은 대명사 . 으로 표시 filter_if(): 조건을 만족하는 변수들을 선택한 후, 선택한 변수들 중 모두 또는 하나라도 입력한 조건을 만족하는 행 추출 # mtcars 데이터셋 사용 ## filter_all() ### 모든 변수들이 100 보다 큰 케이스 추출 mtcars %&gt;% filter_all(all_vars(. &gt; 100)) %&gt;% print [1] mpg cyl disp hp drat wt qsec vs am gear carb &lt;0 행&gt; &lt;또는 row.names의 길이가 0입니다&gt; ### 모든 변수들 중 하나라도 300 보다 큰 케이스 추출 mtcars %&gt;% filter_all(any_vars(. &gt; 300)) %&gt;% print mpg cyl disp hp drat wt qsec vs am gear carb 1 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 2 14.3 8 360 245 3.21 3.570 15.84 0 0 3 4 3 10.4 8 472 205 2.93 5.250 17.98 0 0 3 4 4 10.4 8 460 215 3.00 5.424 17.82 0 0 3 4 5 14.7 8 440 230 3.23 5.345 17.42 0 0 3 4 6 15.5 8 318 150 2.76 3.520 16.87 0 0 3 2 7 15.2 8 304 150 3.15 3.435 17.30 0 0 3 2 8 13.3 8 350 245 3.73 3.840 15.41 0 0 3 4 9 19.2 8 400 175 3.08 3.845 17.05 0 0 3 2 10 15.8 8 351 264 4.22 3.170 14.50 0 1 5 4 11 15.0 8 301 335 3.54 3.570 14.60 0 1 5 8 ## filter_at() ### 기어 개수(gear)와 기화기 개수(carb)가 짝수인 케이스만 추출 mtcars %&gt;% filter_at(vars(gear, carb), ~ . %% 2 == 0) %&gt;% # 대명사 앞에 ~ 표시를 꼭 사용해야 함 print mpg cyl disp hp drat wt qsec vs am gear carb 1 21.0 6 160.0 110 3.90 2.620 16.46 0 1 4 4 2 21.0 6 160.0 110 3.90 2.875 17.02 0 1 4 4 3 24.4 4 146.7 62 3.69 3.190 20.00 1 0 4 2 4 22.8 4 140.8 95 3.92 3.150 22.90 1 0 4 2 5 19.2 6 167.6 123 3.92 3.440 18.30 1 0 4 4 6 17.8 6 167.6 123 3.92 3.440 18.90 1 0 4 4 7 30.4 4 75.7 52 4.93 1.615 18.52 1 1 4 2 8 21.4 4 121.0 109 4.11 2.780 18.60 1 1 4 2 ## filter_if() ### 내림한 값이 원래 값과 같은 변수들 모두 0이 아닌 케이스 추출 mtcars %&gt;% filter_if(~ all(floor(.) == .), all_vars(. != 0)) %&gt;% # filter_if(~ all(floor(.) == .), # ~ . != 0) %&gt;% print mpg cyl disp hp drat wt qsec vs am gear carb 1 22.8 4 108.0 93 3.85 2.320 18.61 1 1 4 1 2 32.4 4 78.7 66 4.08 2.200 19.47 1 1 4 1 3 30.4 4 75.7 52 4.93 1.615 18.52 1 1 4 2 4 33.9 4 71.1 65 4.22 1.835 19.90 1 1 4 1 5 27.3 4 79.0 66 4.08 1.935 18.90 1 1 4 1 6 30.4 4 95.1 113 3.77 1.513 16.90 1 1 5 2 7 21.4 4 121.0 109 4.11 2.780 18.60 1 1 4 2 select_all(), select_at(), select_if() 변수 선택과 변수명 변경을 동시에 수행 # select_all() 예시 ## mpg 데이터셋의 모든 변수명을 대문자로 변경 mpg %&gt;% select_all(~toupper(.)) %&gt;% print # A tibble: 234 x 11 MANUFACTURER MODEL DISPL YEAR CYL TRANS DRV CTY HWY FL CLASS &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; 1 audi a4 1.8 1999 4 auto(l~ f 18 29 p comp~ 2 audi a4 1.8 1999 4 manual~ f 21 29 p comp~ 3 audi a4 2 2008 4 manual~ f 20 31 p comp~ 4 audi a4 2 2008 4 auto(a~ f 21 30 p comp~ 5 audi a4 2.8 1999 6 auto(l~ f 16 26 p comp~ 6 audi a4 2.8 1999 6 manual~ f 18 26 p comp~ 7 audi a4 3.1 2008 6 auto(a~ f 18 27 p comp~ 8 audi a4 quat~ 1.8 1999 4 manual~ 4 18 26 p comp~ 9 audi a4 quat~ 1.8 1999 4 auto(l~ 4 16 25 p comp~ 10 audi a4 quat~ 2 2008 4 manual~ 4 20 28 p comp~ # ... with 224 more rows # select_if() 예시 ## 문자형 변수를 선택하고 선택한 변수의 이름을 대문자로 변경 mpg %&gt;% select_if(~ is.character(.), ~ toupper(.)) %&gt;% print # A tibble: 234 x 6 MANUFACTURER MODEL TRANS DRV FL CLASS &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; 1 audi a4 auto(l5) f p compact 2 audi a4 manual(m5) f p compact 3 audi a4 manual(m6) f p compact 4 audi a4 auto(av) f p compact 5 audi a4 auto(l5) f p compact 6 audi a4 manual(m5) f p compact 7 audi a4 auto(av) f p compact 8 audi a4 quattro manual(m5) 4 p compact 9 audi a4 quattro auto(l5) 4 p compact 10 audi a4 quattro manual(m6) 4 p compact # ... with 224 more rows # select_at() 예시 ## model에서 cty 까지 변수를 선택하고 선택한 변수명을 대문자로 변경 mpg %&gt;% select_at(vars(model:cty), ~ toupper(.)) %&gt;% print # A tibble: 234 x 7 MODEL DISPL YEAR CYL TRANS DRV CTY &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; 1 a4 1.8 1999 4 auto(l5) f 18 2 a4 1.8 1999 4 manual(m5) f 21 3 a4 2 2008 4 manual(m6) f 20 4 a4 2 2008 4 auto(av) f 21 5 a4 2.8 1999 6 auto(l5) f 16 6 a4 2.8 1999 6 manual(m5) f 18 7 a4 3.1 2008 6 auto(av) f 18 8 a4 quattro 1.8 1999 4 manual(m5) 4 18 9 a4 quattro 1.8 1999 4 auto(l5) 4 16 10 a4 quattro 2 2008 4 manual(m6) 4 20 # ... with 224 more rows mutate_all(), mutate_at(), mutate_if() 실제 데이터 전처리 시 가장 많이 사용 mutate_all(): 모든 변수에 적용(모든 데이터가 동일한 데이터 타입인 경우 유용) mutate_at(): 선택한 변수에 적용. vars() 함수로 선택 mutate_if(): 특정 조건을 만족하는 변수에 적용 # mutate_all() 예시 ## 문자형 변수를 선택 후 모든 변수를 요인형으로 변환 mpg %&gt;% select_if(~is.character(.)) %&gt;% mutate_all(~factor(.)) %&gt;% head %&gt;% print # A tibble: 6 x 6 manufacturer model trans drv fl class &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; 1 audi a4 auto(l5) f p compact 2 audi a4 manual(m5) f p compact 3 audi a4 manual(m6) f p compact 4 audi a4 auto(av) f p compact 5 audi a4 auto(l5) f p compact 6 audi a4 manual(m5) f p compact # mutate_at() 예시 ## cty, hwy 단위를 km/l로 변경 mpg %&gt;% mutate_at(vars(cty, hwy), ~ . * kpl) %&gt;% # 원래 변수를 변경 head %&gt;% print # A tibble: 6 x 11 manufacturer model displ year cyl trans drv cty hwy fl class &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; 1 audi a4 1.8 1999 4 auto(l5) f 7.65 12.3 p compa~ 2 audi a4 1.8 1999 4 manual(m5) f 8.92 12.3 p compa~ 3 audi a4 2 2008 4 manual(m6) f 8.50 13.2 p compa~ 4 audi a4 2 2008 4 auto(av) f 8.92 12.7 p compa~ 5 audi a4 2.8 1999 6 auto(l5) f 6.80 11.0 p compa~ 6 audi a4 2.8 1999 6 manual(m5) f 7.65 11.0 p compa~ ## &quot;m&quot;으로 시작하거나 &quot;s&quot;로 끝나는 변수 선택 후 요인형으로 변환 mpg %&gt;% mutate_at(vars(starts_with(&quot;m&quot;), ends_with(&quot;s&quot;)), ~ factor(.)) %&gt;% summary manufacturer model displ year dodge :37 caravan 2wd : 11 Min. :1.600 Min. :1999 toyota :34 ram 1500 pickup 4wd: 10 1st Qu.:2.400 1st Qu.:1999 volkswagen:27 civic : 9 Median :3.300 Median :2004 ford :25 dakota pickup 4wd : 9 Mean :3.472 Mean :2004 chevrolet :19 jetta : 9 3rd Qu.:4.600 3rd Qu.:2008 audi :18 mustang : 9 Max. :7.000 Max. :2008 (Other) :74 (Other) :177 cyl trans drv cty Min. :4.000 auto(l4) :83 Length:234 Min. : 9.00 1st Qu.:4.000 manual(m5):58 Class :character 1st Qu.:14.00 Median :6.000 auto(l5) :39 Mode :character Median :17.00 Mean :5.889 manual(m6):19 Mean :16.86 3rd Qu.:8.000 auto(s6) :16 3rd Qu.:19.00 Max. :8.000 auto(l6) : 6 Max. :35.00 (Other) :13 hwy fl class Min. :12.00 Length:234 2seater : 5 1st Qu.:18.00 Class :character compact :47 Median :24.00 Mode :character midsize :41 Mean :23.44 minivan :11 3rd Qu.:27.00 pickup :33 Max. :44.00 subcompact:35 suv :62 # mutate_if() 예시 ## 문자형 변수를 요인형으로 변환 mpg %&gt;% mutate_if(~ is.character(.), ~ factor(.)) %&gt;% summary manufacturer model displ year dodge :37 caravan 2wd : 11 Min. :1.600 Min. :1999 toyota :34 ram 1500 pickup 4wd: 10 1st Qu.:2.400 1st Qu.:1999 volkswagen:27 civic : 9 Median :3.300 Median :2004 ford :25 dakota pickup 4wd : 9 Mean :3.472 Mean :2004 chevrolet :19 jetta : 9 3rd Qu.:4.600 3rd Qu.:2008 audi :18 mustang : 9 Max. :7.000 Max. :2008 (Other) :74 (Other) :177 cyl trans drv cty hwy Min. :4.000 auto(l4) :83 4:103 Min. : 9.00 Min. :12.00 1st Qu.:4.000 manual(m5):58 f:106 1st Qu.:14.00 1st Qu.:18.00 Median :6.000 auto(l5) :39 r: 25 Median :17.00 Median :24.00 Mean :5.889 manual(m6):19 Mean :16.86 Mean :23.44 3rd Qu.:8.000 auto(s6) :16 3rd Qu.:19.00 3rd Qu.:27.00 Max. :8.000 auto(l6) : 6 Max. :35.00 Max. :44.00 (Other) :13 fl class c: 1 2seater : 5 d: 5 compact :47 e: 8 midsize :41 p: 52 minivan :11 r:168 pickup :33 subcompact:35 suv :62 summarise_all(), summarise_at(), summarise_if() 사용 방법은 mutate_all, mutate_at, mutate_all 과 동일 다중 변수 요약 시 코드를 효율적으로 작성할 수 있음. # summary_all() 예시 ## 모든 변수의 최솟값과 최댓값 요약 ## 문자형 변수는 알파벳 순으로 최솟값과 최댓값 반환 ## 복수의 함수를 적용 시 list()함수 사용 mpg %&gt;% summarise_all(list(min = ~ min(.), max = ~ max(.))) %&gt;% glimpse Rows: 1 Columns: 22 $ manufacturer_min &lt;chr&gt; &quot;audi&quot; $ model_min &lt;chr&gt; &quot;4runner 4wd&quot; $ displ_min &lt;dbl&gt; 1.6 $ year_min &lt;int&gt; 1999 $ cyl_min &lt;int&gt; 4 $ trans_min &lt;chr&gt; &quot;auto(av)&quot; $ drv_min &lt;chr&gt; &quot;4&quot; $ cty_min &lt;int&gt; 9 $ hwy_min &lt;int&gt; 12 $ fl_min &lt;chr&gt; &quot;c&quot; $ class_min &lt;chr&gt; &quot;2seater&quot; $ manufacturer_max &lt;chr&gt; &quot;volkswagen&quot; $ model_max &lt;chr&gt; &quot;toyota tacoma 4wd&quot; $ displ_max &lt;dbl&gt; 7 $ year_max &lt;int&gt; 2008 $ cyl_max &lt;int&gt; 8 $ trans_max &lt;chr&gt; &quot;manual(m6)&quot; $ drv_max &lt;chr&gt; &quot;r&quot; $ cty_max &lt;int&gt; 35 $ hwy_max &lt;int&gt; 44 $ fl_max &lt;chr&gt; &quot;r&quot; $ class_max &lt;chr&gt; &quot;suv&quot; # summary_at() 예시 ## dipl, cyl, cty, hwy에 대해 제조사 별 n수와 평균과 표준편차 계산 mpg %&gt;% add_count(manufacturer) %&gt;% # 행 집계 결과를 열 변수로 추가하는 함수 group_by(manufacturer, n) %&gt;% summarise_at(vars(displ, cyl, cty:hwy), list(mean = ~ mean(.), sd = ~ sd(.))) %&gt;% print # A tibble: 15 x 10 # Groups: manufacturer [15] manufacturer n displ_mean cyl_mean cty_mean hwy_mean displ_sd cyl_sd &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 audi 18 2.54 5.22 17.6 26.4 0.673 1.22 2 chevrolet 19 5.06 7.26 15 21.9 1.37 1.37 3 dodge 37 4.38 7.08 13.1 17.9 0.868 1.12 4 ford 25 4.54 7.2 14 19.4 0.541 1. 5 honda 9 1.71 4 24.4 32.6 0.145 0 6 hyundai 14 2.43 4.86 18.6 26.9 0.365 1.03 7 jeep 8 4.58 7.25 13.5 17.6 1.02 1.04 8 land rover 4 4.3 8 11.5 16.5 0.258 0 9 lincoln 3 5.4 8 11.3 17 0 0 10 mercury 4 4.4 7 13.2 18 0.490 1.15 11 nissan 13 3.27 5.54 18.1 24.6 0.864 1.20 12 pontiac 5 3.96 6.4 17 26.4 0.808 0.894 13 subaru 14 2.46 4 19.3 25.6 0.109 0 14 toyota 34 2.95 5.12 18.5 24.9 0.931 1.32 15 volkswagen 27 2.26 4.59 20.9 29.2 0.443 0.844 # ... with 2 more variables: cty_sd &lt;dbl&gt;, hwy_sd &lt;dbl&gt; # summary_if() 예시 ## 1) 문자형 변수이거나 모든 값이 1999보다 크거나 같은 변수이거나 ## 8보다 작거나 같고 정수인 변수를 factor 변환 ## 2) 수치형 변수에 대한 제조사 별 n, 평균, 표준편차를 구한 후 ## 3) 평균 cty (cty_mean) 기준 내림차순으로 정렬 mpg %&gt;% mutate_if(~ is.character(.) | all(. &gt;= 1999) | (all(. &lt;= 8) &amp; is.integer(.)), ~ factor(.)) %&gt;% add_count(manufacturer) %&gt;% group_by(manufacturer, n) %&gt;% summarise_if(~ is.numeric(.), list(mean = ~ mean(.), sd = ~ sd(.))) %&gt;% arrange(desc(cty_mean)) %&gt;% print # A tibble: 15 x 8 # Groups: manufacturer [15] manufacturer n displ_mean cty_mean hwy_mean displ_sd cty_sd hwy_sd &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 honda 9 1.71 24.4 32.6 0.145 1.94 2.55 2 volkswagen 27 2.26 20.9 29.2 0.443 4.56 5.32 3 subaru 14 2.46 19.3 25.6 0.109 0.914 1.16 4 hyundai 14 2.43 18.6 26.9 0.365 1.50 2.18 5 toyota 34 2.95 18.5 24.9 0.931 4.05 6.17 6 nissan 13 3.27 18.1 24.6 0.864 3.43 5.09 7 audi 18 2.54 17.6 26.4 0.673 1.97 2.18 8 pontiac 5 3.96 17 26.4 0.808 1 1.14 9 chevrolet 19 5.06 15 21.9 1.37 2.92 5.11 10 ford 25 4.54 14 19.4 0.541 1.91 3.33 11 jeep 8 4.58 13.5 17.6 1.02 2.51 3.25 12 mercury 4 4.4 13.2 18 0.490 0.5 1.15 13 dodge 37 4.38 13.1 17.9 0.868 2.49 3.57 14 land rover 4 4.3 11.5 16.5 0.258 0.577 1.73 15 lincoln 3 5.4 11.3 17 0 0.577 1 4.4.11 데이터 연결 분석용 데이터를 만들기 위해 연관된 복수의 데이터 테이블을 결합하는 작업이 필수임 서로 연결 또는 연관된 데이터를 관계형 데이터(relational data)라고 칭함 관계는 항상 한 쌍의 데이터 테이블 간의 관계로 정의 관계형 데이터 작업을 위해 설계된 3 가지 “동사” 유형 Mutating join: 두 데이터 프레임 결합 시 두 테이블 간 행이 일치하는 경우 첫 번째 테이블에 새로운 변수 추가 Filtering join: 다른 테이블의 관측치와 일치 여부에 따라 데이터 테이블의 행을 필터링 Set operation: 데이터 셋의 관측치를 집합 연산으로 조합 본 강의에서는 mutating join 에 대해서만 다룸 R base 패키지에서 제공하는 merge() 함수로 mutating join에 해당하는 두 데이터 간 병합이 가능하지만 앞으로 배울 *_join()로도 동일한 기능을 수행할 수 있고, 다음과 같은 장점을 가짐 행 순서를 보존 merge()에 비해 코드가 직관적이고 빠름 예제 데이터: nycflights13 (2013년 미국 New York에서 출발하는 항공기 이착륙 기록 데이터) flights, airlines, airports, planes, weather 총 5 개의 데이터 프레임으로 구성되어 있으며, 데이터 구조와 코드북은 다음과 같음 # install.packages(&quot;nycflights13&quot;) require(nycflights13) 필요한 패키지를 로딩중입니다: nycflights13 flights: 336,776 건의 비행에 대한 기록과 19개의 변수로 구성되어 있는 데이터셋 # A tibble: 336,776 x 19 year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; 1 2013 1 1 517 515 2 830 819 2 2013 1 1 533 529 4 850 830 3 2013 1 1 542 540 2 923 850 4 2013 1 1 544 545 -1 1004 1022 5 2013 1 1 554 600 -6 812 837 6 2013 1 1 554 558 -4 740 728 7 2013 1 1 555 600 -5 913 854 8 2013 1 1 557 600 -3 709 723 9 2013 1 1 557 600 -3 838 846 10 2013 1 1 558 600 -2 753 745 # ... with 336,766 more rows, and 11 more variables: arr_delay &lt;dbl&gt;, # carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, # air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt; Table 4.3: flights 데이터셋 코드북 변수 설명 year, month, day 출발년도, 월, 일 dep_time, arr_time 실제 출발-도착 시간(현지시각) sched_dep_time, sched_arr_time 예정 출발-도착 시간(현지시각) dep_delay, arr_delay 출발 및 도착 지연 시간(분, min) carrier 항공코드 약어(두개 문자) tailnum 비행기 일련 번호 flight 항공편 번호 origin, dest 최초 출발지, 목적지 air_time 비행 시간(분, min) distance 비행 거리(마일, mile) hour, minutes 예정 출발 시각(시, 분)으로 분리 time_hour POSIXct 포맷으로로 기록된 예정 항공편 날짜 및 시간 airlines: 항공사 이름 및 약어 정보로 구성 # A tibble: 16 x 2 carrier name &lt;chr&gt; &lt;chr&gt; 1 9E Endeavor Air Inc. 2 AA American Airlines Inc. 3 AS Alaska Airlines Inc. 4 B6 JetBlue Airways 5 DL Delta Air Lines Inc. 6 EV ExpressJet Airlines Inc. 7 F9 Frontier Airlines Inc. 8 FL AirTran Airways Corporation 9 HA Hawaiian Airlines Inc. 10 MQ Envoy Air 11 OO SkyWest Airlines Inc. 12 UA United Air Lines Inc. 13 US US Airways Inc. 14 VX Virgin America 15 WN Southwest Airlines Co. 16 YV Mesa Airlines Inc. airports: 각 공항에 대한 정보를 포함한 데이터셋이고 faa는 공항 코드 # A tibble: 1,458 x 8 faa name lat lon alt tz dst tzone &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; 1 04G Lansdowne Airport 41.1 -80.6 1044 -5 A America/New_Yo~ 2 06A Moton Field Municipal A~ 32.5 -85.7 264 -6 A America/Chicago 3 06C Schaumburg Regional 42.0 -88.1 801 -6 A America/Chicago 4 06N Randall Airport 41.4 -74.4 523 -5 A America/New_Yo~ 5 09J Jekyll Island Airport 31.1 -81.4 11 -5 A America/New_Yo~ 6 0A9 Elizabethton Municipal ~ 36.4 -82.2 1593 -5 A America/New_Yo~ 7 0G6 Williams County Airport 41.5 -84.5 730 -5 A America/New_Yo~ 8 0G7 Finger Lakes Regional A~ 42.9 -76.8 492 -5 A America/New_Yo~ 9 0P2 Shoestring Aviation Air~ 39.8 -76.6 1000 -5 U America/New_Yo~ 10 0S9 Jefferson County Intl 48.1 -123. 108 -8 A America/Los_An~ # ... with 1,448 more rows Table 4.4: airports 데이터셋 코드북 변수 설명 faa FAA 공항 코드 name 공항 명칭 lat 위도 lon 경도 alt 고도 tz 타임존 차이(GMT로부터) dst 일광 절약 시간제(섬머타임): A=미국 표준 DST, U=unknown, N=no DST tzone IANA 타임존 planes: 항공기 정보(제조사, 일련번호, 유형 등)에 대한 정보를 포함한 데이터셋 # A tibble: 3,322 x 9 tailnum year type manufacturer model engines seats speed engine &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; 1 N10156 2004 Fixed wing m~ EMBRAER EMB-1~ 2 55 NA Turbo-~ 2 N102UW 1998 Fixed wing m~ AIRBUS INDUST~ A320-~ 2 182 NA Turbo-~ 3 N103US 1999 Fixed wing m~ AIRBUS INDUST~ A320-~ 2 182 NA Turbo-~ 4 N104UW 1999 Fixed wing m~ AIRBUS INDUST~ A320-~ 2 182 NA Turbo-~ 5 N10575 2002 Fixed wing m~ EMBRAER EMB-1~ 2 55 NA Turbo-~ 6 N105UW 1999 Fixed wing m~ AIRBUS INDUST~ A320-~ 2 182 NA Turbo-~ 7 N107US 1999 Fixed wing m~ AIRBUS INDUST~ A320-~ 2 182 NA Turbo-~ 8 N108UW 1999 Fixed wing m~ AIRBUS INDUST~ A320-~ 2 182 NA Turbo-~ 9 N109UW 1999 Fixed wing m~ AIRBUS INDUST~ A320-~ 2 182 NA Turbo-~ 10 N110UW 1999 Fixed wing m~ AIRBUS INDUST~ A320-~ 2 182 NA Turbo-~ # ... with 3,312 more rows Table 4.5: planes 데이터셋 코드북 변수 설명 tailnum 항공기 일련번호 year 제조년도 type 항공기 유형 manufacturer 제조사 model 모델명 engines 엔진 개수 seats 좌석 수 speed 속력 engine 엔진 유형 weather: 뉴욕시 각 공항 별 날씨 정보 # A tibble: 26,115 x 15 origin year month day hour temp dewp humid wind_dir wind_speed &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 EWR 2013 1 1 1 39.0 26.1 59.4 270 10.4 2 EWR 2013 1 1 2 39.0 27.0 61.6 250 8.06 3 EWR 2013 1 1 3 39.0 28.0 64.4 240 11.5 4 EWR 2013 1 1 4 39.9 28.0 62.2 250 12.7 5 EWR 2013 1 1 5 39.0 28.0 64.4 260 12.7 6 EWR 2013 1 1 6 37.9 28.0 67.2 240 11.5 7 EWR 2013 1 1 7 39.0 28.0 64.4 240 15.0 8 EWR 2013 1 1 8 39.9 28.0 62.2 250 10.4 9 EWR 2013 1 1 9 39.9 28.0 62.2 260 15.0 10 EWR 2013 1 1 10 41 28.0 59.6 260 13.8 # ... with 26,105 more rows, and 5 more variables: wind_gust &lt;dbl&gt;, # precip &lt;dbl&gt;, pressure &lt;dbl&gt;, visib &lt;dbl&gt;, time_hour &lt;dttm&gt; Table 4.6: weather 데이터셋 코드북 변수 설명 origin 기상관측소 year, month, day, hour 년도, 월, 일, 시간 temp, dewp 기온, 이슬점 (F) humid 습도 wind_dir, wind_speed, wind_gust 바람방향(degree), 풍속 및 돌풍속도(mph) precip 강수량(inch) pressure 기압(mbar) visib 가시거리(mile) time_hour POSIXct 포맷 일자 및 시간 열거한 각 테이블은 한 개 또는 복수의 변수로 연결 가능 flights \\(\\longleftrightarrow\\) planes (by tailnum) flights \\(\\longleftrightarrow\\) airlines (by carrier) flights \\(\\longleftrightarrow\\) airports (by origin, dest) flights \\(\\longleftrightarrow\\) weather (by origin, year, month, day, hour) Figure 4.9: NYC flight 2013 데이터 관계도(https://r4ds.had.co.nz/ 에서 발췌) 각 쌍의 데이터를 연결하는데 사용한 변수를 키(key)라고 지칭 기준 테이블(여기서는 flights 데이터셋)의 키 \\(\\rightarrow\\) 기본키(primary key) 병합할 테이블의 키 \\(\\rightarrow\\) 외래키(foreign key) 다수의 변수를 이용한 기본키 및 외래키 생성 가능 inner_join 두 데이터셋 모두에 존재하는 키 변수가 일치하는 행을 기준으로 병합 x &lt;- tribble( ~key, ~val_x, 1, &quot;x1&quot;, 2, &quot;x2&quot;, 3, &quot;x3&quot; ) y &lt;- tribble( ~key, ~val_y, 1, &quot;y1&quot;, 2, &quot;y2&quot;, 4, &quot;y3&quot; ) inner_join(x, y, by = &quot;key&quot;) %&gt;% print # A tibble: 2 x 3 key val_x val_y &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; 1 1 x1 y1 2 2 x2 y2 Figure 4.10: inner join 개념(https://statkclee.github.io/data-science/ds-dplyr-join.html 에서 발췌) left_join() 두 데이터셋 관계 중 왼쪽(x) 데이터셋의 행은 모두 보존 left_join(x, y, by = &quot;key&quot;) %&gt;% print # A tibble: 3 x 3 key val_x val_y &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; 1 1 x1 y1 2 2 x2 y2 3 3 x3 &lt;NA&gt; Figure 4.11: left join 개념(https://statkclee.github.io/data-science/ds-dplyr-join.html 에서 발췌) right_join() 두 데이터셋 관계 중 오른쪽(y) 데이터셋의 행은 모두 보존 right_join(x, y, by = &quot;key&quot;) %&gt;% print # A tibble: 3 x 3 key val_x val_y &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; 1 1 x1 y1 2 2 x2 y2 3 4 &lt;NA&gt; y3 Figure 4.12: right join 개념(https://statkclee.github.io/data-science/ds-dplyr-join.html 에서 발췌) full_join 두 데이터셋의 관측치 모두를 보존 full_join(x, y, by = &quot;key&quot;) %&gt;% print # A tibble: 4 x 3 key val_x val_y &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; 1 1 x1 y1 2 2 x2 y2 3 3 x3 &lt;NA&gt; 4 4 &lt;NA&gt; y3 Figure 4.13: full join 개념(https://statkclee.github.io/data-science/ds-dplyr-join.html 에서 발췌) 4.4.11.1 NYC flights 2013 데이터 join 예시 # flights 데이터 간소화(일부 열만 추출) flights2 &lt;- flights %&gt;% select(year:day, hour, origin, dest, tailnum, carrier) # flights2 와 airlines 병합 flights2 %&gt;% left_join(airlines, by = &quot;carrier&quot;) %&gt;% print # A tibble: 336,776 x 9 year month day hour origin dest tailnum carrier name &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; 1 2013 1 1 5 EWR IAH N14228 UA United Air Lines Inc. 2 2013 1 1 5 LGA IAH N24211 UA United Air Lines Inc. 3 2013 1 1 5 JFK MIA N619AA AA American Airlines Inc. 4 2013 1 1 5 JFK BQN N804JB B6 JetBlue Airways 5 2013 1 1 6 LGA ATL N668DN DL Delta Air Lines Inc. 6 2013 1 1 5 EWR ORD N39463 UA United Air Lines Inc. 7 2013 1 1 6 EWR FLL N516JB B6 JetBlue Airways 8 2013 1 1 6 LGA IAD N829AS EV ExpressJet Airlines Inc. 9 2013 1 1 6 JFK MCO N593JB B6 JetBlue Airways 10 2013 1 1 6 LGA ORD N3ALAA AA American Airlines Inc. # ... with 336,766 more rows # flights2와 airline, airports 병합 ## airports 데이터 간소화 airports2 &lt;- airports %&gt;% select(faa:name, airport_name = name) %&gt;% print # A tibble: 1,458 x 2 faa airport_name &lt;chr&gt; &lt;chr&gt; 1 04G Lansdowne Airport 2 06A Moton Field Municipal Airport 3 06C Schaumburg Regional 4 06N Randall Airport 5 09J Jekyll Island Airport 6 0A9 Elizabethton Municipal Airport 7 0G6 Williams County Airport 8 0G7 Finger Lakes Regional Airport 9 0P2 Shoestring Aviation Airfield 10 0S9 Jefferson County Intl # ... with 1,448 more rows flights2 %&gt;% left_join(airlines, by = &quot;carrier&quot;) %&gt;% left_join(airports2, by = c(&quot;origin&quot; = &quot;faa&quot;)) %&gt;% print # A tibble: 336,776 x 10 year month day hour origin dest tailnum carrier name airport_name &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; 1 2013 1 1 5 EWR IAH N14228 UA United Ai~ Newark Liber~ 2 2013 1 1 5 LGA IAH N24211 UA United Ai~ La Guardia 3 2013 1 1 5 JFK MIA N619AA AA American ~ John F Kenne~ 4 2013 1 1 5 JFK BQN N804JB B6 JetBlue A~ John F Kenne~ 5 2013 1 1 6 LGA ATL N668DN DL Delta Air~ La Guardia 6 2013 1 1 5 EWR ORD N39463 UA United Ai~ Newark Liber~ 7 2013 1 1 6 EWR FLL N516JB B6 JetBlue A~ Newark Liber~ 8 2013 1 1 6 LGA IAD N829AS EV ExpressJe~ La Guardia 9 2013 1 1 6 JFK MCO N593JB B6 JetBlue A~ John F Kenne~ 10 2013 1 1 6 LGA ORD N3ALAA AA American ~ La Guardia # ... with 336,766 more rows # flights2와 airline, airports, planes 병합 planes2 &lt;- planes %&gt;% select(tailnum, model) flights2 %&gt;% left_join(airlines, by = &quot;carrier&quot;) %&gt;% left_join(airports2, by = c(&quot;origin&quot; = &quot;faa&quot;)) %&gt;% left_join(planes2, by = &quot;tailnum&quot;) %&gt;% print # A tibble: 336,776 x 11 year month day hour origin dest tailnum carrier name airport_name model &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; 1 2013 1 1 5 EWR IAH N14228 UA Unit~ Newark Libe~ 737-~ 2 2013 1 1 5 LGA IAH N24211 UA Unit~ La Guardia 737-~ 3 2013 1 1 5 JFK MIA N619AA AA Amer~ John F Kenn~ 757-~ 4 2013 1 1 5 JFK BQN N804JB B6 JetB~ John F Kenn~ A320~ 5 2013 1 1 6 LGA ATL N668DN DL Delt~ La Guardia 757-~ 6 2013 1 1 5 EWR ORD N39463 UA Unit~ Newark Libe~ 737-~ 7 2013 1 1 6 EWR FLL N516JB B6 JetB~ Newark Libe~ A320~ 8 2013 1 1 6 LGA IAD N829AS EV Expr~ La Guardia CL-6~ 9 2013 1 1 6 JFK MCO N593JB B6 JetB~ John F Kenn~ A320~ 10 2013 1 1 6 LGA ORD N3ALAA AA Amer~ La Guardia &lt;NA&gt; # ... with 336,766 more rows # flights2와 airline, airports2, planes2, weather2 병합 ## weather 데이터 간소화 weather2 &lt;- weather %&gt;% select(origin:temp, wind_speed) flights2 %&gt;% left_join(airlines, by = &quot;carrier&quot;) %&gt;% left_join(airports2, by = c(&quot;origin&quot; = &quot;faa&quot;)) %&gt;% left_join(planes2, by = &quot;tailnum&quot;) %&gt;% left_join(weather2, by = c(&quot;origin&quot;, &quot;year&quot;, &quot;month&quot;, &quot;day&quot;, &quot;hour&quot;)) %&gt;% glimpse Rows: 336,776 Columns: 13 $ year &lt;int&gt; 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, ... $ month &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ... $ day &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ... $ hour &lt;dbl&gt; 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, ... $ origin &lt;chr&gt; &quot;EWR&quot;, &quot;LGA&quot;, &quot;JFK&quot;, &quot;JFK&quot;, &quot;LGA&quot;, &quot;EWR&quot;, &quot;EWR&quot;, &quot;LGA&quot;... $ dest &lt;chr&gt; &quot;IAH&quot;, &quot;IAH&quot;, &quot;MIA&quot;, &quot;BQN&quot;, &quot;ATL&quot;, &quot;ORD&quot;, &quot;FLL&quot;, &quot;IAD&quot;... $ tailnum &lt;chr&gt; &quot;N14228&quot;, &quot;N24211&quot;, &quot;N619AA&quot;, &quot;N804JB&quot;, &quot;N668DN&quot;, &quot;N39... $ carrier &lt;chr&gt; &quot;UA&quot;, &quot;UA&quot;, &quot;AA&quot;, &quot;B6&quot;, &quot;DL&quot;, &quot;UA&quot;, &quot;B6&quot;, &quot;EV&quot;, &quot;B6&quot;, ... $ name &lt;chr&gt; &quot;United Air Lines Inc.&quot;, &quot;United Air Lines Inc.&quot;, &quot;Ame... $ airport_name &lt;chr&gt; &quot;Newark Liberty Intl&quot;, &quot;La Guardia&quot;, &quot;John F Kennedy I... $ model &lt;chr&gt; &quot;737-824&quot;, &quot;737-824&quot;, &quot;757-223&quot;, &quot;A320-232&quot;, &quot;757-232&quot;... $ temp &lt;dbl&gt; 39.02, 39.92, 39.02, 39.02, 39.92, 39.02, 37.94, 39.92... $ wind_speed &lt;dbl&gt; 12.65858, 14.96014, 14.96014, 14.96014, 16.11092, 12.6... dplyr *_join() 과 base 패키지의 merge() 비교 Table 4.7: dplyr join 함수와 merge() 함수 비교 dplyr::*_join() base::merge() inner_join(x, y) merge(x, y) left_join(x, y) merge(x, y, all.x = TRUE) right_join(x, y) merge(x, y, all.y = TRUE) full_join(x, y) merge(x, y, all.x = TRUE, all.y = TRUE) 4.4.12 확장 예제: Gapminder 연습 데이터: Gapminder 데이터 활용. 각 대륙에 속한 국가의 인구, 경제, 보건, 교육, 환경, 노동에 대한 년도 별 국가 통계를 제공함. Gapminder는 스웨덴의 비영리 통계 분석 서비스를 제공하는 웹사이트로, UN이 제공하는 데이터를 기반으로 인구 예측, 부의 이동 등에 관한 연구 논문 및 통계정보, 데이터를 공유함 (“Gapminder,” n.d.). R 패키지 중 gapminder (Bryan 2017)는 1950 ~ 2007 년 까지 5년 단위의 국가별 인구(population), 기대수명(year), 일인당 국민 총소득(gross domestic product per captia, 달러)에 대한 데이터를 제공 하지만, 본 강의에서는 현재 Gapminder 사이트에서 직접 다운로드 받은 가장 최근 데이터를 가지고 dplyr 패키지의 기본 동사를 학습함과 동시에 최종적으로 gapminder 패키지에서 제공하는 데이터와 동일한 형태의 구조를 갖는 데이터를 생성하는 것이 목직임. 해당 데이터는 github 계정에서 다운로드가 가능함. gapminder-exercise.xlsx는 총 4개의 시트로 구성되어 있으며, 각 시트에 대한 설명은 아래와 같음. Table 4.8: gapminder-exercise.xlsx 설명 시트 이름 설명 region 국가별 지역 정보 포함 country_pop 국가별 1800 ~ 2100년 까지 추계 인구수(명) gdpcap 국가별 1800 ~ 2100년 까지 국민 총소득(달러) lifeexp 국가별 1800 ~ 2100년 까지 기대수명(세) 4.4.12.1 Prerequisites gapminder 패키지 설치하기 install.packages(&quot;gapminder&quot;) Gapminder 데이터 핸들링 실습 readxl 패키지 + %&gt;%를 이용해 Gapminder 데이터(gapminder-exercise.xlsx) 불러오기 require(readxl) require(gapminder) 필요한 패키지를 로딩중입니다: gapminder path &lt;- &quot;dataset/gapminder/gapminder-exercise.xlsx&quot; # base R 문법 적용 # sheet_name &lt;- excel_sheets(path) # gapmL &lt;- lapply(sheet_name, function(x) read_excel(path = path, sheet = x)) # names(gapmL) &lt;- sheet_name # pipe 연산자 이용 path %&gt;% excel_sheets %&gt;% set_names %&gt;% map(read_excel, path = path) -&gt; gapmL # 개별 객체에 데이터 저장 command &lt;- paste(names(gapmL), &quot;&lt;-&quot;, paste0(&quot;gapmL$&quot;, names(gapmL))) for (i in 1:length(command)) eval(parse(text = command[i])) # check ls() [1] &quot;airports2&quot; &quot;audi&quot; &quot;base::merge()&quot; [4] &quot;by_mpg&quot; &quot;codebook&quot; &quot;command&quot; [7] &quot;country_pop&quot; &quot;covid19&quot; &quot;dbp&quot; [10] &quot;dbp2&quot; &quot;dd&quot; &quot;def.chunk.hook&quot; [13] &quot;diab&quot; &quot;dL&quot; &quot;dL2&quot; [16] &quot;dplyr::*_join()&quot; &quot;flights2&quot; &quot;gallon&quot; [19] &quot;gapmL&quot; &quot;gdpcap&quot; &quot;herb&quot; [22] &quot;hook_output&quot; &quot;i&quot; &quot;input1&quot; [25] &quot;input2&quot; &quot;kpl&quot; &quot;lifeexp&quot; [28] &quot;mile&quot; &quot;mpg&quot; &quot;mpg_asc&quot; [31] &quot;mpg_sortb&quot; &quot;mpg_sortt&quot; &quot;mpg_uniq&quot; [34] &quot;mpg_uniq2&quot; &quot;path&quot; &quot;planes2&quot; [37] &quot;plasma&quot; &quot;pulse&quot; &quot;R base 패키지 함수&quot; [40] &quot;region&quot; &quot;sheet_name&quot; &quot;slice_mpg&quot; [43] &quot;slice_mpg_grp&quot; &quot;tab4_01&quot; &quot;tab4_03&quot; [46] &quot;tab4_04&quot; &quot;tab4_05&quot; &quot;tab4_06&quot; [49] &quot;tab4_07&quot; &quot;tab4_08&quot; &quot;titanic&quot; [52] &quot;titanic2&quot; &quot;titanic3&quot; &quot;varn_mpg&quot; [55] &quot;varname&quot; &quot;weather2&quot; &quot;x&quot; [58] &quot;y&quot; &quot;내용&quot; &quot;동사(함수)&quot; [61] &quot;변수&quot; &quot;변수명&quot; &quot;변수설명(국문)&quot; [64] &quot;변수설명(영문)&quot; &quot;설명&quot; &quot;시트 이름&quot; [67] &quot;연비&quot; region %&gt;% print # A tibble: 234 x 3 iso country region &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; 1 AFG Afghanistan Southern Asia 2 ALB Albania Southern Europe 3 DZA Algeria Northern Africa 4 ASM American Samoa Polynesia Oceania 5 AND Andorra Southern Europe 6 AGO Angola Middle Africa 7 AIA Anguilla Caribbean America 8 ATG Antigua and Barbuda Caribbean America 9 ARG Argentina South America 10 ARM Armenia Western Asia # ... with 224 more rows country_pop %&gt;% print # A tibble: 59,297 x 4 iso country year population &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 afg Afghanistan 1800 3280000 2 afg Afghanistan 1801 3280000 3 afg Afghanistan 1802 3280000 4 afg Afghanistan 1803 3280000 5 afg Afghanistan 1804 3280000 6 afg Afghanistan 1805 3280000 7 afg Afghanistan 1806 3280000 8 afg Afghanistan 1807 3280000 9 afg Afghanistan 1808 3280000 10 afg Afghanistan 1809 3280000 # ... with 59,287 more rows gdpcap %&gt;% print # A tibble: 46,995 x 4 iso_code country year gdp_total &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 afg Afghanistan 1800 1977840000 2 afg Afghanistan 1801 1977840000 3 afg Afghanistan 1802 1977840000 4 afg Afghanistan 1803 1977840000 5 afg Afghanistan 1804 1977840000 6 afg Afghanistan 1805 1977840000 7 afg Afghanistan 1806 1977840000 8 afg Afghanistan 1807 1977840000 9 afg Afghanistan 1808 1977840000 10 afg Afghanistan 1809 1977840000 # ... with 46,985 more rows lifeexp %&gt;% print # A tibble: 56,130 x 4 country iso_code year life_expectancy &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 Afghanistan afg 1800 28.2 2 Afghanistan afg 1801 28.2 3 Afghanistan afg 1802 28.2 4 Afghanistan afg 1803 28.2 5 Afghanistan afg 1804 28.2 6 Afghanistan afg 1805 28.2 7 Afghanistan afg 1806 28.2 8 Afghanistan afg 1807 28.1 9 Afghanistan afg 1808 28.1 10 Afghanistan afg 1809 28.1 # ... with 56,120 more rows country_pop, gdpcap, lifeexp 데이터 셋 결합 gap_unfilter &lt;- country_pop %&gt;% left_join(gdpcap, by = c(&quot;iso&quot; = &quot;iso_code&quot;, &quot;country&quot;, &quot;year&quot;)) %&gt;% left_join(lifeexp, by = c(&quot;iso&quot; = &quot;iso_code&quot;, &quot;country&quot;, &quot;year&quot;)) gap_unfilter %&gt;% print # A tibble: 59,297 x 6 iso country year population gdp_total life_expectancy &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 afg Afghanistan 1800 3280000 1977840000 28.2 2 afg Afghanistan 1801 3280000 1977840000 28.2 3 afg Afghanistan 1802 3280000 1977840000 28.2 4 afg Afghanistan 1803 3280000 1977840000 28.2 5 afg Afghanistan 1804 3280000 1977840000 28.2 6 afg Afghanistan 1805 3280000 1977840000 28.2 7 afg Afghanistan 1806 3280000 1977840000 28.2 8 afg Afghanistan 1807 3280000 1977840000 28.1 9 afg Afghanistan 1808 3280000 1977840000 28.1 10 afg Afghanistan 1809 3280000 1977840000 28.1 # ... with 59,287 more rows 인구 수 6만 이상, 1950 ~ 2020년 년도 추출 gap_filter &lt;- gap_unfilter %&gt;% filter(population &gt;= 60000, between(year, 1950, 2020)) gap_filter %&gt;% print # A tibble: 13,159 x 6 iso country year population gdp_total life_expectancy &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 afg Afghanistan 1950 7752117 18543063864 32.5 2 afg Afghanistan 1951 7840151 18988845722 32.9 3 afg Afghanistan 1952 7935996 19538422152 33.6 4 afg Afghanistan 1953 8039684 20645908512 34.3 5 afg Afghanistan 1954 8151316 20997790016 35.0 6 afg Afghanistan 1955 8270992 21330888368 35.7 7 afg Afghanistan 1956 8398873 22206620212 36.4 8 afg Afghanistan 1957 8535157 22131662101 37.1 9 afg Afghanistan 1958 8680097 23297380348 37.9 10 afg Afghanistan 1959 8833947 23895826635 38.6 # ... with 13,149 more rows iso 변수 값을 대문자로 변환하고, 1인당 국민소득(gdp_total/population) 변수 gdp_cap 생성 후 gdp_total 제거 gap_filter &lt;- gap_filter %&gt;% mutate(iso = toupper(iso), gdp_cap = gdp_total/population) %&gt;% select(-gdp_total) gap_filter %&gt;% print # A tibble: 13,159 x 6 iso country year population life_expectancy gdp_cap &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 AFG Afghanistan 1950 7752117 32.5 2392 2 AFG Afghanistan 1951 7840151 32.9 2422 3 AFG Afghanistan 1952 7935996 33.6 2462 4 AFG Afghanistan 1953 8039684 34.3 2568 5 AFG Afghanistan 1954 8151316 35.0 2576 6 AFG Afghanistan 1955 8270992 35.7 2579 7 AFG Afghanistan 1956 8398873 36.4 2644 8 AFG Afghanistan 1957 8535157 37.1 2593 9 AFG Afghanistan 1958 8680097 37.9 2684 10 AFG Afghanistan 1959 8833947 38.6 2705 # ... with 13,149 more rows region 데이터셋에서 대륙(region) 변수 결합 gap_filter &lt;- gap_filter %&gt;% left_join(region %&gt;% select(-country), by = c(&quot;iso&quot;)) gap_filter %&gt;% print # A tibble: 13,159 x 7 iso country year population life_expectancy gdp_cap region &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; 1 AFG Afghanistan 1950 7752117 32.5 2392 Southern Asia 2 AFG Afghanistan 1951 7840151 32.9 2422 Southern Asia 3 AFG Afghanistan 1952 7935996 33.6 2462 Southern Asia 4 AFG Afghanistan 1953 8039684 34.3 2568 Southern Asia 5 AFG Afghanistan 1954 8151316 35.0 2576 Southern Asia 6 AFG Afghanistan 1955 8270992 35.7 2579 Southern Asia 7 AFG Afghanistan 1956 8398873 36.4 2644 Southern Asia 8 AFG Afghanistan 1957 8535157 37.1 2593 Southern Asia 9 AFG Afghanistan 1958 8680097 37.9 2684 Southern Asia 10 AFG Afghanistan 1959 8833947 38.6 2705 Southern Asia # ... with 13,149 more rows 변수 정렬 (iso, country, region, year:gdp_cap 순서로) gap_filter &lt;- gap_filter %&gt;% select(iso:country, region, everything()) 문자형 변수를 요인형으로 변환하고, population을 정수형으로 변환 gap_filter &lt;- gap_filter %&gt;% mutate_if(~ is.character(.), ~factor(.)) %&gt;% mutate(population = as.integer(population)) 2-7 절차를 pipe로 묶으면 gap_filter &lt;- country_pop %&gt;% left_join(gdpcap, by = c(&quot;iso&quot; = &quot;iso_code&quot;, &quot;country&quot;, &quot;year&quot;)) %&gt;% left_join(lifeexp, by = c(&quot;iso&quot; = &quot;iso_code&quot;, &quot;country&quot;, &quot;year&quot;)) %&gt;% filter(population &gt;= 60000, between(year, 1950, 2020)) %&gt;% mutate(iso = toupper(iso), gdp_cap = gdp_total/population) %&gt;% select(-gdp_total) %&gt;% left_join(region %&gt;% select(-country), by = c(&quot;iso&quot;)) %&gt;% select(iso:country, region, everything()) %&gt;% mutate_if(~ is.character(.), ~factor(.)) %&gt;% mutate(population = as.integer(population)) 2020년 현재 지역별 인구수, 평균 일인당 국민소득, 평균 기대수명 계산 후 인구 수로 내림차순 정렬 gap_filter %&gt;% filter(year == 2020) %&gt;% group_by(region) %&gt;% summarise(Population = sum(population), `GDP/Captia` = mean(gdp_cap), `Life expect` = mean(life_expectancy, na.rm = TRUE)) %&gt;% arrange(desc(Population)) References "],
["data-transformation.html", "4.5 데이터 변환", " 4.5 데이터 변환 "],
["homework-04.html", "4.6 Homework #4", " 4.6 Homework #4 과제 제출 방식 R Markdown 문서(Rmd) 파일과 해당 문서를 컴파일 후 생성된 html 파일 모두 제출할 것 모든 문제에 대해 작성한 R 코드 및 결과가 html 문서에 포함되어야 함. 해당 과제에 대한 R Markdown 문서 템플릿은 https://github.com/zorba78/cnu-r-programming-lecture-note/blob/master/assignment/homework4_template.Rmd 에서 다운로드 또는 [Ctrl] + C, [Ctrl] + V 가능 최종 파일명은 학번-성명.Rmd, 학번-성명.html 로 저장 압축파일은 *.zip 형태로 생성할 것 주의 사항 다운로드 받은 파일은 가급적 제출 파일이 생성되는 폴더 안에 새로운 폴더를 만든 후 저장할 것. 예를 들어 homework4.Rmd 파일이 C:/my-project 에서 생성된다면 다운로드 받은 데이터 파일은 C:/my-project/exercise 폴더 안에 저장 만약 Rmd 파일을 C:/my-project/rmd 폴더에 저장되어 있고, R 작업 공간의 작업 디렉토리가 C:/my-project일 때, 다운로드 한 데이터 파일이 C:/my-project/exercise에 있다면, 다음과 같은 chunk 가 Rmd 파일 맨 처음에 선행되어야 함. ```{r, eval=FALSE} knitr::opts_knit$set(root.dir = &#39;..&#39;) ``` 자료실에 업로드된 exercise.zip 파일을 다운로드 후 exercise 폴더에 압축을 풀면 총 20개의 텍스트 파일이 저장되어 있다. 해당 파일들은 휴면상태 뇌파(resting state EEG) 신호로부터 추출한 특징(feature)이다. 폴더에 포함된 텍스트 파일의 이름은 기기명 (h7n1), EEG 변수 특징 (beam_results), 파일번호 (예: 009)로 구성되어 있고 _로 연결되어 있다. 저장된 텍스트 파일 중 하나를 열어보고 해당 텍스트 파일이 저장하고 있는 데이터의 구조에 대해 설명하고, 열과 열을 구분하기 위해 어떠한 구분자(separator)가 사용되었는지 기술하시오. 1-a 답: 입력(입력 시 해당 문구 삭제) 다운로드한 텍스트 파일이 저장된 폴더 경로를 path 라는 객체에 저장하고, dir() 함수를 이용해 해당 폴더에 저장되어 있는 파일의 이름 모두를 filename 이라는 객체에 저장 하시오. (참고: dir() 함수는 인수로 받은 폴더 경로 내 존재하는 모든 파일의 이름 및 확장자를 문자형 벡터로 반환해 주는 함수임. 자세한 사용법은 help(dir)을 통해 확인) path &lt;- &quot;../dataset/exercise&quot; filename &lt;- dir(path) filename 에서 기기명 부분만 추출 후, file_dev 객체에 저장 하시오. 정규표현식을 이용하여 filename 에서 기기명에 해당하는 부분을 삭제 후 file_id 객체에 저장 하시오(hint: gsub() 함수를 사용할 수 있으먀, file_id에 저장되어 있는 문자열 원소 모두는 beam_results_009.txt와 같은 형태로 반환되어야 함). 정규표현식을 사용하여 위에서 생성한 file_id에서 숫자만 추출 후 id_tmp 라는 객체를 생성 하시오. 그리고 ID 문자열와 file_id에 저장되어 있는 문자열과 결합해 모든 원소가 ID009와 같은 형태의 원소값을 갖는 ID 객체를 생성하시오 paste() 또는 paste0() 함수를 활용해 1-a. 에서 생성한 path라는 객체와 filename을 이용해 파일경로/파일명 형태의 문자형 벡터를 full_filename 객체에 저장하시오. 1-f.에서 만든 full_filename, lapply()와 read.table() 함수를 활용하여 폴더에 저장되어 있는 모든 텍스트 파일을 리스트 형태로 저장한 datl 객체를 생성 하시오. 1-g.에서 생성한 datl에 저장되어 있는 20개의 데이터 프레임을 하나의 데이터 프레임으로 묶은 결과를 저장한 dat 객체를 생성 하시오. 1-c. 와 1-d. 에서 생성한 ID와 file_dev 를 이용해 두 개의 변수로 구성된 id_info 라는 데이터 프레임을 생성 하시오. 단 두 문자형 벡터의 각 원소는 3 번씩 반복되어야 하고, 각 변수는 모두 문자형으로 저장되어야 함. 1-i. 에서 생성한 데이터 프레임 id_info 와 1.h 에서 생성한 dat 을 하나의 데이터 프레임으로 묶은 dat_fin 이라는 객체를 생성 하시오. 자료실에 업로드된 beam-crf-ex.rds를 다운로드 한 후 R 작업공간에 불러온 결과를 beam_crf 객체에 저장하시오. tidyverse 패키지를 R 작업공간으로 읽은 후 dplyr 에서 제공하는 함수를 이용해 1-k. 에서 생성한 beam_crf 의 변수 eeg_filenam 문자열 중 처음 5개 문자(예: ID158)만 추출한 eeg_id라는 변수를 beam_crf 데이터 프레임 내에 새로운 변수로 만드시오. 두 데이터 프레임 beam_crf와 dat_fin은 연결할 수 있는가? 연결할 수 있다면 그 이유를 설명 하시오. 1-m 답: 만약 연결할 수 있다면 beam_crf와 dat_fin을 join 하여 두 데이터 프레임에 공통으로 포함된 행으로 구성된 데이터 프레임 beam_sub 객체를 생성 하시오. 1.n. 에서 생성한 beam_sub에 대해 dplyr 에서 제공하는 함수를 이용해 아래 기술한 내용을 수행 하시오. 단 각 단계는 파이프 연산자(%&gt;%) 로 연결 하시오. usubjid, sex, age, literacy, Row, MDF, PF, ATR 변수를 선택한 다음 변수 sex, literacy, Row를 요인형(factor)으로 변환하고, 변수 age를 floor() 함수를 이용해 소숫점 내림한 결과가 저장된 beam_sub2 객체를 생성 하시오. beam_sub2를 이용해 아래 기술한 결과를 반환하는 스크립트를 작성 후 확인 하시오. Row 수준별 MDF, PF, ATR의 평균(mean()), 표준편차(sd()), 최솟값(min()), 중앙값(median()), 최댓값(max())을 출력 하시오(dplyr 패키지 함수 이용). 2.literacy는 조사에 참여한 대상자가 문자식별(문자를 읽고 쓸수 있는지)에 대한 정보를 담고 있는 변수이다. 문자식별 변수의 수준 별 케이스 수와 age, MDF, PF, ATR의 평균 결과를 출력 하시오(dplyr 패키지 함수 이용) . 1.p.1 과 1.p.2 와 동일한 결과를 출력하는 스크립트를 R 기본 문법을 이용해 작성해 본 후 두 방법(dplyr 문법 vs. R 기본 문법)에 대해 비교해 보시오. # 1. # 2. # 3. 1-p-3 비교 서술: "]
]
